
ScalarNetworkAnalyzer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ae8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08005c70  08005c70  00015c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cfc  08005cfc  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08005cfc  08005cfc  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005cfc  08005cfc  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cfc  08005cfc  00015cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d00  08005d00  00015d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08005d04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000018  08005d1c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08005d1c  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ab1  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022a8  00000000  00000000  00030af9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000af8  00000000  00000000  00032da8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a00  00000000  00000000  000338a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000163de  00000000  00000000  000342a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c65b  00000000  00000000  0004a67e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00082268  00000000  00000000  00056cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d8f41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c48  00000000  00000000  000d8fbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005c58 	.word	0x08005c58

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08005c58 	.word	0x08005c58

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
 80009b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ba:	4b48      	ldr	r3, [pc, #288]	; (8000adc <MX_GPIO_Init+0x138>)
 80009bc:	695b      	ldr	r3, [r3, #20]
 80009be:	4a47      	ldr	r2, [pc, #284]	; (8000adc <MX_GPIO_Init+0x138>)
 80009c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009c4:	6153      	str	r3, [r2, #20]
 80009c6:	4b45      	ldr	r3, [pc, #276]	; (8000adc <MX_GPIO_Init+0x138>)
 80009c8:	695b      	ldr	r3, [r3, #20]
 80009ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009d2:	4b42      	ldr	r3, [pc, #264]	; (8000adc <MX_GPIO_Init+0x138>)
 80009d4:	695b      	ldr	r3, [r3, #20]
 80009d6:	4a41      	ldr	r2, [pc, #260]	; (8000adc <MX_GPIO_Init+0x138>)
 80009d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009dc:	6153      	str	r3, [r2, #20]
 80009de:	4b3f      	ldr	r3, [pc, #252]	; (8000adc <MX_GPIO_Init+0x138>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	4b3c      	ldr	r3, [pc, #240]	; (8000adc <MX_GPIO_Init+0x138>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	4a3b      	ldr	r2, [pc, #236]	; (8000adc <MX_GPIO_Init+0x138>)
 80009f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f4:	6153      	str	r3, [r2, #20]
 80009f6:	4b39      	ldr	r3, [pc, #228]	; (8000adc <MX_GPIO_Init+0x138>)
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	4b36      	ldr	r3, [pc, #216]	; (8000adc <MX_GPIO_Init+0x138>)
 8000a04:	695b      	ldr	r3, [r3, #20]
 8000a06:	4a35      	ldr	r2, [pc, #212]	; (8000adc <MX_GPIO_Init+0x138>)
 8000a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a0c:	6153      	str	r3, [r2, #20]
 8000a0e:	4b33      	ldr	r3, [pc, #204]	; (8000adc <MX_GPIO_Init+0x138>)
 8000a10:	695b      	ldr	r3, [r3, #20]
 8000a12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TestLED_GPIO_Port, TestLED_Pin, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a20:	482f      	ldr	r0, [pc, #188]	; (8000ae0 <MX_GPIO_Init+0x13c>)
 8000a22:	f000 ff1f 	bl	8001864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SDN_RX_Pin|RF_IN_CTRL_2_Pin|RF_OUT_CTRL_Pin, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	f248 2140 	movw	r1, #33344	; 0x8240
 8000a2c:	482d      	ldr	r0, [pc, #180]	; (8000ae4 <MX_GPIO_Init+0x140>)
 8000a2e:	f000 ff19 	bl	8001864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SDN_TX_Pin|RF_IN_CTRL_1_Pin, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 8000a38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3c:	f000 ff12 	bl	8001864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Slave_RX_Pin|RX_ATT_Pin, GPIO_PIN_SET);
 8000a40:	2201      	movs	r2, #1
 8000a42:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000a46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4a:	f000 ff0b 	bl	8001864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Slave_TX_Pin|TX_ATT_Pin, GPIO_PIN_SET);
 8000a4e:	2201      	movs	r2, #1
 8000a50:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000a54:	4823      	ldr	r0, [pc, #140]	; (8000ae4 <MX_GPIO_Init+0x140>)
 8000a56:	f000 ff05 	bl	8001864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TestLED_Pin;
 8000a5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TestLED_GPIO_Port, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	481b      	ldr	r0, [pc, #108]	; (8000ae0 <MX_GPIO_Init+0x13c>)
 8000a74:	f000 fd84 	bl	8001580 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TestBTN_Pin;
 8000a78:	2310      	movs	r3, #16
 8000a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a7c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TestBTN_GPIO_Port, &GPIO_InitStruct);
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a90:	f000 fd76 	bl	8001580 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SDN_RX_Pin|RF_IN_CTRL_2_Pin|Slave_TX_Pin|TX_ATT_Pin
 8000a94:	f248 33c0 	movw	r3, #33728	; 0x83c0
 8000a98:	617b      	str	r3, [r7, #20]
                          |RF_OUT_CTRL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	4619      	mov	r1, r3
 8000aac:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <MX_GPIO_Init+0x140>)
 8000aae:	f000 fd67 	bl	8001580 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SDN_TX_Pin|Slave_RX_Pin|RX_ATT_Pin|RF_IN_CTRL_1_Pin;
 8000ab2:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8000ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ace:	f000 fd57 	bl	8001580 <HAL_GPIO_Init>

}
 8000ad2:	bf00      	nop
 8000ad4:	3728      	adds	r7, #40	; 0x28
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	48000800 	.word	0x48000800
 8000ae4:	48000400 	.word	0x48000400

08000ae8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aee:	f000 fb37 	bl	8001160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000af2:	f000 f88d 	bl	8000c10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000af6:	f7ff ff55 	bl	80009a4 <MX_GPIO_Init>
  MX_SPI3_Init();
 8000afa:	f000 f9a1 	bl	8000e40 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 8000afe:	f000 fa8b 	bl	8001018 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  StateMachine_Init(&sm, State_WaitingForCommand, &huart2);
 8000b02:	4a3b      	ldr	r2, [pc, #236]	; (8000bf0 <main+0x108>)
 8000b04:	2100      	movs	r1, #0
 8000b06:	483b      	ldr	r0, [pc, #236]	; (8000bf4 <main+0x10c>)
 8000b08:	f004 ff9e 	bl	8005a48 <StateMachine_Init>
  HAL_Delay(1);
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	f000 fb8d 	bl	800122c <HAL_Delay>
  Control_Init();
 8000b12:	f004 f8fe 	bl	8004d12 <Control_Init>
  Si446x_Init(&transmitter, Slave_TX_GPIO_Port, Slave_TX_Pin, SDN_TX_GPIO_Port, SDN_TX_Pin, &hspi3, 29997500, OOK);
 8000b16:	2301      	movs	r3, #1
 8000b18:	9303      	str	r3, [sp, #12]
 8000b1a:	4b37      	ldr	r3, [pc, #220]	; (8000bf8 <main+0x110>)
 8000b1c:	9302      	str	r3, [sp, #8]
 8000b1e:	4b37      	ldr	r3, [pc, #220]	; (8000bfc <main+0x114>)
 8000b20:	9301      	str	r3, [sp, #4]
 8000b22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b26:	9300      	str	r3, [sp, #0]
 8000b28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b2c:	2280      	movs	r2, #128	; 0x80
 8000b2e:	4934      	ldr	r1, [pc, #208]	; (8000c00 <main+0x118>)
 8000b30:	4834      	ldr	r0, [pc, #208]	; (8000c04 <main+0x11c>)
 8000b32:	f004 f98f 	bl	8004e54 <Si446x_Init>
  Si446x_Init(&receiver, Slave_RX_GPIO_Port, Slave_RX_Pin, SDN_RX_GPIO_Port, SDN_RX_Pin, &hspi3, 29997500, OOK);
 8000b36:	2301      	movs	r3, #1
 8000b38:	9303      	str	r3, [sp, #12]
 8000b3a:	4b2f      	ldr	r3, [pc, #188]	; (8000bf8 <main+0x110>)
 8000b3c:	9302      	str	r3, [sp, #8]
 8000b3e:	4b2f      	ldr	r3, [pc, #188]	; (8000bfc <main+0x114>)
 8000b40:	9301      	str	r3, [sp, #4]
 8000b42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	4b2d      	ldr	r3, [pc, #180]	; (8000c00 <main+0x118>)
 8000b4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b4e:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000b52:	482d      	ldr	r0, [pc, #180]	; (8000c08 <main+0x120>)
 8000b54:	f004 f97e 	bl	8004e54 <Si446x_Init>

  HAL_UART_Receive_IT(sm.huart, &CMDBuffer, 1);
 8000b58:	4b26      	ldr	r3, [pc, #152]	; (8000bf4 <main+0x10c>)
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	492b      	ldr	r1, [pc, #172]	; (8000c0c <main+0x124>)
 8000b60:	4618      	mov	r0, r3
 8000b62:	f002 ffeb 	bl	8003b3c <HAL_UART_Receive_IT>

//  Si446x_SetFrequency(&transmitter, 915000000);
////  Si446x_SetFrequency(&receiver, 915000000);
//  Si446x_StartTX(&transmitter);

  uint32_t freq_buffer = Si446x_GetFrequency(&transmitter);
 8000b66:	4827      	ldr	r0, [pc, #156]	; (8000c04 <main+0x11c>)
 8000b68:	f004 fc2c 	bl	80053c4 <Si446x_GetFrequency>
 8000b6c:	6078      	str	r0, [r7, #4]
  uint8_t mod_buffer = Si446x_GetModulationType(&transmitter);
 8000b6e:	4825      	ldr	r0, [pc, #148]	; (8000c04 <main+0x11c>)
 8000b70:	f004 fb12 	bl	8005198 <Si446x_GetModulationType>
 8000b74:	4603      	mov	r3, r0
 8000b76:	70fb      	strb	r3, [r7, #3]
  uint8_t band_buffer = Si446x_GetBand(&transmitter);
 8000b78:	4822      	ldr	r0, [pc, #136]	; (8000c04 <main+0x11c>)
 8000b7a:	f004 fddd 	bl	8005738 <Si446x_GetBand>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	70bb      	strb	r3, [r7, #2]
  uint8_t pwr_lvl_buffer = Si446x_GetPowerLevel(&transmitter);
 8000b82:	4820      	ldr	r0, [pc, #128]	; (8000c04 <main+0x11c>)
 8000b84:	f004 fe4a 	bl	800581c <Si446x_GetPowerLevel>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	707b      	strb	r3, [r7, #1]
  uint8_t rssi = Si446x_GetRSSI(&receiver);
 8000b8c:	481e      	ldr	r0, [pc, #120]	; (8000c08 <main+0x120>)
 8000b8e:	f004 fee7 	bl	8005960 <Si446x_GetRSSI>
 8000b92:	4603      	mov	r3, r0
 8000b94:	703b      	strb	r3, [r7, #0]
//	  {
//		SP4T_SelectInput(i);
////		DPDT_SelectInput(i);
//	  }

	  switch (sm.state){
 8000b96:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <main+0x10c>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b05      	cmp	r3, #5
 8000b9c:	d822      	bhi.n	8000be4 <main+0xfc>
 8000b9e:	a201      	add	r2, pc, #4	; (adr r2, 8000ba4 <main+0xbc>)
 8000ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba4:	08000bbd 	.word	0x08000bbd
 8000ba8:	08000bc5 	.word	0x08000bc5
 8000bac:	08000bcd 	.word	0x08000bcd
 8000bb0:	08000be5 	.word	0x08000be5
 8000bb4:	08000bd5 	.word	0x08000bd5
 8000bb8:	08000bdd 	.word	0x08000bdd
	  	  case State_WaitingForCommand:
	  		  WaitingForCommand(&sm);
 8000bbc:	480d      	ldr	r0, [pc, #52]	; (8000bf4 <main+0x10c>)
 8000bbe:	f004 ff56 	bl	8005a6e <WaitingForCommand>
	  		  break;
 8000bc2:	e013      	b.n	8000bec <main+0x104>
	  	  case State_GettingStartFrequency:
	  		  GettingStartFrequency(&sm);
 8000bc4:	480b      	ldr	r0, [pc, #44]	; (8000bf4 <main+0x10c>)
 8000bc6:	f004 ff5c 	bl	8005a82 <GettingStartFrequency>
	  		  break;
 8000bca:	e00f      	b.n	8000bec <main+0x104>
	  	  case State_GettingStopFrequency:
	  		  GettingStopFrequency(&sm);
 8000bcc:	4809      	ldr	r0, [pc, #36]	; (8000bf4 <main+0x10c>)
 8000bce:	f004 ff62 	bl	8005a96 <GettingStopFrequency>
	  		  break;
 8000bd2:	e00b      	b.n	8000bec <main+0x104>
	  	  case State_StartMeasurement:
	  		  StartMeasurement(&sm);
 8000bd4:	4807      	ldr	r0, [pc, #28]	; (8000bf4 <main+0x10c>)
 8000bd6:	f004 ff69 	bl	8005aac <StartMeasurement>
	  		  break;
 8000bda:	e007      	b.n	8000bec <main+0x104>
	  	  case State_Measuring:
	  		  Measuring(&sm);
 8000bdc:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <main+0x10c>)
 8000bde:	f004 ff81 	bl	8005ae4 <Measuring>
	  		  break;
 8000be2:	e003      	b.n	8000bec <main+0x104>
	  	  default:
	  		  WaitingForCommand(&sm);
 8000be4:	4803      	ldr	r0, [pc, #12]	; (8000bf4 <main+0x10c>)
 8000be6:	f004 ff42 	bl	8005a6e <WaitingForCommand>
	  		  break;
 8000bea:	bf00      	nop
	  switch (sm.state){
 8000bec:	e7d3      	b.n	8000b96 <main+0xae>
 8000bee:	bf00      	nop
 8000bf0:	200000e4 	.word	0x200000e4
 8000bf4:	20000078 	.word	0x20000078
 8000bf8:	01c9b9bc 	.word	0x01c9b9bc
 8000bfc:	20000080 	.word	0x20000080
 8000c00:	48000400 	.word	0x48000400
 8000c04:	2000005c 	.word	0x2000005c
 8000c08:	20000038 	.word	0x20000038
 8000c0c:	20000058 	.word	0x20000058

08000c10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b090      	sub	sp, #64	; 0x40
 8000c14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c16:	f107 0318 	add.w	r3, r7, #24
 8000c1a:	2228      	movs	r2, #40	; 0x28
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f005 f812 	bl	8005c48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
 8000c30:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c32:	2301      	movs	r3, #1
 8000c34:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c3a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c40:	2301      	movs	r3, #1
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c44:	2302      	movs	r3, #2
 8000c46:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c4e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c52:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c54:	f107 0318 	add.w	r3, r7, #24
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f000 fe35 	bl	80018c8 <HAL_RCC_OscConfig>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c64:	f000 f8e8 	bl	8000e38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c68:	230f      	movs	r3, #15
 8000c6a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	2102      	movs	r1, #2
 8000c82:	4618      	mov	r0, r3
 8000c84:	f001 fd28 	bl	80026d8 <HAL_RCC_ClockConfig>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c8e:	f000 f8d3 	bl	8000e38 <Error_Handler>
  }
}
 8000c92:	bf00      	nop
 8000c94:	3740      	adds	r7, #64	; 0x40
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a5a      	ldr	r2, [pc, #360]	; (8000e14 <HAL_UART_RxCpltCallback+0x178>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	f040 80ae 	bne.w	8000e0c <HAL_UART_RxCpltCallback+0x170>
	{
		BufferData = (Buffer[3] << 24) + (Buffer[2] << 16) + (Buffer[1] << 8) + Buffer[0];
 8000cb0:	4b59      	ldr	r3, [pc, #356]	; (8000e18 <HAL_UART_RxCpltCallback+0x17c>)
 8000cb2:	78db      	ldrb	r3, [r3, #3]
 8000cb4:	061a      	lsls	r2, r3, #24
 8000cb6:	4b58      	ldr	r3, [pc, #352]	; (8000e18 <HAL_UART_RxCpltCallback+0x17c>)
 8000cb8:	789b      	ldrb	r3, [r3, #2]
 8000cba:	041b      	lsls	r3, r3, #16
 8000cbc:	441a      	add	r2, r3
 8000cbe:	4b56      	ldr	r3, [pc, #344]	; (8000e18 <HAL_UART_RxCpltCallback+0x17c>)
 8000cc0:	785b      	ldrb	r3, [r3, #1]
 8000cc2:	021b      	lsls	r3, r3, #8
 8000cc4:	4413      	add	r3, r2
 8000cc6:	4a54      	ldr	r2, [pc, #336]	; (8000e18 <HAL_UART_RxCpltCallback+0x17c>)
 8000cc8:	7812      	ldrb	r2, [r2, #0]
 8000cca:	4413      	add	r3, r2
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b53      	ldr	r3, [pc, #332]	; (8000e1c <HAL_UART_RxCpltCallback+0x180>)
 8000cd0:	601a      	str	r2, [r3, #0]
		//HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);

		if(sm.state == State_WaitingForCommand)
 8000cd2:	4b53      	ldr	r3, [pc, #332]	; (8000e20 <HAL_UART_RxCpltCallback+0x184>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d14d      	bne.n	8000d76 <HAL_UART_RxCpltCallback+0xda>
		{

			if(CMDBuffer == GET_START_FREQUENCY_CMD)
 8000cda:	4b52      	ldr	r3, [pc, #328]	; (8000e24 <HAL_UART_RxCpltCallback+0x188>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d110      	bne.n	8000d04 <HAL_UART_RxCpltCallback+0x68>
			{
				HAL_GPIO_WritePin(TestLED_GPIO_Port, TestLED_Pin, GPIO_PIN_SET);
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ce8:	484f      	ldr	r0, [pc, #316]	; (8000e28 <HAL_UART_RxCpltCallback+0x18c>)
 8000cea:	f000 fdbb 	bl	8001864 <HAL_GPIO_WritePin>
				sm.state = State_GettingStartFrequency;
 8000cee:	4b4c      	ldr	r3, [pc, #304]	; (8000e20 <HAL_UART_RxCpltCallback+0x184>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(sm.huart, Buffer, 4);
 8000cf4:	4b4a      	ldr	r3, [pc, #296]	; (8000e20 <HAL_UART_RxCpltCallback+0x184>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	2204      	movs	r2, #4
 8000cfa:	4947      	ldr	r1, [pc, #284]	; (8000e18 <HAL_UART_RxCpltCallback+0x17c>)
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f002 ff1d 	bl	8003b3c <HAL_UART_Receive_IT>
				return;
 8000d02:	e083      	b.n	8000e0c <HAL_UART_RxCpltCallback+0x170>
			}
			if(CMDBuffer == GET_STOP_FREQUENCY_CMD)
 8000d04:	4b47      	ldr	r3, [pc, #284]	; (8000e24 <HAL_UART_RxCpltCallback+0x188>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d110      	bne.n	8000d2e <HAL_UART_RxCpltCallback+0x92>
			{
				HAL_GPIO_WritePin(TestLED_GPIO_Port, TestLED_Pin, GPIO_PIN_SET);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d12:	4845      	ldr	r0, [pc, #276]	; (8000e28 <HAL_UART_RxCpltCallback+0x18c>)
 8000d14:	f000 fda6 	bl	8001864 <HAL_GPIO_WritePin>
				sm.state = State_GettingStopFrequency;
 8000d18:	4b41      	ldr	r3, [pc, #260]	; (8000e20 <HAL_UART_RxCpltCallback+0x184>)
 8000d1a:	2202      	movs	r2, #2
 8000d1c:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(sm.huart, Buffer, 4);
 8000d1e:	4b40      	ldr	r3, [pc, #256]	; (8000e20 <HAL_UART_RxCpltCallback+0x184>)
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	2204      	movs	r2, #4
 8000d24:	493c      	ldr	r1, [pc, #240]	; (8000e18 <HAL_UART_RxCpltCallback+0x17c>)
 8000d26:	4618      	mov	r0, r3
 8000d28:	f002 ff08 	bl	8003b3c <HAL_UART_Receive_IT>
				return;
 8000d2c:	e06e      	b.n	8000e0c <HAL_UART_RxCpltCallback+0x170>
			}
			if(CMDBuffer == GET_RESOLUTION_CMD)
 8000d2e:	4b3d      	ldr	r3, [pc, #244]	; (8000e24 <HAL_UART_RxCpltCallback+0x188>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b03      	cmp	r3, #3
 8000d34:	d110      	bne.n	8000d58 <HAL_UART_RxCpltCallback+0xbc>
			{
				HAL_GPIO_WritePin(TestLED_GPIO_Port, TestLED_Pin, GPIO_PIN_SET);
 8000d36:	2201      	movs	r2, #1
 8000d38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d3c:	483a      	ldr	r0, [pc, #232]	; (8000e28 <HAL_UART_RxCpltCallback+0x18c>)
 8000d3e:	f000 fd91 	bl	8001864 <HAL_GPIO_WritePin>
				sm.state = State_GettingResolution;
 8000d42:	4b37      	ldr	r3, [pc, #220]	; (8000e20 <HAL_UART_RxCpltCallback+0x184>)
 8000d44:	2203      	movs	r2, #3
 8000d46:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(sm.huart, Buffer, 4);
 8000d48:	4b35      	ldr	r3, [pc, #212]	; (8000e20 <HAL_UART_RxCpltCallback+0x184>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	2204      	movs	r2, #4
 8000d4e:	4932      	ldr	r1, [pc, #200]	; (8000e18 <HAL_UART_RxCpltCallback+0x17c>)
 8000d50:	4618      	mov	r0, r3
 8000d52:	f002 fef3 	bl	8003b3c <HAL_UART_Receive_IT>
				return;
 8000d56:	e059      	b.n	8000e0c <HAL_UART_RxCpltCallback+0x170>
			}
			if(CMDBuffer == START_MEASUREMENT_CMD)
 8000d58:	4b32      	ldr	r3, [pc, #200]	; (8000e24 <HAL_UART_RxCpltCallback+0x188>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b04      	cmp	r3, #4
 8000d5e:	d10a      	bne.n	8000d76 <HAL_UART_RxCpltCallback+0xda>
			{
				sm.state = State_StartMeasurement;
 8000d60:	4b2f      	ldr	r3, [pc, #188]	; (8000e20 <HAL_UART_RxCpltCallback+0x184>)
 8000d62:	2204      	movs	r2, #4
 8000d64:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(sm.huart, &CMDBuffer, 1);
 8000d66:	4b2e      	ldr	r3, [pc, #184]	; (8000e20 <HAL_UART_RxCpltCallback+0x184>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	492d      	ldr	r1, [pc, #180]	; (8000e24 <HAL_UART_RxCpltCallback+0x188>)
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f002 fee4 	bl	8003b3c <HAL_UART_Receive_IT>
				return;
 8000d74:	e04a      	b.n	8000e0c <HAL_UART_RxCpltCallback+0x170>
			}
		}
		if(sm.state == State_GettingStartFrequency)
 8000d76:	4b2a      	ldr	r3, [pc, #168]	; (8000e20 <HAL_UART_RxCpltCallback+0x184>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d114      	bne.n	8000da8 <HAL_UART_RxCpltCallback+0x10c>
		{
			startFreq = BufferData;
 8000d7e:	4b27      	ldr	r3, [pc, #156]	; (8000e1c <HAL_UART_RxCpltCallback+0x180>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a2a      	ldr	r2, [pc, #168]	; (8000e2c <HAL_UART_RxCpltCallback+0x190>)
 8000d84:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(TestLED_GPIO_Port, TestLED_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d8c:	4826      	ldr	r0, [pc, #152]	; (8000e28 <HAL_UART_RxCpltCallback+0x18c>)
 8000d8e:	f000 fd69 	bl	8001864 <HAL_GPIO_WritePin>
			sm.state = State_WaitingForCommand;
 8000d92:	4b23      	ldr	r3, [pc, #140]	; (8000e20 <HAL_UART_RxCpltCallback+0x184>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(sm.huart, &CMDBuffer, 1);
 8000d98:	4b21      	ldr	r3, [pc, #132]	; (8000e20 <HAL_UART_RxCpltCallback+0x184>)
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	4921      	ldr	r1, [pc, #132]	; (8000e24 <HAL_UART_RxCpltCallback+0x188>)
 8000da0:	4618      	mov	r0, r3
 8000da2:	f002 fecb 	bl	8003b3c <HAL_UART_Receive_IT>
			return;
 8000da6:	e031      	b.n	8000e0c <HAL_UART_RxCpltCallback+0x170>
		}
		if(sm.state == State_GettingStopFrequency)
 8000da8:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <HAL_UART_RxCpltCallback+0x184>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b02      	cmp	r3, #2
 8000dae:	d114      	bne.n	8000dda <HAL_UART_RxCpltCallback+0x13e>
		{
			stopFreq = BufferData;
 8000db0:	4b1a      	ldr	r3, [pc, #104]	; (8000e1c <HAL_UART_RxCpltCallback+0x180>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a1e      	ldr	r2, [pc, #120]	; (8000e30 <HAL_UART_RxCpltCallback+0x194>)
 8000db6:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(TestLED_GPIO_Port, TestLED_Pin, GPIO_PIN_RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dbe:	481a      	ldr	r0, [pc, #104]	; (8000e28 <HAL_UART_RxCpltCallback+0x18c>)
 8000dc0:	f000 fd50 	bl	8001864 <HAL_GPIO_WritePin>
			sm.state = State_WaitingForCommand;
 8000dc4:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <HAL_UART_RxCpltCallback+0x184>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(sm.huart, &CMDBuffer, 1);
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <HAL_UART_RxCpltCallback+0x184>)
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	2201      	movs	r2, #1
 8000dd0:	4914      	ldr	r1, [pc, #80]	; (8000e24 <HAL_UART_RxCpltCallback+0x188>)
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f002 feb2 	bl	8003b3c <HAL_UART_Receive_IT>
			return;
 8000dd8:	e018      	b.n	8000e0c <HAL_UART_RxCpltCallback+0x170>
		}
		if(sm.state == State_GettingResolution)
 8000dda:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <HAL_UART_RxCpltCallback+0x184>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2b03      	cmp	r3, #3
 8000de0:	d114      	bne.n	8000e0c <HAL_UART_RxCpltCallback+0x170>
		{
			resolution = BufferData;
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <HAL_UART_RxCpltCallback+0x180>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a13      	ldr	r2, [pc, #76]	; (8000e34 <HAL_UART_RxCpltCallback+0x198>)
 8000de8:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(TestLED_GPIO_Port, TestLED_Pin, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000df0:	480d      	ldr	r0, [pc, #52]	; (8000e28 <HAL_UART_RxCpltCallback+0x18c>)
 8000df2:	f000 fd37 	bl	8001864 <HAL_GPIO_WritePin>
			sm.state = State_WaitingForCommand;
 8000df6:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <HAL_UART_RxCpltCallback+0x184>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(sm.huart, &CMDBuffer, 1);
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <HAL_UART_RxCpltCallback+0x184>)
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	2201      	movs	r2, #1
 8000e02:	4908      	ldr	r1, [pc, #32]	; (8000e24 <HAL_UART_RxCpltCallback+0x188>)
 8000e04:	4618      	mov	r0, r3
 8000e06:	f002 fe99 	bl	8003b3c <HAL_UART_Receive_IT>
			return;
 8000e0a:	bf00      	nop
		}

	}
}
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40004400 	.word	0x40004400
 8000e18:	20000034 	.word	0x20000034
 8000e1c:	20000054 	.word	0x20000054
 8000e20:	20000078 	.word	0x20000078
 8000e24:	20000058 	.word	0x20000058
 8000e28:	48000800 	.word	0x48000800
 8000e2c:	20000000 	.word	0x20000000
 8000e30:	20000004 	.word	0x20000004
 8000e34:	20000008 	.word	0x20000008

08000e38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e3c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e3e:	e7fe      	b.n	8000e3e <Error_Handler+0x6>

08000e40 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8000e44:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <MX_SPI3_Init+0x74>)
 8000e46:	4a1c      	ldr	r2, [pc, #112]	; (8000eb8 <MX_SPI3_Init+0x78>)
 8000e48:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000e4a:	4b1a      	ldr	r3, [pc, #104]	; (8000eb4 <MX_SPI3_Init+0x74>)
 8000e4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e50:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000e52:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <MX_SPI3_Init+0x74>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e58:	4b16      	ldr	r3, [pc, #88]	; (8000eb4 <MX_SPI3_Init+0x74>)
 8000e5a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e5e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e60:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <MX_SPI3_Init+0x74>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e66:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <MX_SPI3_Init+0x74>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000e6c:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <MX_SPI3_Init+0x74>)
 8000e6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e72:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000e74:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <MX_SPI3_Init+0x74>)
 8000e76:	2208      	movs	r2, #8
 8000e78:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <MX_SPI3_Init+0x74>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <MX_SPI3_Init+0x74>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e86:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <MX_SPI3_Init+0x74>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000e8c:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <MX_SPI3_Init+0x74>)
 8000e8e:	2207      	movs	r2, #7
 8000e90:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e92:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <MX_SPI3_Init+0x74>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <MX_SPI3_Init+0x74>)
 8000e9a:	2208      	movs	r2, #8
 8000e9c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000e9e:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <MX_SPI3_Init+0x74>)
 8000ea0:	f001 fe52 	bl	8002b48 <HAL_SPI_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000eaa:	f7ff ffc5 	bl	8000e38 <Error_Handler>
  }

}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000080 	.word	0x20000080
 8000eb8:	40003c00 	.word	0x40003c00

08000ebc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a17      	ldr	r2, [pc, #92]	; (8000f38 <HAL_SPI_MspInit+0x7c>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d127      	bne.n	8000f2e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ede:	4b17      	ldr	r3, [pc, #92]	; (8000f3c <HAL_SPI_MspInit+0x80>)
 8000ee0:	69db      	ldr	r3, [r3, #28]
 8000ee2:	4a16      	ldr	r2, [pc, #88]	; (8000f3c <HAL_SPI_MspInit+0x80>)
 8000ee4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ee8:	61d3      	str	r3, [r2, #28]
 8000eea:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <HAL_SPI_MspInit+0x80>)
 8000eec:	69db      	ldr	r3, [r3, #28]
 8000eee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef6:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <HAL_SPI_MspInit+0x80>)
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	4a10      	ldr	r2, [pc, #64]	; (8000f3c <HAL_SPI_MspInit+0x80>)
 8000efc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f00:	6153      	str	r3, [r2, #20]
 8000f02:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <HAL_SPI_MspInit+0x80>)
 8000f04:	695b      	ldr	r3, [r3, #20]
 8000f06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000f0e:	2338      	movs	r3, #56	; 0x38
 8000f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f1e:	2306      	movs	r3, #6
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	4619      	mov	r1, r3
 8000f28:	4805      	ldr	r0, [pc, #20]	; (8000f40 <HAL_SPI_MspInit+0x84>)
 8000f2a:	f000 fb29 	bl	8001580 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000f2e:	bf00      	nop
 8000f30:	3728      	adds	r7, #40	; 0x28
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40003c00 	.word	0x40003c00
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	48000400 	.word	0x48000400

08000f44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4a:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <HAL_MspInit+0x44>)
 8000f4c:	699b      	ldr	r3, [r3, #24]
 8000f4e:	4a0e      	ldr	r2, [pc, #56]	; (8000f88 <HAL_MspInit+0x44>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6193      	str	r3, [r2, #24]
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <HAL_MspInit+0x44>)
 8000f58:	699b      	ldr	r3, [r3, #24]
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f62:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <HAL_MspInit+0x44>)
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	4a08      	ldr	r2, [pc, #32]	; (8000f88 <HAL_MspInit+0x44>)
 8000f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f6c:	61d3      	str	r3, [r2, #28]
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_MspInit+0x44>)
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f76:	603b      	str	r3, [r7, #0]
 8000f78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	40021000 	.word	0x40021000

08000f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <NMI_Handler+0x4>

08000f92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f96:	e7fe      	b.n	8000f96 <HardFault_Handler+0x4>

08000f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <MemManage_Handler+0x4>

08000f9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa2:	e7fe      	b.n	8000fa2 <BusFault_Handler+0x4>

08000fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <UsageFault_Handler+0x4>

08000faa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd8:	f000 f908 	bl	80011ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fe4:	4802      	ldr	r0, [pc, #8]	; (8000ff0 <USART2_IRQHandler+0x10>)
 8000fe6:	f002 fdf7 	bl	8003bd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200000e4 	.word	0x200000e4

08000ff4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <SystemInit+0x20>)
 8000ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ffe:	4a05      	ldr	r2, [pc, #20]	; (8001014 <SystemInit+0x20>)
 8001000:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001004:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800101c:	4b14      	ldr	r3, [pc, #80]	; (8001070 <MX_USART2_UART_Init+0x58>)
 800101e:	4a15      	ldr	r2, [pc, #84]	; (8001074 <MX_USART2_UART_Init+0x5c>)
 8001020:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001022:	4b13      	ldr	r3, [pc, #76]	; (8001070 <MX_USART2_UART_Init+0x58>)
 8001024:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001028:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <MX_USART2_UART_Init+0x58>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001030:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <MX_USART2_UART_Init+0x58>)
 8001032:	2200      	movs	r2, #0
 8001034:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <MX_USART2_UART_Init+0x58>)
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <MX_USART2_UART_Init+0x58>)
 800103e:	220c      	movs	r2, #12
 8001040:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001042:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <MX_USART2_UART_Init+0x58>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001048:	4b09      	ldr	r3, [pc, #36]	; (8001070 <MX_USART2_UART_Init+0x58>)
 800104a:	2200      	movs	r2, #0
 800104c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800104e:	4b08      	ldr	r3, [pc, #32]	; (8001070 <MX_USART2_UART_Init+0x58>)
 8001050:	2200      	movs	r2, #0
 8001052:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <MX_USART2_UART_Init+0x58>)
 8001056:	2200      	movs	r2, #0
 8001058:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <MX_USART2_UART_Init+0x58>)
 800105c:	f002 fc8c 	bl	8003978 <HAL_UART_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001066:	f7ff fee7 	bl	8000e38 <Error_Handler>
  }

}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200000e4 	.word	0x200000e4
 8001074:	40004400 	.word	0x40004400

08001078 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	; 0x28
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a1b      	ldr	r2, [pc, #108]	; (8001104 <HAL_UART_MspInit+0x8c>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d130      	bne.n	80010fc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800109a:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <HAL_UART_MspInit+0x90>)
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	4a1a      	ldr	r2, [pc, #104]	; (8001108 <HAL_UART_MspInit+0x90>)
 80010a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a4:	61d3      	str	r3, [r2, #28]
 80010a6:	4b18      	ldr	r3, [pc, #96]	; (8001108 <HAL_UART_MspInit+0x90>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b2:	4b15      	ldr	r3, [pc, #84]	; (8001108 <HAL_UART_MspInit+0x90>)
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	4a14      	ldr	r2, [pc, #80]	; (8001108 <HAL_UART_MspInit+0x90>)
 80010b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010bc:	6153      	str	r3, [r2, #20]
 80010be:	4b12      	ldr	r3, [pc, #72]	; (8001108 <HAL_UART_MspInit+0x90>)
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010ca:	230c      	movs	r3, #12
 80010cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d6:	2303      	movs	r3, #3
 80010d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010da:	2307      	movs	r3, #7
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4619      	mov	r1, r3
 80010e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e8:	f000 fa4a 	bl	8001580 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010ec:	2200      	movs	r2, #0
 80010ee:	2100      	movs	r1, #0
 80010f0:	2026      	movs	r0, #38	; 0x26
 80010f2:	f000 f998 	bl	8001426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010f6:	2026      	movs	r0, #38	; 0x26
 80010f8:	f000 f9b1 	bl	800145e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010fc:	bf00      	nop
 80010fe:	3728      	adds	r7, #40	; 0x28
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40004400 	.word	0x40004400
 8001108:	40021000 	.word	0x40021000

0800110c <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800110c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001144 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001110:	480d      	ldr	r0, [pc, #52]	; (8001148 <LoopForever+0x6>)
  ldr r1, =_edata
 8001112:	490e      	ldr	r1, [pc, #56]	; (800114c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001114:	4a0e      	ldr	r2, [pc, #56]	; (8001150 <LoopForever+0xe>)
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001118:	e002      	b.n	8001120 <LoopCopyDataInit>

0800111a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800111c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111e:	3304      	adds	r3, #4

08001120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001124:	d3f9      	bcc.n	800111a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001126:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001128:	4c0b      	ldr	r4, [pc, #44]	; (8001158 <LoopForever+0x16>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800112c:	e001      	b.n	8001132 <LoopFillZerobss>

0800112e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001130:	3204      	adds	r2, #4

08001132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001134:	d3fb      	bcc.n	800112e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001136:	f7ff ff5d 	bl	8000ff4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800113a:	f004 fd61 	bl	8005c00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800113e:	f7ff fcd3 	bl	8000ae8 <main>

08001142 <LoopForever>:

LoopForever:
    b LoopForever
 8001142:	e7fe      	b.n	8001142 <LoopForever>
Reset_Handler:  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001144:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001148:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800114c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001150:	08005d04 	.word	0x08005d04
  ldr r2, =_sbss
 8001154:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001158:	2000016c 	.word	0x2000016c

0800115c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800115c:	e7fe      	b.n	800115c <ADC1_IRQHandler>
	...

08001160 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <HAL_Init+0x28>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a07      	ldr	r2, [pc, #28]	; (8001188 <HAL_Init+0x28>)
 800116a:	f043 0310 	orr.w	r3, r3, #16
 800116e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001170:	2003      	movs	r0, #3
 8001172:	f000 f94d 	bl	8001410 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001176:	2000      	movs	r0, #0
 8001178:	f000 f808 	bl	800118c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800117c:	f7ff fee2 	bl	8000f44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40022000 	.word	0x40022000

0800118c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <HAL_InitTick+0x54>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <HAL_InitTick+0x58>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	4619      	mov	r1, r3
 800119e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 f965 	bl	800147a <HAL_SYSTICK_Config>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e00e      	b.n	80011d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2b0f      	cmp	r3, #15
 80011be:	d80a      	bhi.n	80011d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c0:	2200      	movs	r2, #0
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295
 80011c8:	f000 f92d 	bl	8001426 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011cc:	4a06      	ldr	r2, [pc, #24]	; (80011e8 <HAL_InitTick+0x5c>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80011d2:	2300      	movs	r3, #0
 80011d4:	e000      	b.n	80011d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	2000000c 	.word	0x2000000c
 80011e4:	20000014 	.word	0x20000014
 80011e8:	20000010 	.word	0x20000010

080011ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_IncTick+0x20>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	461a      	mov	r2, r3
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <HAL_IncTick+0x24>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4413      	add	r3, r2
 80011fc:	4a04      	ldr	r2, [pc, #16]	; (8001210 <HAL_IncTick+0x24>)
 80011fe:	6013      	str	r3, [r2, #0]
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000014 	.word	0x20000014
 8001210:	20000168 	.word	0x20000168

08001214 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return uwTick;  
 8001218:	4b03      	ldr	r3, [pc, #12]	; (8001228 <HAL_GetTick+0x14>)
 800121a:	681b      	ldr	r3, [r3, #0]
}
 800121c:	4618      	mov	r0, r3
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	20000168 	.word	0x20000168

0800122c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001234:	f7ff ffee 	bl	8001214 <HAL_GetTick>
 8001238:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001244:	d005      	beq.n	8001252 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <HAL_Delay+0x40>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4413      	add	r3, r2
 8001250:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001252:	bf00      	nop
 8001254:	f7ff ffde 	bl	8001214 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	429a      	cmp	r2, r3
 8001262:	d8f7      	bhi.n	8001254 <HAL_Delay+0x28>
  {
  }
}
 8001264:	bf00      	nop
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000014 	.word	0x20000014

08001270 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800128c:	4013      	ands	r3, r2
 800128e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001298:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800129c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012a2:	4a04      	ldr	r2, [pc, #16]	; (80012b4 <__NVIC_SetPriorityGrouping+0x44>)
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	60d3      	str	r3, [r2, #12]
}
 80012a8:	bf00      	nop
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012bc:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <__NVIC_GetPriorityGrouping+0x18>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	0a1b      	lsrs	r3, r3, #8
 80012c2:	f003 0307 	and.w	r3, r3, #7
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	db0b      	blt.n	80012fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	f003 021f 	and.w	r2, r3, #31
 80012ec:	4907      	ldr	r1, [pc, #28]	; (800130c <__NVIC_EnableIRQ+0x38>)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	095b      	lsrs	r3, r3, #5
 80012f4:	2001      	movs	r0, #1
 80012f6:	fa00 f202 	lsl.w	r2, r0, r2
 80012fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000e100 	.word	0xe000e100

08001310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	6039      	str	r1, [r7, #0]
 800131a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001320:	2b00      	cmp	r3, #0
 8001322:	db0a      	blt.n	800133a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	b2da      	uxtb	r2, r3
 8001328:	490c      	ldr	r1, [pc, #48]	; (800135c <__NVIC_SetPriority+0x4c>)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	0112      	lsls	r2, r2, #4
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	440b      	add	r3, r1
 8001334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001338:	e00a      	b.n	8001350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4908      	ldr	r1, [pc, #32]	; (8001360 <__NVIC_SetPriority+0x50>)
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	f003 030f 	and.w	r3, r3, #15
 8001346:	3b04      	subs	r3, #4
 8001348:	0112      	lsls	r2, r2, #4
 800134a:	b2d2      	uxtb	r2, r2
 800134c:	440b      	add	r3, r1
 800134e:	761a      	strb	r2, [r3, #24]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000e100 	.word	0xe000e100
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001364:	b480      	push	{r7}
 8001366:	b089      	sub	sp, #36	; 0x24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f1c3 0307 	rsb	r3, r3, #7
 800137e:	2b04      	cmp	r3, #4
 8001380:	bf28      	it	cs
 8001382:	2304      	movcs	r3, #4
 8001384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3304      	adds	r3, #4
 800138a:	2b06      	cmp	r3, #6
 800138c:	d902      	bls.n	8001394 <NVIC_EncodePriority+0x30>
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3b03      	subs	r3, #3
 8001392:	e000      	b.n	8001396 <NVIC_EncodePriority+0x32>
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001398:	f04f 32ff 	mov.w	r2, #4294967295
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43da      	mvns	r2, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	401a      	ands	r2, r3
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ac:	f04f 31ff 	mov.w	r1, #4294967295
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	fa01 f303 	lsl.w	r3, r1, r3
 80013b6:	43d9      	mvns	r1, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	4313      	orrs	r3, r2
         );
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3724      	adds	r7, #36	; 0x24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
	...

080013cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013dc:	d301      	bcc.n	80013e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013de:	2301      	movs	r3, #1
 80013e0:	e00f      	b.n	8001402 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e2:	4a0a      	ldr	r2, [pc, #40]	; (800140c <SysTick_Config+0x40>)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ea:	210f      	movs	r1, #15
 80013ec:	f04f 30ff 	mov.w	r0, #4294967295
 80013f0:	f7ff ff8e 	bl	8001310 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <SysTick_Config+0x40>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013fa:	4b04      	ldr	r3, [pc, #16]	; (800140c <SysTick_Config+0x40>)
 80013fc:	2207      	movs	r2, #7
 80013fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	e000e010 	.word	0xe000e010

08001410 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff ff29 	bl	8001270 <__NVIC_SetPriorityGrouping>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b086      	sub	sp, #24
 800142a:	af00      	add	r7, sp, #0
 800142c:	4603      	mov	r3, r0
 800142e:	60b9      	str	r1, [r7, #8]
 8001430:	607a      	str	r2, [r7, #4]
 8001432:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001438:	f7ff ff3e 	bl	80012b8 <__NVIC_GetPriorityGrouping>
 800143c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	68b9      	ldr	r1, [r7, #8]
 8001442:	6978      	ldr	r0, [r7, #20]
 8001444:	f7ff ff8e 	bl	8001364 <NVIC_EncodePriority>
 8001448:	4602      	mov	r2, r0
 800144a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800144e:	4611      	mov	r1, r2
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff ff5d 	bl	8001310 <__NVIC_SetPriority>
}
 8001456:	bf00      	nop
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	4603      	mov	r3, r0
 8001466:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff31 	bl	80012d4 <__NVIC_EnableIRQ>
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff ffa2 	bl	80013cc <SysTick_Config>
 8001488:	4603      	mov	r3, r0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d008      	beq.n	80014b6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2204      	movs	r2, #4
 80014a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e020      	b.n	80014f8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f022 020e 	bic.w	r2, r2, #14
 80014c4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f022 0201 	bic.w	r2, r2, #1
 80014d4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014de:	2101      	movs	r1, #1
 80014e0:	fa01 f202 	lsl.w	r2, r1, r2
 80014e4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2201      	movs	r2, #1
 80014ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800150c:	2300      	movs	r3, #0
 800150e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001516:	2b02      	cmp	r3, #2
 8001518:	d005      	beq.n	8001526 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2204      	movs	r2, #4
 800151e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	73fb      	strb	r3, [r7, #15]
 8001524:	e027      	b.n	8001576 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 020e 	bic.w	r2, r2, #14
 8001534:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f022 0201 	bic.w	r2, r2, #1
 8001544:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800154e:	2101      	movs	r1, #1
 8001550:	fa01 f202 	lsl.w	r2, r1, r2
 8001554:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2201      	movs	r2, #1
 800155a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	4798      	blx	r3
    } 
  }
  return status;
 8001576:	7bfb      	ldrb	r3, [r7, #15]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001580:	b480      	push	{r7}
 8001582:	b087      	sub	sp, #28
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800158e:	e14e      	b.n	800182e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	2101      	movs	r1, #1
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	fa01 f303 	lsl.w	r3, r1, r3
 800159c:	4013      	ands	r3, r2
 800159e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 8140 	beq.w	8001828 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d005      	beq.n	80015c0 <HAL_GPIO_Init+0x40>
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d130      	bne.n	8001622 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	2203      	movs	r2, #3
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4013      	ands	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	68da      	ldr	r2, [r3, #12]
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015f6:	2201      	movs	r2, #1
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43db      	mvns	r3, r3
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	4013      	ands	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	091b      	lsrs	r3, r3, #4
 800160c:	f003 0201 	and.w	r2, r3, #1
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4313      	orrs	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f003 0303 	and.w	r3, r3, #3
 800162a:	2b03      	cmp	r3, #3
 800162c:	d017      	beq.n	800165e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	2203      	movs	r2, #3
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43db      	mvns	r3, r3
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	4013      	ands	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	689a      	ldr	r2, [r3, #8]
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4313      	orrs	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 0303 	and.w	r3, r3, #3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d123      	bne.n	80016b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	08da      	lsrs	r2, r3, #3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3208      	adds	r2, #8
 8001672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001676:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	220f      	movs	r2, #15
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	4013      	ands	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	691a      	ldr	r2, [r3, #16]
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	f003 0307 	and.w	r3, r3, #7
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	08da      	lsrs	r2, r3, #3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3208      	adds	r2, #8
 80016ac:	6939      	ldr	r1, [r7, #16]
 80016ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	2203      	movs	r2, #3
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43db      	mvns	r3, r3
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	4013      	ands	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f003 0203 	and.w	r2, r3, #3
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	4313      	orrs	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f000 809a 	beq.w	8001828 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f4:	4b55      	ldr	r3, [pc, #340]	; (800184c <HAL_GPIO_Init+0x2cc>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	4a54      	ldr	r2, [pc, #336]	; (800184c <HAL_GPIO_Init+0x2cc>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	6193      	str	r3, [r2, #24]
 8001700:	4b52      	ldr	r3, [pc, #328]	; (800184c <HAL_GPIO_Init+0x2cc>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800170c:	4a50      	ldr	r2, [pc, #320]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	089b      	lsrs	r3, r3, #2
 8001712:	3302      	adds	r3, #2
 8001714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001718:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	f003 0303 	and.w	r3, r3, #3
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	220f      	movs	r2, #15
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4013      	ands	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001736:	d013      	beq.n	8001760 <HAL_GPIO_Init+0x1e0>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a46      	ldr	r2, [pc, #280]	; (8001854 <HAL_GPIO_Init+0x2d4>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d00d      	beq.n	800175c <HAL_GPIO_Init+0x1dc>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4a45      	ldr	r2, [pc, #276]	; (8001858 <HAL_GPIO_Init+0x2d8>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d007      	beq.n	8001758 <HAL_GPIO_Init+0x1d8>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a44      	ldr	r2, [pc, #272]	; (800185c <HAL_GPIO_Init+0x2dc>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d101      	bne.n	8001754 <HAL_GPIO_Init+0x1d4>
 8001750:	2303      	movs	r3, #3
 8001752:	e006      	b.n	8001762 <HAL_GPIO_Init+0x1e2>
 8001754:	2305      	movs	r3, #5
 8001756:	e004      	b.n	8001762 <HAL_GPIO_Init+0x1e2>
 8001758:	2302      	movs	r3, #2
 800175a:	e002      	b.n	8001762 <HAL_GPIO_Init+0x1e2>
 800175c:	2301      	movs	r3, #1
 800175e:	e000      	b.n	8001762 <HAL_GPIO_Init+0x1e2>
 8001760:	2300      	movs	r3, #0
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	f002 0203 	and.w	r2, r2, #3
 8001768:	0092      	lsls	r2, r2, #2
 800176a:	4093      	lsls	r3, r2
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	4313      	orrs	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001772:	4937      	ldr	r1, [pc, #220]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	089b      	lsrs	r3, r3, #2
 8001778:	3302      	adds	r3, #2
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001780:	4b37      	ldr	r3, [pc, #220]	; (8001860 <HAL_GPIO_Init+0x2e0>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	43db      	mvns	r3, r3
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4013      	ands	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017a4:	4a2e      	ldr	r2, [pc, #184]	; (8001860 <HAL_GPIO_Init+0x2e0>)
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017aa:	4b2d      	ldr	r3, [pc, #180]	; (8001860 <HAL_GPIO_Init+0x2e0>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	43db      	mvns	r3, r3
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	4013      	ands	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017ce:	4a24      	ldr	r2, [pc, #144]	; (8001860 <HAL_GPIO_Init+0x2e0>)
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017d4:	4b22      	ldr	r3, [pc, #136]	; (8001860 <HAL_GPIO_Init+0x2e0>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	43db      	mvns	r3, r3
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4013      	ands	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d003      	beq.n	80017f8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017f8:	4a19      	ldr	r2, [pc, #100]	; (8001860 <HAL_GPIO_Init+0x2e0>)
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017fe:	4b18      	ldr	r3, [pc, #96]	; (8001860 <HAL_GPIO_Init+0x2e0>)
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	43db      	mvns	r3, r3
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	4013      	ands	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4313      	orrs	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001822:	4a0f      	ldr	r2, [pc, #60]	; (8001860 <HAL_GPIO_Init+0x2e0>)
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	3301      	adds	r3, #1
 800182c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	fa22 f303 	lsr.w	r3, r2, r3
 8001838:	2b00      	cmp	r3, #0
 800183a:	f47f aea9 	bne.w	8001590 <HAL_GPIO_Init+0x10>
  }
}
 800183e:	bf00      	nop
 8001840:	371c      	adds	r7, #28
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	40021000 	.word	0x40021000
 8001850:	40010000 	.word	0x40010000
 8001854:	48000400 	.word	0x48000400
 8001858:	48000800 	.word	0x48000800
 800185c:	48000c00 	.word	0x48000c00
 8001860:	40010400 	.word	0x40010400

08001864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	460b      	mov	r3, r1
 800186e:	807b      	strh	r3, [r7, #2]
 8001870:	4613      	mov	r3, r2
 8001872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001874:	787b      	ldrb	r3, [r7, #1]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800187a:	887a      	ldrh	r2, [r7, #2]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001880:	e002      	b.n	8001888 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001882:	887a      	ldrh	r2, [r7, #2]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	460b      	mov	r3, r1
 800189e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	695b      	ldr	r3, [r3, #20]
 80018a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018a6:	887a      	ldrh	r2, [r7, #2]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4013      	ands	r3, r2
 80018ac:	041a      	lsls	r2, r3, #16
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	43d9      	mvns	r1, r3
 80018b2:	887b      	ldrh	r3, [r7, #2]
 80018b4:	400b      	ands	r3, r1
 80018b6:	431a      	orrs	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	619a      	str	r2, [r3, #24]
}
 80018bc:	bf00      	nop
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	1d3b      	adds	r3, r7, #4
 80018d2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d102      	bne.n	80018e2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	f000 bef4 	b.w	80026ca <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f000 816a 	beq.w	8001bc6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80018f2:	4bb3      	ldr	r3, [pc, #716]	; (8001bc0 <HAL_RCC_OscConfig+0x2f8>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 030c 	and.w	r3, r3, #12
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	d00c      	beq.n	8001918 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018fe:	4bb0      	ldr	r3, [pc, #704]	; (8001bc0 <HAL_RCC_OscConfig+0x2f8>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f003 030c 	and.w	r3, r3, #12
 8001906:	2b08      	cmp	r3, #8
 8001908:	d159      	bne.n	80019be <HAL_RCC_OscConfig+0xf6>
 800190a:	4bad      	ldr	r3, [pc, #692]	; (8001bc0 <HAL_RCC_OscConfig+0x2f8>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001916:	d152      	bne.n	80019be <HAL_RCC_OscConfig+0xf6>
 8001918:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800191c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001920:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001924:	fa93 f3a3 	rbit	r3, r3
 8001928:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800192c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001930:	fab3 f383 	clz	r3, r3
 8001934:	b2db      	uxtb	r3, r3
 8001936:	095b      	lsrs	r3, r3, #5
 8001938:	b2db      	uxtb	r3, r3
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b01      	cmp	r3, #1
 8001942:	d102      	bne.n	800194a <HAL_RCC_OscConfig+0x82>
 8001944:	4b9e      	ldr	r3, [pc, #632]	; (8001bc0 <HAL_RCC_OscConfig+0x2f8>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	e015      	b.n	8001976 <HAL_RCC_OscConfig+0xae>
 800194a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800194e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001952:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001956:	fa93 f3a3 	rbit	r3, r3
 800195a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800195e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001962:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001966:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800196a:	fa93 f3a3 	rbit	r3, r3
 800196e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001972:	4b93      	ldr	r3, [pc, #588]	; (8001bc0 <HAL_RCC_OscConfig+0x2f8>)
 8001974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001976:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800197a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800197e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001982:	fa92 f2a2 	rbit	r2, r2
 8001986:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800198a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800198e:	fab2 f282 	clz	r2, r2
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	f042 0220 	orr.w	r2, r2, #32
 8001998:	b2d2      	uxtb	r2, r2
 800199a:	f002 021f 	and.w	r2, r2, #31
 800199e:	2101      	movs	r1, #1
 80019a0:	fa01 f202 	lsl.w	r2, r1, r2
 80019a4:	4013      	ands	r3, r2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f000 810c 	beq.w	8001bc4 <HAL_RCC_OscConfig+0x2fc>
 80019ac:	1d3b      	adds	r3, r7, #4
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f040 8106 	bne.w	8001bc4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	f000 be86 	b.w	80026ca <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c8:	d106      	bne.n	80019d8 <HAL_RCC_OscConfig+0x110>
 80019ca:	4b7d      	ldr	r3, [pc, #500]	; (8001bc0 <HAL_RCC_OscConfig+0x2f8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a7c      	ldr	r2, [pc, #496]	; (8001bc0 <HAL_RCC_OscConfig+0x2f8>)
 80019d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	e030      	b.n	8001a3a <HAL_RCC_OscConfig+0x172>
 80019d8:	1d3b      	adds	r3, r7, #4
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d10c      	bne.n	80019fc <HAL_RCC_OscConfig+0x134>
 80019e2:	4b77      	ldr	r3, [pc, #476]	; (8001bc0 <HAL_RCC_OscConfig+0x2f8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a76      	ldr	r2, [pc, #472]	; (8001bc0 <HAL_RCC_OscConfig+0x2f8>)
 80019e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ec:	6013      	str	r3, [r2, #0]
 80019ee:	4b74      	ldr	r3, [pc, #464]	; (8001bc0 <HAL_RCC_OscConfig+0x2f8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a73      	ldr	r2, [pc, #460]	; (8001bc0 <HAL_RCC_OscConfig+0x2f8>)
 80019f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	e01e      	b.n	8001a3a <HAL_RCC_OscConfig+0x172>
 80019fc:	1d3b      	adds	r3, r7, #4
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a06:	d10c      	bne.n	8001a22 <HAL_RCC_OscConfig+0x15a>
 8001a08:	4b6d      	ldr	r3, [pc, #436]	; (8001bc0 <HAL_RCC_OscConfig+0x2f8>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a6c      	ldr	r2, [pc, #432]	; (8001bc0 <HAL_RCC_OscConfig+0x2f8>)
 8001a0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a12:	6013      	str	r3, [r2, #0]
 8001a14:	4b6a      	ldr	r3, [pc, #424]	; (8001bc0 <HAL_RCC_OscConfig+0x2f8>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a69      	ldr	r2, [pc, #420]	; (8001bc0 <HAL_RCC_OscConfig+0x2f8>)
 8001a1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a1e:	6013      	str	r3, [r2, #0]
 8001a20:	e00b      	b.n	8001a3a <HAL_RCC_OscConfig+0x172>
 8001a22:	4b67      	ldr	r3, [pc, #412]	; (8001bc0 <HAL_RCC_OscConfig+0x2f8>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a66      	ldr	r2, [pc, #408]	; (8001bc0 <HAL_RCC_OscConfig+0x2f8>)
 8001a28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	4b64      	ldr	r3, [pc, #400]	; (8001bc0 <HAL_RCC_OscConfig+0x2f8>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a63      	ldr	r2, [pc, #396]	; (8001bc0 <HAL_RCC_OscConfig+0x2f8>)
 8001a34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a38:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a3a:	4b61      	ldr	r3, [pc, #388]	; (8001bc0 <HAL_RCC_OscConfig+0x2f8>)
 8001a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3e:	f023 020f 	bic.w	r2, r3, #15
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	495d      	ldr	r1, [pc, #372]	; (8001bc0 <HAL_RCC_OscConfig+0x2f8>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a4e:	1d3b      	adds	r3, r7, #4
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d059      	beq.n	8001b0c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a58:	f7ff fbdc 	bl	8001214 <HAL_GetTick>
 8001a5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a60:	e00a      	b.n	8001a78 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a62:	f7ff fbd7 	bl	8001214 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b64      	cmp	r3, #100	; 0x64
 8001a70:	d902      	bls.n	8001a78 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	f000 be29 	b.w	80026ca <HAL_RCC_OscConfig+0xe02>
 8001a78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a7c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a80:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001a84:	fa93 f3a3 	rbit	r3, r3
 8001a88:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001a8c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a90:	fab3 f383 	clz	r3, r3
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	095b      	lsrs	r3, r3, #5
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d102      	bne.n	8001aaa <HAL_RCC_OscConfig+0x1e2>
 8001aa4:	4b46      	ldr	r3, [pc, #280]	; (8001bc0 <HAL_RCC_OscConfig+0x2f8>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	e015      	b.n	8001ad6 <HAL_RCC_OscConfig+0x20e>
 8001aaa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aae:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001ab6:	fa93 f3a3 	rbit	r3, r3
 8001aba:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001abe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ac2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001ac6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001aca:	fa93 f3a3 	rbit	r3, r3
 8001ace:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001ad2:	4b3b      	ldr	r3, [pc, #236]	; (8001bc0 <HAL_RCC_OscConfig+0x2f8>)
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ada:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001ade:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001ae2:	fa92 f2a2 	rbit	r2, r2
 8001ae6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001aea:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001aee:	fab2 f282 	clz	r2, r2
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	f042 0220 	orr.w	r2, r2, #32
 8001af8:	b2d2      	uxtb	r2, r2
 8001afa:	f002 021f 	and.w	r2, r2, #31
 8001afe:	2101      	movs	r1, #1
 8001b00:	fa01 f202 	lsl.w	r2, r1, r2
 8001b04:	4013      	ands	r3, r2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0ab      	beq.n	8001a62 <HAL_RCC_OscConfig+0x19a>
 8001b0a:	e05c      	b.n	8001bc6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0c:	f7ff fb82 	bl	8001214 <HAL_GetTick>
 8001b10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b14:	e00a      	b.n	8001b2c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b16:	f7ff fb7d 	bl	8001214 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b64      	cmp	r3, #100	; 0x64
 8001b24:	d902      	bls.n	8001b2c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	f000 bdcf 	b.w	80026ca <HAL_RCC_OscConfig+0xe02>
 8001b2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b30:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b34:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001b38:	fa93 f3a3 	rbit	r3, r3
 8001b3c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001b40:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b44:	fab3 f383 	clz	r3, r3
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	095b      	lsrs	r3, r3, #5
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d102      	bne.n	8001b5e <HAL_RCC_OscConfig+0x296>
 8001b58:	4b19      	ldr	r3, [pc, #100]	; (8001bc0 <HAL_RCC_OscConfig+0x2f8>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	e015      	b.n	8001b8a <HAL_RCC_OscConfig+0x2c2>
 8001b5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b62:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b66:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001b6a:	fa93 f3a3 	rbit	r3, r3
 8001b6e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001b72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b76:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001b7a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001b7e:	fa93 f3a3 	rbit	r3, r3
 8001b82:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001b86:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <HAL_RCC_OscConfig+0x2f8>)
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b8e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001b92:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001b96:	fa92 f2a2 	rbit	r2, r2
 8001b9a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001b9e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001ba2:	fab2 f282 	clz	r2, r2
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	f042 0220 	orr.w	r2, r2, #32
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	f002 021f 	and.w	r2, r2, #31
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb8:	4013      	ands	r3, r2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1ab      	bne.n	8001b16 <HAL_RCC_OscConfig+0x24e>
 8001bbe:	e002      	b.n	8001bc6 <HAL_RCC_OscConfig+0x2fe>
 8001bc0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bc6:	1d3b      	adds	r3, r7, #4
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 816f 	beq.w	8001eb4 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001bd6:	4bd0      	ldr	r3, [pc, #832]	; (8001f18 <HAL_RCC_OscConfig+0x650>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00b      	beq.n	8001bfa <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001be2:	4bcd      	ldr	r3, [pc, #820]	; (8001f18 <HAL_RCC_OscConfig+0x650>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f003 030c 	and.w	r3, r3, #12
 8001bea:	2b08      	cmp	r3, #8
 8001bec:	d16c      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x400>
 8001bee:	4bca      	ldr	r3, [pc, #808]	; (8001f18 <HAL_RCC_OscConfig+0x650>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d166      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x400>
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c00:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001c04:	fa93 f3a3 	rbit	r3, r3
 8001c08:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001c0c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c10:	fab3 f383 	clz	r3, r3
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	095b      	lsrs	r3, r3, #5
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d102      	bne.n	8001c2a <HAL_RCC_OscConfig+0x362>
 8001c24:	4bbc      	ldr	r3, [pc, #752]	; (8001f18 <HAL_RCC_OscConfig+0x650>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	e013      	b.n	8001c52 <HAL_RCC_OscConfig+0x38a>
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c30:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001c34:	fa93 f3a3 	rbit	r3, r3
 8001c38:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001c42:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001c46:	fa93 f3a3 	rbit	r3, r3
 8001c4a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001c4e:	4bb2      	ldr	r3, [pc, #712]	; (8001f18 <HAL_RCC_OscConfig+0x650>)
 8001c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c52:	2202      	movs	r2, #2
 8001c54:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001c58:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001c5c:	fa92 f2a2 	rbit	r2, r2
 8001c60:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001c64:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001c68:	fab2 f282 	clz	r2, r2
 8001c6c:	b2d2      	uxtb	r2, r2
 8001c6e:	f042 0220 	orr.w	r2, r2, #32
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	f002 021f 	and.w	r2, r2, #31
 8001c78:	2101      	movs	r1, #1
 8001c7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c7e:	4013      	ands	r3, r2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d007      	beq.n	8001c94 <HAL_RCC_OscConfig+0x3cc>
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d002      	beq.n	8001c94 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	f000 bd1b 	b.w	80026ca <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c94:	4ba0      	ldr	r3, [pc, #640]	; (8001f18 <HAL_RCC_OscConfig+0x650>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c9c:	1d3b      	adds	r3, r7, #4
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	21f8      	movs	r1, #248	; 0xf8
 8001ca4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001cac:	fa91 f1a1 	rbit	r1, r1
 8001cb0:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001cb4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001cb8:	fab1 f181 	clz	r1, r1
 8001cbc:	b2c9      	uxtb	r1, r1
 8001cbe:	408b      	lsls	r3, r1
 8001cc0:	4995      	ldr	r1, [pc, #596]	; (8001f18 <HAL_RCC_OscConfig+0x650>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc6:	e0f5      	b.n	8001eb4 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f000 8085 	beq.w	8001dde <HAL_RCC_OscConfig+0x516>
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cda:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001cde:	fa93 f3a3 	rbit	r3, r3
 8001ce2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001ce6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cea:	fab3 f383 	clz	r3, r3
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cf4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d00:	f7ff fa88 	bl	8001214 <HAL_GetTick>
 8001d04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d08:	e00a      	b.n	8001d20 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d0a:	f7ff fa83 	bl	8001214 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d902      	bls.n	8001d20 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	f000 bcd5 	b.w	80026ca <HAL_RCC_OscConfig+0xe02>
 8001d20:	2302      	movs	r3, #2
 8001d22:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d26:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001d2a:	fa93 f3a3 	rbit	r3, r3
 8001d2e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001d32:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d36:	fab3 f383 	clz	r3, r3
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	095b      	lsrs	r3, r3, #5
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d102      	bne.n	8001d50 <HAL_RCC_OscConfig+0x488>
 8001d4a:	4b73      	ldr	r3, [pc, #460]	; (8001f18 <HAL_RCC_OscConfig+0x650>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	e013      	b.n	8001d78 <HAL_RCC_OscConfig+0x4b0>
 8001d50:	2302      	movs	r3, #2
 8001d52:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d56:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001d5a:	fa93 f3a3 	rbit	r3, r3
 8001d5e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001d62:	2302      	movs	r3, #2
 8001d64:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001d68:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001d6c:	fa93 f3a3 	rbit	r3, r3
 8001d70:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001d74:	4b68      	ldr	r3, [pc, #416]	; (8001f18 <HAL_RCC_OscConfig+0x650>)
 8001d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d78:	2202      	movs	r2, #2
 8001d7a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001d7e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001d82:	fa92 f2a2 	rbit	r2, r2
 8001d86:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001d8a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001d8e:	fab2 f282 	clz	r2, r2
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	f042 0220 	orr.w	r2, r2, #32
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	f002 021f 	and.w	r2, r2, #31
 8001d9e:	2101      	movs	r1, #1
 8001da0:	fa01 f202 	lsl.w	r2, r1, r2
 8001da4:	4013      	ands	r3, r2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0af      	beq.n	8001d0a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001daa:	4b5b      	ldr	r3, [pc, #364]	; (8001f18 <HAL_RCC_OscConfig+0x650>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001db2:	1d3b      	adds	r3, r7, #4
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	21f8      	movs	r1, #248	; 0xf8
 8001dba:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbe:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001dc2:	fa91 f1a1 	rbit	r1, r1
 8001dc6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001dca:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001dce:	fab1 f181 	clz	r1, r1
 8001dd2:	b2c9      	uxtb	r1, r1
 8001dd4:	408b      	lsls	r3, r1
 8001dd6:	4950      	ldr	r1, [pc, #320]	; (8001f18 <HAL_RCC_OscConfig+0x650>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	600b      	str	r3, [r1, #0]
 8001ddc:	e06a      	b.n	8001eb4 <HAL_RCC_OscConfig+0x5ec>
 8001dde:	2301      	movs	r3, #1
 8001de0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001de8:	fa93 f3a3 	rbit	r3, r3
 8001dec:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001df0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001df4:	fab3 f383 	clz	r3, r3
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001dfe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	461a      	mov	r2, r3
 8001e06:	2300      	movs	r3, #0
 8001e08:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0a:	f7ff fa03 	bl	8001214 <HAL_GetTick>
 8001e0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e12:	e00a      	b.n	8001e2a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e14:	f7ff f9fe 	bl	8001214 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d902      	bls.n	8001e2a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	f000 bc50 	b.w	80026ca <HAL_RCC_OscConfig+0xe02>
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e30:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001e34:	fa93 f3a3 	rbit	r3, r3
 8001e38:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001e3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e40:	fab3 f383 	clz	r3, r3
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	095b      	lsrs	r3, r3, #5
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d102      	bne.n	8001e5a <HAL_RCC_OscConfig+0x592>
 8001e54:	4b30      	ldr	r3, [pc, #192]	; (8001f18 <HAL_RCC_OscConfig+0x650>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	e013      	b.n	8001e82 <HAL_RCC_OscConfig+0x5ba>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001e64:	fa93 f3a3 	rbit	r3, r3
 8001e68:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001e72:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001e76:	fa93 f3a3 	rbit	r3, r3
 8001e7a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001e7e:	4b26      	ldr	r3, [pc, #152]	; (8001f18 <HAL_RCC_OscConfig+0x650>)
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e82:	2202      	movs	r2, #2
 8001e84:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001e88:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001e8c:	fa92 f2a2 	rbit	r2, r2
 8001e90:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001e94:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001e98:	fab2 f282 	clz	r2, r2
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	f042 0220 	orr.w	r2, r2, #32
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	f002 021f 	and.w	r2, r2, #31
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	fa01 f202 	lsl.w	r2, r1, r2
 8001eae:	4013      	ands	r3, r2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1af      	bne.n	8001e14 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eb4:	1d3b      	adds	r3, r7, #4
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 80da 	beq.w	8002078 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ec4:	1d3b      	adds	r3, r7, #4
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d069      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x6da>
 8001ece:	2301      	movs	r3, #1
 8001ed0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001ed8:	fa93 f3a3 	rbit	r3, r3
 8001edc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001ee0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ee4:	fab3 f383 	clz	r3, r3
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	461a      	mov	r2, r3
 8001eec:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <HAL_RCC_OscConfig+0x654>)
 8001eee:	4413      	add	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef8:	f7ff f98c 	bl	8001214 <HAL_GetTick>
 8001efc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f00:	e00e      	b.n	8001f20 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f02:	f7ff f987 	bl	8001214 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d906      	bls.n	8001f20 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e3d9      	b.n	80026ca <HAL_RCC_OscConfig+0xe02>
 8001f16:	bf00      	nop
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	10908120 	.word	0x10908120
 8001f20:	2302      	movs	r3, #2
 8001f22:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f26:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001f2a:	fa93 f3a3 	rbit	r3, r3
 8001f2e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001f32:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001f36:	2202      	movs	r2, #2
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	fa93 f2a3 	rbit	r2, r3
 8001f44:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001f4e:	2202      	movs	r2, #2
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	fa93 f2a3 	rbit	r2, r3
 8001f5c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001f60:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f62:	4ba5      	ldr	r3, [pc, #660]	; (80021f8 <HAL_RCC_OscConfig+0x930>)
 8001f64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f66:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001f6a:	2102      	movs	r1, #2
 8001f6c:	6019      	str	r1, [r3, #0]
 8001f6e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	fa93 f1a3 	rbit	r1, r3
 8001f78:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001f7c:	6019      	str	r1, [r3, #0]
  return result;
 8001f7e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	fab3 f383 	clz	r3, r3
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	f003 031f 	and.w	r3, r3, #31
 8001f94:	2101      	movs	r1, #1
 8001f96:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0b0      	beq.n	8001f02 <HAL_RCC_OscConfig+0x63a>
 8001fa0:	e06a      	b.n	8002078 <HAL_RCC_OscConfig+0x7b0>
 8001fa2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001faa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	fa93 f2a3 	rbit	r2, r3
 8001fb4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001fb8:	601a      	str	r2, [r3, #0]
  return result;
 8001fba:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001fbe:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fc0:	fab3 f383 	clz	r3, r3
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	4b8c      	ldr	r3, [pc, #560]	; (80021fc <HAL_RCC_OscConfig+0x934>)
 8001fca:	4413      	add	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	461a      	mov	r2, r3
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd4:	f7ff f91e 	bl	8001214 <HAL_GetTick>
 8001fd8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fdc:	e009      	b.n	8001ff2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fde:	f7ff f919 	bl	8001214 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e36b      	b.n	80026ca <HAL_RCC_OscConfig+0xe02>
 8001ff2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	fa93 f2a3 	rbit	r2, r3
 8002004:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800200e:	2202      	movs	r2, #2
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	fa93 f2a3 	rbit	r2, r3
 800201c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002026:	2202      	movs	r2, #2
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	fa93 f2a3 	rbit	r2, r3
 8002034:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002038:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800203a:	4b6f      	ldr	r3, [pc, #444]	; (80021f8 <HAL_RCC_OscConfig+0x930>)
 800203c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800203e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002042:	2102      	movs	r1, #2
 8002044:	6019      	str	r1, [r3, #0]
 8002046:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	fa93 f1a3 	rbit	r1, r3
 8002050:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002054:	6019      	str	r1, [r3, #0]
  return result;
 8002056:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	fab3 f383 	clz	r3, r3
 8002060:	b2db      	uxtb	r3, r3
 8002062:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002066:	b2db      	uxtb	r3, r3
 8002068:	f003 031f 	and.w	r3, r3, #31
 800206c:	2101      	movs	r1, #1
 800206e:	fa01 f303 	lsl.w	r3, r1, r3
 8002072:	4013      	ands	r3, r2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1b2      	bne.n	8001fde <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002078:	1d3b      	adds	r3, r7, #4
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 8158 	beq.w	8002338 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002088:	2300      	movs	r3, #0
 800208a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800208e:	4b5a      	ldr	r3, [pc, #360]	; (80021f8 <HAL_RCC_OscConfig+0x930>)
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d112      	bne.n	80020c0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800209a:	4b57      	ldr	r3, [pc, #348]	; (80021f8 <HAL_RCC_OscConfig+0x930>)
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	4a56      	ldr	r2, [pc, #344]	; (80021f8 <HAL_RCC_OscConfig+0x930>)
 80020a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a4:	61d3      	str	r3, [r2, #28]
 80020a6:	4b54      	ldr	r3, [pc, #336]	; (80021f8 <HAL_RCC_OscConfig+0x930>)
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80020ae:	f107 0308 	add.w	r3, r7, #8
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	f107 0308 	add.w	r3, r7, #8
 80020b8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80020ba:	2301      	movs	r3, #1
 80020bc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c0:	4b4f      	ldr	r3, [pc, #316]	; (8002200 <HAL_RCC_OscConfig+0x938>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d11a      	bne.n	8002102 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020cc:	4b4c      	ldr	r3, [pc, #304]	; (8002200 <HAL_RCC_OscConfig+0x938>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a4b      	ldr	r2, [pc, #300]	; (8002200 <HAL_RCC_OscConfig+0x938>)
 80020d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020d8:	f7ff f89c 	bl	8001214 <HAL_GetTick>
 80020dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e0:	e009      	b.n	80020f6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e2:	f7ff f897 	bl	8001214 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b64      	cmp	r3, #100	; 0x64
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e2e9      	b.n	80026ca <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f6:	4b42      	ldr	r3, [pc, #264]	; (8002200 <HAL_RCC_OscConfig+0x938>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0ef      	beq.n	80020e2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002102:	1d3b      	adds	r3, r7, #4
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d106      	bne.n	800211a <HAL_RCC_OscConfig+0x852>
 800210c:	4b3a      	ldr	r3, [pc, #232]	; (80021f8 <HAL_RCC_OscConfig+0x930>)
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	4a39      	ldr	r2, [pc, #228]	; (80021f8 <HAL_RCC_OscConfig+0x930>)
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	6213      	str	r3, [r2, #32]
 8002118:	e02f      	b.n	800217a <HAL_RCC_OscConfig+0x8b2>
 800211a:	1d3b      	adds	r3, r7, #4
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10c      	bne.n	800213e <HAL_RCC_OscConfig+0x876>
 8002124:	4b34      	ldr	r3, [pc, #208]	; (80021f8 <HAL_RCC_OscConfig+0x930>)
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	4a33      	ldr	r2, [pc, #204]	; (80021f8 <HAL_RCC_OscConfig+0x930>)
 800212a:	f023 0301 	bic.w	r3, r3, #1
 800212e:	6213      	str	r3, [r2, #32]
 8002130:	4b31      	ldr	r3, [pc, #196]	; (80021f8 <HAL_RCC_OscConfig+0x930>)
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	4a30      	ldr	r2, [pc, #192]	; (80021f8 <HAL_RCC_OscConfig+0x930>)
 8002136:	f023 0304 	bic.w	r3, r3, #4
 800213a:	6213      	str	r3, [r2, #32]
 800213c:	e01d      	b.n	800217a <HAL_RCC_OscConfig+0x8b2>
 800213e:	1d3b      	adds	r3, r7, #4
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	2b05      	cmp	r3, #5
 8002146:	d10c      	bne.n	8002162 <HAL_RCC_OscConfig+0x89a>
 8002148:	4b2b      	ldr	r3, [pc, #172]	; (80021f8 <HAL_RCC_OscConfig+0x930>)
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	4a2a      	ldr	r2, [pc, #168]	; (80021f8 <HAL_RCC_OscConfig+0x930>)
 800214e:	f043 0304 	orr.w	r3, r3, #4
 8002152:	6213      	str	r3, [r2, #32]
 8002154:	4b28      	ldr	r3, [pc, #160]	; (80021f8 <HAL_RCC_OscConfig+0x930>)
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	4a27      	ldr	r2, [pc, #156]	; (80021f8 <HAL_RCC_OscConfig+0x930>)
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	6213      	str	r3, [r2, #32]
 8002160:	e00b      	b.n	800217a <HAL_RCC_OscConfig+0x8b2>
 8002162:	4b25      	ldr	r3, [pc, #148]	; (80021f8 <HAL_RCC_OscConfig+0x930>)
 8002164:	6a1b      	ldr	r3, [r3, #32]
 8002166:	4a24      	ldr	r2, [pc, #144]	; (80021f8 <HAL_RCC_OscConfig+0x930>)
 8002168:	f023 0301 	bic.w	r3, r3, #1
 800216c:	6213      	str	r3, [r2, #32]
 800216e:	4b22      	ldr	r3, [pc, #136]	; (80021f8 <HAL_RCC_OscConfig+0x930>)
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	4a21      	ldr	r2, [pc, #132]	; (80021f8 <HAL_RCC_OscConfig+0x930>)
 8002174:	f023 0304 	bic.w	r3, r3, #4
 8002178:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800217a:	1d3b      	adds	r3, r7, #4
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d06b      	beq.n	800225c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002184:	f7ff f846 	bl	8001214 <HAL_GetTick>
 8002188:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800218c:	e00b      	b.n	80021a6 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800218e:	f7ff f841 	bl	8001214 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	f241 3288 	movw	r2, #5000	; 0x1388
 800219e:	4293      	cmp	r3, r2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e291      	b.n	80026ca <HAL_RCC_OscConfig+0xe02>
 80021a6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80021aa:	2202      	movs	r2, #2
 80021ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ae:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	fa93 f2a3 	rbit	r2, r3
 80021b8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80021c2:	2202      	movs	r2, #2
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	fa93 f2a3 	rbit	r2, r3
 80021d0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80021d4:	601a      	str	r2, [r3, #0]
  return result;
 80021d6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80021da:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021dc:	fab3 f383 	clz	r3, r3
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	095b      	lsrs	r3, r3, #5
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	f043 0302 	orr.w	r3, r3, #2
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d109      	bne.n	8002204 <HAL_RCC_OscConfig+0x93c>
 80021f0:	4b01      	ldr	r3, [pc, #4]	; (80021f8 <HAL_RCC_OscConfig+0x930>)
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	e014      	b.n	8002220 <HAL_RCC_OscConfig+0x958>
 80021f6:	bf00      	nop
 80021f8:	40021000 	.word	0x40021000
 80021fc:	10908120 	.word	0x10908120
 8002200:	40007000 	.word	0x40007000
 8002204:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002208:	2202      	movs	r2, #2
 800220a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	fa93 f2a3 	rbit	r2, r3
 8002216:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	4bbb      	ldr	r3, [pc, #748]	; (800250c <HAL_RCC_OscConfig+0xc44>)
 800221e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002220:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002224:	2102      	movs	r1, #2
 8002226:	6011      	str	r1, [r2, #0]
 8002228:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800222c:	6812      	ldr	r2, [r2, #0]
 800222e:	fa92 f1a2 	rbit	r1, r2
 8002232:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002236:	6011      	str	r1, [r2, #0]
  return result;
 8002238:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800223c:	6812      	ldr	r2, [r2, #0]
 800223e:	fab2 f282 	clz	r2, r2
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	f002 021f 	and.w	r2, r2, #31
 800224e:	2101      	movs	r1, #1
 8002250:	fa01 f202 	lsl.w	r2, r1, r2
 8002254:	4013      	ands	r3, r2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d099      	beq.n	800218e <HAL_RCC_OscConfig+0x8c6>
 800225a:	e063      	b.n	8002324 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225c:	f7fe ffda 	bl	8001214 <HAL_GetTick>
 8002260:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002264:	e00b      	b.n	800227e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002266:	f7fe ffd5 	bl	8001214 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	f241 3288 	movw	r2, #5000	; 0x1388
 8002276:	4293      	cmp	r3, r2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e225      	b.n	80026ca <HAL_RCC_OscConfig+0xe02>
 800227e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002282:	2202      	movs	r2, #2
 8002284:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002286:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	fa93 f2a3 	rbit	r2, r3
 8002290:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800229a:	2202      	movs	r2, #2
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	fa93 f2a3 	rbit	r2, r3
 80022a8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80022ac:	601a      	str	r2, [r3, #0]
  return result;
 80022ae:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80022b2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b4:	fab3 f383 	clz	r3, r3
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	095b      	lsrs	r3, r3, #5
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	f043 0302 	orr.w	r3, r3, #2
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d102      	bne.n	80022ce <HAL_RCC_OscConfig+0xa06>
 80022c8:	4b90      	ldr	r3, [pc, #576]	; (800250c <HAL_RCC_OscConfig+0xc44>)
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	e00d      	b.n	80022ea <HAL_RCC_OscConfig+0xa22>
 80022ce:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80022d2:	2202      	movs	r2, #2
 80022d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	fa93 f2a3 	rbit	r2, r3
 80022e0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	4b89      	ldr	r3, [pc, #548]	; (800250c <HAL_RCC_OscConfig+0xc44>)
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80022ee:	2102      	movs	r1, #2
 80022f0:	6011      	str	r1, [r2, #0]
 80022f2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80022f6:	6812      	ldr	r2, [r2, #0]
 80022f8:	fa92 f1a2 	rbit	r1, r2
 80022fc:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002300:	6011      	str	r1, [r2, #0]
  return result;
 8002302:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002306:	6812      	ldr	r2, [r2, #0]
 8002308:	fab2 f282 	clz	r2, r2
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	f002 021f 	and.w	r2, r2, #31
 8002318:	2101      	movs	r1, #1
 800231a:	fa01 f202 	lsl.w	r2, r1, r2
 800231e:	4013      	ands	r3, r2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1a0      	bne.n	8002266 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002324:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002328:	2b01      	cmp	r3, #1
 800232a:	d105      	bne.n	8002338 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800232c:	4b77      	ldr	r3, [pc, #476]	; (800250c <HAL_RCC_OscConfig+0xc44>)
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	4a76      	ldr	r2, [pc, #472]	; (800250c <HAL_RCC_OscConfig+0xc44>)
 8002332:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002336:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002338:	1d3b      	adds	r3, r7, #4
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	2b00      	cmp	r3, #0
 8002340:	f000 81c2 	beq.w	80026c8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002344:	4b71      	ldr	r3, [pc, #452]	; (800250c <HAL_RCC_OscConfig+0xc44>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 030c 	and.w	r3, r3, #12
 800234c:	2b08      	cmp	r3, #8
 800234e:	f000 819c 	beq.w	800268a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002352:	1d3b      	adds	r3, r7, #4
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	2b02      	cmp	r3, #2
 800235a:	f040 8114 	bne.w	8002586 <HAL_RCC_OscConfig+0xcbe>
 800235e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002362:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002366:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002368:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	fa93 f2a3 	rbit	r2, r3
 8002372:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002376:	601a      	str	r2, [r3, #0]
  return result;
 8002378:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800237c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800237e:	fab3 f383 	clz	r3, r3
 8002382:	b2db      	uxtb	r3, r3
 8002384:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002388:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	461a      	mov	r2, r3
 8002390:	2300      	movs	r3, #0
 8002392:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002394:	f7fe ff3e 	bl	8001214 <HAL_GetTick>
 8002398:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800239c:	e009      	b.n	80023b2 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800239e:	f7fe ff39 	bl	8001214 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e18b      	b.n	80026ca <HAL_RCC_OscConfig+0xe02>
 80023b2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80023b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023bc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	fa93 f2a3 	rbit	r2, r3
 80023c6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80023ca:	601a      	str	r2, [r3, #0]
  return result;
 80023cc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80023d0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d2:	fab3 f383 	clz	r3, r3
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	095b      	lsrs	r3, r3, #5
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d102      	bne.n	80023ec <HAL_RCC_OscConfig+0xb24>
 80023e6:	4b49      	ldr	r3, [pc, #292]	; (800250c <HAL_RCC_OscConfig+0xc44>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	e01b      	b.n	8002424 <HAL_RCC_OscConfig+0xb5c>
 80023ec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80023f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	fa93 f2a3 	rbit	r2, r3
 8002400:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800240a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	fa93 f2a3 	rbit	r2, r3
 800241a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	4b3a      	ldr	r3, [pc, #232]	; (800250c <HAL_RCC_OscConfig+0xc44>)
 8002422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002424:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002428:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800242c:	6011      	str	r1, [r2, #0]
 800242e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002432:	6812      	ldr	r2, [r2, #0]
 8002434:	fa92 f1a2 	rbit	r1, r2
 8002438:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800243c:	6011      	str	r1, [r2, #0]
  return result;
 800243e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002442:	6812      	ldr	r2, [r2, #0]
 8002444:	fab2 f282 	clz	r2, r2
 8002448:	b2d2      	uxtb	r2, r2
 800244a:	f042 0220 	orr.w	r2, r2, #32
 800244e:	b2d2      	uxtb	r2, r2
 8002450:	f002 021f 	and.w	r2, r2, #31
 8002454:	2101      	movs	r1, #1
 8002456:	fa01 f202 	lsl.w	r2, r1, r2
 800245a:	4013      	ands	r3, r2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d19e      	bne.n	800239e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002460:	4b2a      	ldr	r3, [pc, #168]	; (800250c <HAL_RCC_OscConfig+0xc44>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002468:	1d3b      	adds	r3, r7, #4
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800246e:	1d3b      	adds	r3, r7, #4
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	430b      	orrs	r3, r1
 8002476:	4925      	ldr	r1, [pc, #148]	; (800250c <HAL_RCC_OscConfig+0xc44>)
 8002478:	4313      	orrs	r3, r2
 800247a:	604b      	str	r3, [r1, #4]
 800247c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002480:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002484:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002486:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	fa93 f2a3 	rbit	r2, r3
 8002490:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002494:	601a      	str	r2, [r3, #0]
  return result;
 8002496:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800249a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800249c:	fab3 f383 	clz	r3, r3
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024a6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	461a      	mov	r2, r3
 80024ae:	2301      	movs	r3, #1
 80024b0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b2:	f7fe feaf 	bl	8001214 <HAL_GetTick>
 80024b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024ba:	e009      	b.n	80024d0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024bc:	f7fe feaa 	bl	8001214 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e0fc      	b.n	80026ca <HAL_RCC_OscConfig+0xe02>
 80024d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80024d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	fa93 f2a3 	rbit	r2, r3
 80024e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80024e8:	601a      	str	r2, [r3, #0]
  return result;
 80024ea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80024ee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024f0:	fab3 f383 	clz	r3, r3
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	095b      	lsrs	r3, r3, #5
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b01      	cmp	r3, #1
 8002502:	d105      	bne.n	8002510 <HAL_RCC_OscConfig+0xc48>
 8002504:	4b01      	ldr	r3, [pc, #4]	; (800250c <HAL_RCC_OscConfig+0xc44>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	e01e      	b.n	8002548 <HAL_RCC_OscConfig+0xc80>
 800250a:	bf00      	nop
 800250c:	40021000 	.word	0x40021000
 8002510:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002514:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002518:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	fa93 f2a3 	rbit	r2, r3
 8002524:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800252e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	fa93 f2a3 	rbit	r2, r3
 800253e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	4b63      	ldr	r3, [pc, #396]	; (80026d4 <HAL_RCC_OscConfig+0xe0c>)
 8002546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002548:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800254c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002550:	6011      	str	r1, [r2, #0]
 8002552:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	fa92 f1a2 	rbit	r1, r2
 800255c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002560:	6011      	str	r1, [r2, #0]
  return result;
 8002562:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002566:	6812      	ldr	r2, [r2, #0]
 8002568:	fab2 f282 	clz	r2, r2
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	f042 0220 	orr.w	r2, r2, #32
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	f002 021f 	and.w	r2, r2, #31
 8002578:	2101      	movs	r1, #1
 800257a:	fa01 f202 	lsl.w	r2, r1, r2
 800257e:	4013      	ands	r3, r2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d09b      	beq.n	80024bc <HAL_RCC_OscConfig+0xbf4>
 8002584:	e0a0      	b.n	80026c8 <HAL_RCC_OscConfig+0xe00>
 8002586:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800258a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800258e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002590:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	fa93 f2a3 	rbit	r2, r3
 800259a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800259e:	601a      	str	r2, [r3, #0]
  return result;
 80025a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025a4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a6:	fab3 f383 	clz	r3, r3
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	461a      	mov	r2, r3
 80025b8:	2300      	movs	r3, #0
 80025ba:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025bc:	f7fe fe2a 	bl	8001214 <HAL_GetTick>
 80025c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c4:	e009      	b.n	80025da <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025c6:	f7fe fe25 	bl	8001214 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e077      	b.n	80026ca <HAL_RCC_OscConfig+0xe02>
 80025da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	fa93 f2a3 	rbit	r2, r3
 80025ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025f2:	601a      	str	r2, [r3, #0]
  return result;
 80025f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025f8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025fa:	fab3 f383 	clz	r3, r3
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	095b      	lsrs	r3, r3, #5
 8002602:	b2db      	uxtb	r3, r3
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b01      	cmp	r3, #1
 800260c:	d102      	bne.n	8002614 <HAL_RCC_OscConfig+0xd4c>
 800260e:	4b31      	ldr	r3, [pc, #196]	; (80026d4 <HAL_RCC_OscConfig+0xe0c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	e01b      	b.n	800264c <HAL_RCC_OscConfig+0xd84>
 8002614:	f107 0320 	add.w	r3, r7, #32
 8002618:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800261c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261e:	f107 0320 	add.w	r3, r7, #32
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	fa93 f2a3 	rbit	r2, r3
 8002628:	f107 031c 	add.w	r3, r7, #28
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	f107 0318 	add.w	r3, r7, #24
 8002632:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	f107 0318 	add.w	r3, r7, #24
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	fa93 f2a3 	rbit	r2, r3
 8002642:	f107 0314 	add.w	r3, r7, #20
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	4b22      	ldr	r3, [pc, #136]	; (80026d4 <HAL_RCC_OscConfig+0xe0c>)
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	f107 0210 	add.w	r2, r7, #16
 8002650:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002654:	6011      	str	r1, [r2, #0]
 8002656:	f107 0210 	add.w	r2, r7, #16
 800265a:	6812      	ldr	r2, [r2, #0]
 800265c:	fa92 f1a2 	rbit	r1, r2
 8002660:	f107 020c 	add.w	r2, r7, #12
 8002664:	6011      	str	r1, [r2, #0]
  return result;
 8002666:	f107 020c 	add.w	r2, r7, #12
 800266a:	6812      	ldr	r2, [r2, #0]
 800266c:	fab2 f282 	clz	r2, r2
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	f042 0220 	orr.w	r2, r2, #32
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	f002 021f 	and.w	r2, r2, #31
 800267c:	2101      	movs	r1, #1
 800267e:	fa01 f202 	lsl.w	r2, r1, r2
 8002682:	4013      	ands	r3, r2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d19e      	bne.n	80025c6 <HAL_RCC_OscConfig+0xcfe>
 8002688:	e01e      	b.n	80026c8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800268a:	1d3b      	adds	r3, r7, #4
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	69db      	ldr	r3, [r3, #28]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d101      	bne.n	8002698 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e018      	b.n	80026ca <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002698:	4b0e      	ldr	r3, [pc, #56]	; (80026d4 <HAL_RCC_OscConfig+0xe0c>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80026a0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80026a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026a8:	1d3b      	adds	r3, r7, #4
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d108      	bne.n	80026c4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80026b2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80026b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026ba:	1d3b      	adds	r3, r7, #4
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d001      	beq.n	80026c8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e000      	b.n	80026ca <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40021000 	.word	0x40021000

080026d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b09e      	sub	sp, #120	; 0x78
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e162      	b.n	80029b6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026f0:	4b90      	ldr	r3, [pc, #576]	; (8002934 <HAL_RCC_ClockConfig+0x25c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0307 	and.w	r3, r3, #7
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d910      	bls.n	8002720 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fe:	4b8d      	ldr	r3, [pc, #564]	; (8002934 <HAL_RCC_ClockConfig+0x25c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f023 0207 	bic.w	r2, r3, #7
 8002706:	498b      	ldr	r1, [pc, #556]	; (8002934 <HAL_RCC_ClockConfig+0x25c>)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	4313      	orrs	r3, r2
 800270c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800270e:	4b89      	ldr	r3, [pc, #548]	; (8002934 <HAL_RCC_ClockConfig+0x25c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	429a      	cmp	r2, r3
 800271a:	d001      	beq.n	8002720 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e14a      	b.n	80029b6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d008      	beq.n	800273e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800272c:	4b82      	ldr	r3, [pc, #520]	; (8002938 <HAL_RCC_ClockConfig+0x260>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	497f      	ldr	r1, [pc, #508]	; (8002938 <HAL_RCC_ClockConfig+0x260>)
 800273a:	4313      	orrs	r3, r2
 800273c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 80dc 	beq.w	8002904 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d13c      	bne.n	80027ce <HAL_RCC_ClockConfig+0xf6>
 8002754:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002758:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800275c:	fa93 f3a3 	rbit	r3, r3
 8002760:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002764:	fab3 f383 	clz	r3, r3
 8002768:	b2db      	uxtb	r3, r3
 800276a:	095b      	lsrs	r3, r3, #5
 800276c:	b2db      	uxtb	r3, r3
 800276e:	f043 0301 	orr.w	r3, r3, #1
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b01      	cmp	r3, #1
 8002776:	d102      	bne.n	800277e <HAL_RCC_ClockConfig+0xa6>
 8002778:	4b6f      	ldr	r3, [pc, #444]	; (8002938 <HAL_RCC_ClockConfig+0x260>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	e00f      	b.n	800279e <HAL_RCC_ClockConfig+0xc6>
 800277e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002782:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002784:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002786:	fa93 f3a3 	rbit	r3, r3
 800278a:	667b      	str	r3, [r7, #100]	; 0x64
 800278c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002790:	663b      	str	r3, [r7, #96]	; 0x60
 8002792:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002794:	fa93 f3a3 	rbit	r3, r3
 8002798:	65fb      	str	r3, [r7, #92]	; 0x5c
 800279a:	4b67      	ldr	r3, [pc, #412]	; (8002938 <HAL_RCC_ClockConfig+0x260>)
 800279c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027a2:	65ba      	str	r2, [r7, #88]	; 0x58
 80027a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027a6:	fa92 f2a2 	rbit	r2, r2
 80027aa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80027ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80027ae:	fab2 f282 	clz	r2, r2
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	f042 0220 	orr.w	r2, r2, #32
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	f002 021f 	and.w	r2, r2, #31
 80027be:	2101      	movs	r1, #1
 80027c0:	fa01 f202 	lsl.w	r2, r1, r2
 80027c4:	4013      	ands	r3, r2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d17b      	bne.n	80028c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e0f3      	b.n	80029b6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d13c      	bne.n	8002850 <HAL_RCC_ClockConfig+0x178>
 80027d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027da:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027de:	fa93 f3a3 	rbit	r3, r3
 80027e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80027e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027e6:	fab3 f383 	clz	r3, r3
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	095b      	lsrs	r3, r3, #5
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d102      	bne.n	8002800 <HAL_RCC_ClockConfig+0x128>
 80027fa:	4b4f      	ldr	r3, [pc, #316]	; (8002938 <HAL_RCC_ClockConfig+0x260>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	e00f      	b.n	8002820 <HAL_RCC_ClockConfig+0x148>
 8002800:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002804:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002808:	fa93 f3a3 	rbit	r3, r3
 800280c:	647b      	str	r3, [r7, #68]	; 0x44
 800280e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002812:	643b      	str	r3, [r7, #64]	; 0x40
 8002814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002816:	fa93 f3a3 	rbit	r3, r3
 800281a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800281c:	4b46      	ldr	r3, [pc, #280]	; (8002938 <HAL_RCC_ClockConfig+0x260>)
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002824:	63ba      	str	r2, [r7, #56]	; 0x38
 8002826:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002828:	fa92 f2a2 	rbit	r2, r2
 800282c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800282e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002830:	fab2 f282 	clz	r2, r2
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	f042 0220 	orr.w	r2, r2, #32
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	f002 021f 	and.w	r2, r2, #31
 8002840:	2101      	movs	r1, #1
 8002842:	fa01 f202 	lsl.w	r2, r1, r2
 8002846:	4013      	ands	r3, r2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d13a      	bne.n	80028c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e0b2      	b.n	80029b6 <HAL_RCC_ClockConfig+0x2de>
 8002850:	2302      	movs	r3, #2
 8002852:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002856:	fa93 f3a3 	rbit	r3, r3
 800285a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800285c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800285e:	fab3 f383 	clz	r3, r3
 8002862:	b2db      	uxtb	r3, r3
 8002864:	095b      	lsrs	r3, r3, #5
 8002866:	b2db      	uxtb	r3, r3
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b01      	cmp	r3, #1
 8002870:	d102      	bne.n	8002878 <HAL_RCC_ClockConfig+0x1a0>
 8002872:	4b31      	ldr	r3, [pc, #196]	; (8002938 <HAL_RCC_ClockConfig+0x260>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	e00d      	b.n	8002894 <HAL_RCC_ClockConfig+0x1bc>
 8002878:	2302      	movs	r3, #2
 800287a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287e:	fa93 f3a3 	rbit	r3, r3
 8002882:	627b      	str	r3, [r7, #36]	; 0x24
 8002884:	2302      	movs	r3, #2
 8002886:	623b      	str	r3, [r7, #32]
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	fa93 f3a3 	rbit	r3, r3
 800288e:	61fb      	str	r3, [r7, #28]
 8002890:	4b29      	ldr	r3, [pc, #164]	; (8002938 <HAL_RCC_ClockConfig+0x260>)
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	2202      	movs	r2, #2
 8002896:	61ba      	str	r2, [r7, #24]
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	fa92 f2a2 	rbit	r2, r2
 800289e:	617a      	str	r2, [r7, #20]
  return result;
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	fab2 f282 	clz	r2, r2
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	f042 0220 	orr.w	r2, r2, #32
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	f002 021f 	and.w	r2, r2, #31
 80028b2:	2101      	movs	r1, #1
 80028b4:	fa01 f202 	lsl.w	r2, r1, r2
 80028b8:	4013      	ands	r3, r2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e079      	b.n	80029b6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028c2:	4b1d      	ldr	r3, [pc, #116]	; (8002938 <HAL_RCC_ClockConfig+0x260>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f023 0203 	bic.w	r2, r3, #3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	491a      	ldr	r1, [pc, #104]	; (8002938 <HAL_RCC_ClockConfig+0x260>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028d4:	f7fe fc9e 	bl	8001214 <HAL_GetTick>
 80028d8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028da:	e00a      	b.n	80028f2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028dc:	f7fe fc9a 	bl	8001214 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e061      	b.n	80029b6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f2:	4b11      	ldr	r3, [pc, #68]	; (8002938 <HAL_RCC_ClockConfig+0x260>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f003 020c 	and.w	r2, r3, #12
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	429a      	cmp	r2, r3
 8002902:	d1eb      	bne.n	80028dc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002904:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <HAL_RCC_ClockConfig+0x25c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	429a      	cmp	r2, r3
 8002910:	d214      	bcs.n	800293c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002912:	4b08      	ldr	r3, [pc, #32]	; (8002934 <HAL_RCC_ClockConfig+0x25c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f023 0207 	bic.w	r2, r3, #7
 800291a:	4906      	ldr	r1, [pc, #24]	; (8002934 <HAL_RCC_ClockConfig+0x25c>)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	4313      	orrs	r3, r2
 8002920:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002922:	4b04      	ldr	r3, [pc, #16]	; (8002934 <HAL_RCC_ClockConfig+0x25c>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d005      	beq.n	800293c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e040      	b.n	80029b6 <HAL_RCC_ClockConfig+0x2de>
 8002934:	40022000 	.word	0x40022000
 8002938:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	2b00      	cmp	r3, #0
 8002946:	d008      	beq.n	800295a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002948:	4b1d      	ldr	r3, [pc, #116]	; (80029c0 <HAL_RCC_ClockConfig+0x2e8>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	491a      	ldr	r1, [pc, #104]	; (80029c0 <HAL_RCC_ClockConfig+0x2e8>)
 8002956:	4313      	orrs	r3, r2
 8002958:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0308 	and.w	r3, r3, #8
 8002962:	2b00      	cmp	r3, #0
 8002964:	d009      	beq.n	800297a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002966:	4b16      	ldr	r3, [pc, #88]	; (80029c0 <HAL_RCC_ClockConfig+0x2e8>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	4912      	ldr	r1, [pc, #72]	; (80029c0 <HAL_RCC_ClockConfig+0x2e8>)
 8002976:	4313      	orrs	r3, r2
 8002978:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800297a:	f000 f829 	bl	80029d0 <HAL_RCC_GetSysClockFreq>
 800297e:	4601      	mov	r1, r0
 8002980:	4b0f      	ldr	r3, [pc, #60]	; (80029c0 <HAL_RCC_ClockConfig+0x2e8>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002988:	22f0      	movs	r2, #240	; 0xf0
 800298a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	fa92 f2a2 	rbit	r2, r2
 8002992:	60fa      	str	r2, [r7, #12]
  return result;
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	fab2 f282 	clz	r2, r2
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	40d3      	lsrs	r3, r2
 800299e:	4a09      	ldr	r2, [pc, #36]	; (80029c4 <HAL_RCC_ClockConfig+0x2ec>)
 80029a0:	5cd3      	ldrb	r3, [r2, r3]
 80029a2:	fa21 f303 	lsr.w	r3, r1, r3
 80029a6:	4a08      	ldr	r2, [pc, #32]	; (80029c8 <HAL_RCC_ClockConfig+0x2f0>)
 80029a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80029aa:	4b08      	ldr	r3, [pc, #32]	; (80029cc <HAL_RCC_ClockConfig+0x2f4>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7fe fbec 	bl	800118c <HAL_InitTick>
  
  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3778      	adds	r7, #120	; 0x78
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40021000 	.word	0x40021000
 80029c4:	08005cc4 	.word	0x08005cc4
 80029c8:	2000000c 	.word	0x2000000c
 80029cc:	20000010 	.word	0x20000010

080029d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b08b      	sub	sp, #44	; 0x2c
 80029d4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	61fb      	str	r3, [r7, #28]
 80029da:	2300      	movs	r3, #0
 80029dc:	61bb      	str	r3, [r7, #24]
 80029de:	2300      	movs	r3, #0
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
 80029e2:	2300      	movs	r3, #0
 80029e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80029ea:	4b29      	ldr	r3, [pc, #164]	; (8002a90 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 030c 	and.w	r3, r3, #12
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	d002      	beq.n	8002a00 <HAL_RCC_GetSysClockFreq+0x30>
 80029fa:	2b08      	cmp	r3, #8
 80029fc:	d003      	beq.n	8002a06 <HAL_RCC_GetSysClockFreq+0x36>
 80029fe:	e03c      	b.n	8002a7a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a00:	4b24      	ldr	r3, [pc, #144]	; (8002a94 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a02:	623b      	str	r3, [r7, #32]
      break;
 8002a04:	e03c      	b.n	8002a80 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002a0c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002a10:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a12:	68ba      	ldr	r2, [r7, #8]
 8002a14:	fa92 f2a2 	rbit	r2, r2
 8002a18:	607a      	str	r2, [r7, #4]
  return result;
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	fab2 f282 	clz	r2, r2
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	40d3      	lsrs	r3, r2
 8002a24:	4a1c      	ldr	r2, [pc, #112]	; (8002a98 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a26:	5cd3      	ldrb	r3, [r2, r3]
 8002a28:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002a2a:	4b19      	ldr	r3, [pc, #100]	; (8002a90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	220f      	movs	r2, #15
 8002a34:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	fa92 f2a2 	rbit	r2, r2
 8002a3c:	60fa      	str	r2, [r7, #12]
  return result;
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	fab2 f282 	clz	r2, r2
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	40d3      	lsrs	r3, r2
 8002a48:	4a14      	ldr	r2, [pc, #80]	; (8002a9c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a4a:	5cd3      	ldrb	r3, [r2, r3]
 8002a4c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d008      	beq.n	8002a6a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a58:	4a0e      	ldr	r2, [pc, #56]	; (8002a94 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	fb02 f303 	mul.w	r3, r2, r3
 8002a66:	627b      	str	r3, [r7, #36]	; 0x24
 8002a68:	e004      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	4a0c      	ldr	r2, [pc, #48]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a6e:	fb02 f303 	mul.w	r3, r2, r3
 8002a72:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	623b      	str	r3, [r7, #32]
      break;
 8002a78:	e002      	b.n	8002a80 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a7a:	4b0a      	ldr	r3, [pc, #40]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a7c:	623b      	str	r3, [r7, #32]
      break;
 8002a7e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a80:	6a3b      	ldr	r3, [r7, #32]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	372c      	adds	r7, #44	; 0x2c
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40021000 	.word	0x40021000
 8002a94:	00f42400 	.word	0x00f42400
 8002a98:	08005cdc 	.word	0x08005cdc
 8002a9c:	08005cec 	.word	0x08005cec
 8002aa0:	003d0900 	.word	0x003d0900
 8002aa4:	007a1200 	.word	0x007a1200

08002aa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aac:	4b03      	ldr	r3, [pc, #12]	; (8002abc <HAL_RCC_GetHCLKFreq+0x14>)
 8002aae:	681b      	ldr	r3, [r3, #0]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	2000000c 	.word	0x2000000c

08002ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002ac6:	f7ff ffef 	bl	8002aa8 <HAL_RCC_GetHCLKFreq>
 8002aca:	4601      	mov	r1, r0
 8002acc:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ad4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ad8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	fa92 f2a2 	rbit	r2, r2
 8002ae0:	603a      	str	r2, [r7, #0]
  return result;
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	fab2 f282 	clz	r2, r2
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	40d3      	lsrs	r3, r2
 8002aec:	4a04      	ldr	r2, [pc, #16]	; (8002b00 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002aee:	5cd3      	ldrb	r3, [r2, r3]
 8002af0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002af4:	4618      	mov	r0, r3
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40021000 	.word	0x40021000
 8002b00:	08005cd4 	.word	0x08005cd4

08002b04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002b0a:	f7ff ffcd 	bl	8002aa8 <HAL_RCC_GetHCLKFreq>
 8002b0e:	4601      	mov	r1, r0
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002b18:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002b1c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	fa92 f2a2 	rbit	r2, r2
 8002b24:	603a      	str	r2, [r7, #0]
  return result;
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	fab2 f282 	clz	r2, r2
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	40d3      	lsrs	r3, r2
 8002b30:	4a04      	ldr	r2, [pc, #16]	; (8002b44 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002b32:	5cd3      	ldrb	r3, [r2, r3]
 8002b34:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40021000 	.word	0x40021000
 8002b44:	08005cd4 	.word	0x08005cd4

08002b48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e09d      	b.n	8002c96 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d108      	bne.n	8002b74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b6a:	d009      	beq.n	8002b80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	61da      	str	r2, [r3, #28]
 8002b72:	e005      	b.n	8002b80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d106      	bne.n	8002ba0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7fe f98e 	bl	8000ebc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bb6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002bc0:	d902      	bls.n	8002bc8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	e002      	b.n	8002bce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002bc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bcc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002bd6:	d007      	beq.n	8002be8 <HAL_SPI_Init+0xa0>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002be0:	d002      	beq.n	8002be8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	431a      	orrs	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c16:	431a      	orrs	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	69db      	ldr	r3, [r3, #28]
 8002c1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c20:	431a      	orrs	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2a:	ea42 0103 	orr.w	r1, r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c32:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	0c1b      	lsrs	r3, r3, #16
 8002c44:	f003 0204 	and.w	r2, r3, #4
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4c:	f003 0310 	and.w	r3, r3, #16
 8002c50:	431a      	orrs	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002c64:	ea42 0103 	orr.w	r1, r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	69da      	ldr	r2, [r3, #28]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b088      	sub	sp, #32
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	60f8      	str	r0, [r7, #12]
 8002ca6:	60b9      	str	r1, [r7, #8]
 8002ca8:	603b      	str	r3, [r7, #0]
 8002caa:	4613      	mov	r3, r2
 8002cac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d101      	bne.n	8002cc0 <HAL_SPI_Transmit+0x22>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e158      	b.n	8002f72 <HAL_SPI_Transmit+0x2d4>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cc8:	f7fe faa4 	bl	8001214 <HAL_GetTick>
 8002ccc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002cce:	88fb      	ldrh	r3, [r7, #6]
 8002cd0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d002      	beq.n	8002ce4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ce2:	e13d      	b.n	8002f60 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <HAL_SPI_Transmit+0x52>
 8002cea:	88fb      	ldrh	r3, [r7, #6]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d102      	bne.n	8002cf6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002cf4:	e134      	b.n	8002f60 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2203      	movs	r2, #3
 8002cfa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	88fa      	ldrh	r2, [r7, #6]
 8002d0e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	88fa      	ldrh	r2, [r7, #6]
 8002d14:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d40:	d10f      	bne.n	8002d62 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d60:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6c:	2b40      	cmp	r3, #64	; 0x40
 8002d6e:	d007      	beq.n	8002d80 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d88:	d94b      	bls.n	8002e22 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d002      	beq.n	8002d98 <HAL_SPI_Transmit+0xfa>
 8002d92:	8afb      	ldrh	r3, [r7, #22]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d13e      	bne.n	8002e16 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9c:	881a      	ldrh	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da8:	1c9a      	adds	r2, r3, #2
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	3b01      	subs	r3, #1
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002dbc:	e02b      	b.n	8002e16 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d112      	bne.n	8002df2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd0:	881a      	ldrh	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ddc:	1c9a      	adds	r2, r3, #2
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	3b01      	subs	r3, #1
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002df0:	e011      	b.n	8002e16 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002df2:	f7fe fa0f 	bl	8001214 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d803      	bhi.n	8002e0a <HAL_SPI_Transmit+0x16c>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e08:	d102      	bne.n	8002e10 <HAL_SPI_Transmit+0x172>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d102      	bne.n	8002e16 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e14:	e0a4      	b.n	8002f60 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1ce      	bne.n	8002dbe <HAL_SPI_Transmit+0x120>
 8002e20:	e07c      	b.n	8002f1c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <HAL_SPI_Transmit+0x192>
 8002e2a:	8afb      	ldrh	r3, [r7, #22]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d170      	bne.n	8002f12 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d912      	bls.n	8002e60 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3e:	881a      	ldrh	r2, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4a:	1c9a      	adds	r2, r3, #2
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	3b02      	subs	r3, #2
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e5e:	e058      	b.n	8002f12 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	330c      	adds	r3, #12
 8002e6a:	7812      	ldrb	r2, [r2, #0]
 8002e6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e72:	1c5a      	adds	r2, r3, #1
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002e86:	e044      	b.n	8002f12 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d12b      	bne.n	8002eee <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d912      	bls.n	8002ec6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea4:	881a      	ldrh	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb0:	1c9a      	adds	r2, r3, #2
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	3b02      	subs	r3, #2
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ec4:	e025      	b.n	8002f12 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	330c      	adds	r3, #12
 8002ed0:	7812      	ldrb	r2, [r2, #0]
 8002ed2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002eec:	e011      	b.n	8002f12 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002eee:	f7fe f991 	bl	8001214 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d803      	bhi.n	8002f06 <HAL_SPI_Transmit+0x268>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f04:	d102      	bne.n	8002f0c <HAL_SPI_Transmit+0x26e>
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d102      	bne.n	8002f12 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f10:	e026      	b.n	8002f60 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1b5      	bne.n	8002e88 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	6839      	ldr	r1, [r7, #0]
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 fce3 	bl	80038ec <SPI_EndRxTxTransaction>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d002      	beq.n	8002f32 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10a      	bne.n	8002f50 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	613b      	str	r3, [r7, #16]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	613b      	str	r3, [r7, #16]
 8002f4e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d002      	beq.n	8002f5e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	77fb      	strb	r3, [r7, #31]
 8002f5c:	e000      	b.n	8002f60 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002f5e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002f70:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3720      	adds	r7, #32
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b088      	sub	sp, #32
 8002f7e:	af02      	add	r7, sp, #8
 8002f80:	60f8      	str	r0, [r7, #12]
 8002f82:	60b9      	str	r1, [r7, #8]
 8002f84:	603b      	str	r3, [r7, #0]
 8002f86:	4613      	mov	r3, r2
 8002f88:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f96:	d112      	bne.n	8002fbe <HAL_SPI_Receive+0x44>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10e      	bne.n	8002fbe <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2204      	movs	r2, #4
 8002fa4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002fa8:	88fa      	ldrh	r2, [r7, #6]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	68b9      	ldr	r1, [r7, #8]
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 f910 	bl	80031da <HAL_SPI_TransmitReceive>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	e109      	b.n	80031d2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d101      	bne.n	8002fcc <HAL_SPI_Receive+0x52>
 8002fc8:	2302      	movs	r3, #2
 8002fca:	e102      	b.n	80031d2 <HAL_SPI_Receive+0x258>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fd4:	f7fe f91e 	bl	8001214 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d002      	beq.n	8002fec <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002fea:	e0e9      	b.n	80031c0 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d002      	beq.n	8002ff8 <HAL_SPI_Receive+0x7e>
 8002ff2:	88fb      	ldrh	r3, [r7, #6]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d102      	bne.n	8002ffe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ffc:	e0e0      	b.n	80031c0 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2204      	movs	r2, #4
 8003002:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	88fa      	ldrh	r2, [r7, #6]
 8003016:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	88fa      	ldrh	r2, [r7, #6]
 800301e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003048:	d908      	bls.n	800305c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003058:	605a      	str	r2, [r3, #4]
 800305a:	e007      	b.n	800306c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800306a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003074:	d10f      	bne.n	8003096 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003084:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003094:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a0:	2b40      	cmp	r3, #64	; 0x40
 80030a2:	d007      	beq.n	80030b4 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030b2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030bc:	d867      	bhi.n	800318e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80030be:	e030      	b.n	8003122 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d117      	bne.n	80030fe <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f103 020c 	add.w	r2, r3, #12
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	7812      	ldrb	r2, [r2, #0]
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e4:	1c5a      	adds	r2, r3, #1
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	3b01      	subs	r3, #1
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80030fc:	e011      	b.n	8003122 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030fe:	f7fe f889 	bl	8001214 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	429a      	cmp	r2, r3
 800310c:	d803      	bhi.n	8003116 <HAL_SPI_Receive+0x19c>
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003114:	d102      	bne.n	800311c <HAL_SPI_Receive+0x1a2>
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d102      	bne.n	8003122 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003120:	e04e      	b.n	80031c0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003128:	b29b      	uxth	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1c8      	bne.n	80030c0 <HAL_SPI_Receive+0x146>
 800312e:	e034      	b.n	800319a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b01      	cmp	r3, #1
 800313c:	d115      	bne.n	800316a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68da      	ldr	r2, [r3, #12]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003148:	b292      	uxth	r2, r2
 800314a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003150:	1c9a      	adds	r2, r3, #2
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800315c:	b29b      	uxth	r3, r3
 800315e:	3b01      	subs	r3, #1
 8003160:	b29a      	uxth	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003168:	e011      	b.n	800318e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800316a:	f7fe f853 	bl	8001214 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	429a      	cmp	r2, r3
 8003178:	d803      	bhi.n	8003182 <HAL_SPI_Receive+0x208>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003180:	d102      	bne.n	8003188 <HAL_SPI_Receive+0x20e>
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d102      	bne.n	800318e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800318c:	e018      	b.n	80031c0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003194:	b29b      	uxth	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1ca      	bne.n	8003130 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	6839      	ldr	r1, [r7, #0]
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 fb4c 	bl	800383c <SPI_EndRxTransaction>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2220      	movs	r2, #32
 80031ae:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d002      	beq.n	80031be <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	75fb      	strb	r3, [r7, #23]
 80031bc:	e000      	b.n	80031c0 <HAL_SPI_Receive+0x246>
  }

error :
 80031be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80031d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3718      	adds	r7, #24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b08a      	sub	sp, #40	; 0x28
 80031de:	af00      	add	r7, sp, #0
 80031e0:	60f8      	str	r0, [r7, #12]
 80031e2:	60b9      	str	r1, [r7, #8]
 80031e4:	607a      	str	r2, [r7, #4]
 80031e6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80031e8:	2301      	movs	r3, #1
 80031ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80031ec:	2300      	movs	r3, #0
 80031ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d101      	bne.n	8003200 <HAL_SPI_TransmitReceive+0x26>
 80031fc:	2302      	movs	r3, #2
 80031fe:	e1fb      	b.n	80035f8 <HAL_SPI_TransmitReceive+0x41e>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003208:	f7fe f804 	bl	8001214 <HAL_GetTick>
 800320c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003214:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800321c:	887b      	ldrh	r3, [r7, #2]
 800321e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003220:	887b      	ldrh	r3, [r7, #2]
 8003222:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003224:	7efb      	ldrb	r3, [r7, #27]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d00e      	beq.n	8003248 <HAL_SPI_TransmitReceive+0x6e>
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003230:	d106      	bne.n	8003240 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d102      	bne.n	8003240 <HAL_SPI_TransmitReceive+0x66>
 800323a:	7efb      	ldrb	r3, [r7, #27]
 800323c:	2b04      	cmp	r3, #4
 800323e:	d003      	beq.n	8003248 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003240:	2302      	movs	r3, #2
 8003242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003246:	e1cd      	b.n	80035e4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d005      	beq.n	800325a <HAL_SPI_TransmitReceive+0x80>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d002      	beq.n	800325a <HAL_SPI_TransmitReceive+0x80>
 8003254:	887b      	ldrh	r3, [r7, #2]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d103      	bne.n	8003262 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003260:	e1c0      	b.n	80035e4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b04      	cmp	r3, #4
 800326c:	d003      	beq.n	8003276 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2205      	movs	r2, #5
 8003272:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	887a      	ldrh	r2, [r7, #2]
 8003286:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	887a      	ldrh	r2, [r7, #2]
 800328e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	887a      	ldrh	r2, [r7, #2]
 800329c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	887a      	ldrh	r2, [r7, #2]
 80032a2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80032b8:	d802      	bhi.n	80032c0 <HAL_SPI_TransmitReceive+0xe6>
 80032ba:	8a3b      	ldrh	r3, [r7, #16]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d908      	bls.n	80032d2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032ce:	605a      	str	r2, [r3, #4]
 80032d0:	e007      	b.n	80032e2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032e0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ec:	2b40      	cmp	r3, #64	; 0x40
 80032ee:	d007      	beq.n	8003300 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003308:	d97c      	bls.n	8003404 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d002      	beq.n	8003318 <HAL_SPI_TransmitReceive+0x13e>
 8003312:	8a7b      	ldrh	r3, [r7, #18]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d169      	bne.n	80033ec <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331c:	881a      	ldrh	r2, [r3, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003328:	1c9a      	adds	r2, r3, #2
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003332:	b29b      	uxth	r3, r3
 8003334:	3b01      	subs	r3, #1
 8003336:	b29a      	uxth	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800333c:	e056      	b.n	80033ec <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b02      	cmp	r3, #2
 800334a:	d11b      	bne.n	8003384 <HAL_SPI_TransmitReceive+0x1aa>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003350:	b29b      	uxth	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d016      	beq.n	8003384 <HAL_SPI_TransmitReceive+0x1aa>
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	2b01      	cmp	r3, #1
 800335a:	d113      	bne.n	8003384 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003360:	881a      	ldrh	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336c:	1c9a      	adds	r2, r3, #2
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003376:	b29b      	uxth	r3, r3
 8003378:	3b01      	subs	r3, #1
 800337a:	b29a      	uxth	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003380:	2300      	movs	r3, #0
 8003382:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b01      	cmp	r3, #1
 8003390:	d11c      	bne.n	80033cc <HAL_SPI_TransmitReceive+0x1f2>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003398:	b29b      	uxth	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d016      	beq.n	80033cc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	b292      	uxth	r2, r2
 80033aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	1c9a      	adds	r2, r3, #2
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033bc:	b29b      	uxth	r3, r3
 80033be:	3b01      	subs	r3, #1
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033c8:	2301      	movs	r3, #1
 80033ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80033cc:	f7fd ff22 	bl	8001214 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033d8:	429a      	cmp	r2, r3
 80033da:	d807      	bhi.n	80033ec <HAL_SPI_TransmitReceive+0x212>
 80033dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e2:	d003      	beq.n	80033ec <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80033ea:	e0fb      	b.n	80035e4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1a3      	bne.n	800333e <HAL_SPI_TransmitReceive+0x164>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d19d      	bne.n	800333e <HAL_SPI_TransmitReceive+0x164>
 8003402:	e0df      	b.n	80035c4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d003      	beq.n	8003414 <HAL_SPI_TransmitReceive+0x23a>
 800340c:	8a7b      	ldrh	r3, [r7, #18]
 800340e:	2b01      	cmp	r3, #1
 8003410:	f040 80cb 	bne.w	80035aa <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003418:	b29b      	uxth	r3, r3
 800341a:	2b01      	cmp	r3, #1
 800341c:	d912      	bls.n	8003444 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003422:	881a      	ldrh	r2, [r3, #0]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342e:	1c9a      	adds	r2, r3, #2
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003438:	b29b      	uxth	r3, r3
 800343a:	3b02      	subs	r3, #2
 800343c:	b29a      	uxth	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003442:	e0b2      	b.n	80035aa <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	330c      	adds	r3, #12
 800344e:	7812      	ldrb	r2, [r2, #0]
 8003450:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003456:	1c5a      	adds	r2, r3, #1
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003460:	b29b      	uxth	r3, r3
 8003462:	3b01      	subs	r3, #1
 8003464:	b29a      	uxth	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800346a:	e09e      	b.n	80035aa <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b02      	cmp	r3, #2
 8003478:	d134      	bne.n	80034e4 <HAL_SPI_TransmitReceive+0x30a>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800347e:	b29b      	uxth	r3, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	d02f      	beq.n	80034e4 <HAL_SPI_TransmitReceive+0x30a>
 8003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003486:	2b01      	cmp	r3, #1
 8003488:	d12c      	bne.n	80034e4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800348e:	b29b      	uxth	r3, r3
 8003490:	2b01      	cmp	r3, #1
 8003492:	d912      	bls.n	80034ba <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003498:	881a      	ldrh	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a4:	1c9a      	adds	r2, r3, #2
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	3b02      	subs	r3, #2
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034b8:	e012      	b.n	80034e0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	330c      	adds	r3, #12
 80034c4:	7812      	ldrb	r2, [r2, #0]
 80034c6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034cc:	1c5a      	adds	r2, r3, #1
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	3b01      	subs	r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d148      	bne.n	8003584 <HAL_SPI_TransmitReceive+0x3aa>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d042      	beq.n	8003584 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003504:	b29b      	uxth	r3, r3
 8003506:	2b01      	cmp	r3, #1
 8003508:	d923      	bls.n	8003552 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68da      	ldr	r2, [r3, #12]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	b292      	uxth	r2, r2
 8003516:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	1c9a      	adds	r2, r3, #2
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003528:	b29b      	uxth	r3, r3
 800352a:	3b02      	subs	r3, #2
 800352c:	b29a      	uxth	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800353a:	b29b      	uxth	r3, r3
 800353c:	2b01      	cmp	r3, #1
 800353e:	d81f      	bhi.n	8003580 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800354e:	605a      	str	r2, [r3, #4]
 8003550:	e016      	b.n	8003580 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f103 020c 	add.w	r2, r3, #12
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	7812      	ldrb	r2, [r2, #0]
 8003560:	b2d2      	uxtb	r2, r2
 8003562:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003574:	b29b      	uxth	r3, r3
 8003576:	3b01      	subs	r3, #1
 8003578:	b29a      	uxth	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003580:	2301      	movs	r3, #1
 8003582:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003584:	f7fd fe46 	bl	8001214 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003590:	429a      	cmp	r2, r3
 8003592:	d803      	bhi.n	800359c <HAL_SPI_TransmitReceive+0x3c2>
 8003594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359a:	d102      	bne.n	80035a2 <HAL_SPI_TransmitReceive+0x3c8>
 800359c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d103      	bne.n	80035aa <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80035a8:	e01c      	b.n	80035e4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f47f af5b 	bne.w	800346c <HAL_SPI_TransmitReceive+0x292>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035bc:	b29b      	uxth	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f47f af54 	bne.w	800346c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035c4:	69fa      	ldr	r2, [r7, #28]
 80035c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 f98f 	bl	80038ec <SPI_EndRxTxTransaction>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d006      	beq.n	80035e2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2220      	movs	r2, #32
 80035de:	661a      	str	r2, [r3, #96]	; 0x60
 80035e0:	e000      	b.n	80035e4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80035e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80035f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3728      	adds	r7, #40	; 0x28
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b088      	sub	sp, #32
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	603b      	str	r3, [r7, #0]
 800360c:	4613      	mov	r3, r2
 800360e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003610:	f7fd fe00 	bl	8001214 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003618:	1a9b      	subs	r3, r3, r2
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	4413      	add	r3, r2
 800361e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003620:	f7fd fdf8 	bl	8001214 <HAL_GetTick>
 8003624:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003626:	4b39      	ldr	r3, [pc, #228]	; (800370c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	015b      	lsls	r3, r3, #5
 800362c:	0d1b      	lsrs	r3, r3, #20
 800362e:	69fa      	ldr	r2, [r7, #28]
 8003630:	fb02 f303 	mul.w	r3, r2, r3
 8003634:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003636:	e054      	b.n	80036e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363e:	d050      	beq.n	80036e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003640:	f7fd fde8 	bl	8001214 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	69fa      	ldr	r2, [r7, #28]
 800364c:	429a      	cmp	r2, r3
 800364e:	d902      	bls.n	8003656 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d13d      	bne.n	80036d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003664:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800366e:	d111      	bne.n	8003694 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003678:	d004      	beq.n	8003684 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003682:	d107      	bne.n	8003694 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003692:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003698:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800369c:	d10f      	bne.n	80036be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e017      	b.n	8003702 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036d8:	2300      	movs	r3, #0
 80036da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	3b01      	subs	r3, #1
 80036e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	4013      	ands	r3, r2
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	bf0c      	ite	eq
 80036f2:	2301      	moveq	r3, #1
 80036f4:	2300      	movne	r3, #0
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	461a      	mov	r2, r3
 80036fa:	79fb      	ldrb	r3, [r7, #7]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d19b      	bne.n	8003638 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3720      	adds	r7, #32
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	2000000c 	.word	0x2000000c

08003710 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b08a      	sub	sp, #40	; 0x28
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
 800371c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800371e:	2300      	movs	r3, #0
 8003720:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003722:	f7fd fd77 	bl	8001214 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372a:	1a9b      	subs	r3, r3, r2
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	4413      	add	r3, r2
 8003730:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003732:	f7fd fd6f 	bl	8001214 <HAL_GetTick>
 8003736:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	330c      	adds	r3, #12
 800373e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003740:	4b3d      	ldr	r3, [pc, #244]	; (8003838 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	4613      	mov	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	00da      	lsls	r2, r3, #3
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	0d1b      	lsrs	r3, r3, #20
 8003750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003752:	fb02 f303 	mul.w	r3, r2, r3
 8003756:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003758:	e060      	b.n	800381c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003760:	d107      	bne.n	8003772 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d104      	bne.n	8003772 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	b2db      	uxtb	r3, r3
 800376e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003770:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003778:	d050      	beq.n	800381c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800377a:	f7fd fd4b 	bl	8001214 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	6a3b      	ldr	r3, [r7, #32]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003786:	429a      	cmp	r2, r3
 8003788:	d902      	bls.n	8003790 <SPI_WaitFifoStateUntilTimeout+0x80>
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	2b00      	cmp	r3, #0
 800378e:	d13d      	bne.n	800380c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800379e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037a8:	d111      	bne.n	80037ce <SPI_WaitFifoStateUntilTimeout+0xbe>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037b2:	d004      	beq.n	80037be <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037bc:	d107      	bne.n	80037ce <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037d6:	d10f      	bne.n	80037f8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037f6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e010      	b.n	800382e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003812:	2300      	movs	r3, #0
 8003814:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	3b01      	subs	r3, #1
 800381a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689a      	ldr	r2, [r3, #8]
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	4013      	ands	r3, r2
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	429a      	cmp	r2, r3
 800382a:	d196      	bne.n	800375a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3728      	adds	r7, #40	; 0x28
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	2000000c 	.word	0x2000000c

0800383c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af02      	add	r7, sp, #8
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003850:	d111      	bne.n	8003876 <SPI_EndRxTransaction+0x3a>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800385a:	d004      	beq.n	8003866 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003864:	d107      	bne.n	8003876 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003874:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	2200      	movs	r2, #0
 800387e:	2180      	movs	r1, #128	; 0x80
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f7ff febd 	bl	8003600 <SPI_WaitFlagStateUntilTimeout>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d007      	beq.n	800389c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003890:	f043 0220 	orr.w	r2, r3, #32
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e023      	b.n	80038e4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038a4:	d11d      	bne.n	80038e2 <SPI_EndRxTransaction+0xa6>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038ae:	d004      	beq.n	80038ba <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038b8:	d113      	bne.n	80038e2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f7ff ff22 	bl	8003710 <SPI_WaitFifoStateUntilTimeout>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d007      	beq.n	80038e2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d6:	f043 0220 	orr.w	r2, r3, #32
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e000      	b.n	80038e4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af02      	add	r7, sp, #8
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	2200      	movs	r2, #0
 8003900:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f7ff ff03 	bl	8003710 <SPI_WaitFifoStateUntilTimeout>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d007      	beq.n	8003920 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003914:	f043 0220 	orr.w	r2, r3, #32
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e027      	b.n	8003970 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	2200      	movs	r2, #0
 8003928:	2180      	movs	r1, #128	; 0x80
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f7ff fe68 	bl	8003600 <SPI_WaitFlagStateUntilTimeout>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d007      	beq.n	8003946 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800393a:	f043 0220 	orr.w	r2, r3, #32
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e014      	b.n	8003970 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	2200      	movs	r2, #0
 800394e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f7ff fedc 	bl	8003710 <SPI_WaitFifoStateUntilTimeout>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d007      	beq.n	800396e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003962:	f043 0220 	orr.w	r2, r3, #32
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e000      	b.n	8003970 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e040      	b.n	8003a0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800398e:	2b00      	cmp	r3, #0
 8003990:	d106      	bne.n	80039a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7fd fb6c 	bl	8001078 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2224      	movs	r2, #36	; 0x24
 80039a4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f022 0201 	bic.w	r2, r2, #1
 80039b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 fc0e 	bl	80041d8 <UART_SetConfig>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d101      	bne.n	80039c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e022      	b.n	8003a0c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 fd3a 	bl	8004448 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689a      	ldr	r2, [r3, #8]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f042 0201 	orr.w	r2, r2, #1
 8003a02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 fdc1 	bl	800458c <UART_CheckIdleState>
 8003a0a:	4603      	mov	r3, r0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3708      	adds	r7, #8
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b08a      	sub	sp, #40	; 0x28
 8003a18:	af02      	add	r7, sp, #8
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	603b      	str	r3, [r7, #0]
 8003a20:	4613      	mov	r3, r2
 8003a22:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a28:	2b20      	cmp	r3, #32
 8003a2a:	f040 8082 	bne.w	8003b32 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d002      	beq.n	8003a3a <HAL_UART_Transmit+0x26>
 8003a34:	88fb      	ldrh	r3, [r7, #6]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e07a      	b.n	8003b34 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d101      	bne.n	8003a4c <HAL_UART_Transmit+0x38>
 8003a48:	2302      	movs	r3, #2
 8003a4a:	e073      	b.n	8003b34 <HAL_UART_Transmit+0x120>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2221      	movs	r2, #33	; 0x21
 8003a60:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a62:	f7fd fbd7 	bl	8001214 <HAL_GetTick>
 8003a66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	88fa      	ldrh	r2, [r7, #6]
 8003a6c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	88fa      	ldrh	r2, [r7, #6]
 8003a74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a80:	d108      	bne.n	8003a94 <HAL_UART_Transmit+0x80>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d104      	bne.n	8003a94 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	61bb      	str	r3, [r7, #24]
 8003a92:	e003      	b.n	8003a9c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003aa4:	e02d      	b.n	8003b02 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	2200      	movs	r2, #0
 8003aae:	2180      	movs	r1, #128	; 0x80
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f000 fdb4 	bl	800461e <UART_WaitOnFlagUntilTimeout>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e039      	b.n	8003b34 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10b      	bne.n	8003ade <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	881a      	ldrh	r2, [r3, #0]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ad2:	b292      	uxth	r2, r2
 8003ad4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	3302      	adds	r3, #2
 8003ada:	61bb      	str	r3, [r7, #24]
 8003adc:	e008      	b.n	8003af0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	781a      	ldrb	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	b292      	uxth	r2, r2
 8003ae8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	3301      	adds	r3, #1
 8003aee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	3b01      	subs	r3, #1
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1cb      	bne.n	8003aa6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	2200      	movs	r2, #0
 8003b16:	2140      	movs	r1, #64	; 0x40
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 fd80 	bl	800461e <UART_WaitOnFlagUntilTimeout>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e005      	b.n	8003b34 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	e000      	b.n	8003b34 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003b32:	2302      	movs	r3, #2
  }
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3720      	adds	r7, #32
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b08a      	sub	sp, #40	; 0x28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	4613      	mov	r3, r2
 8003b48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b4e:	2b20      	cmp	r3, #32
 8003b50:	d13d      	bne.n	8003bce <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d002      	beq.n	8003b5e <HAL_UART_Receive_IT+0x22>
 8003b58:	88fb      	ldrh	r3, [r7, #6]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e036      	b.n	8003bd0 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d101      	bne.n	8003b70 <HAL_UART_Receive_IT+0x34>
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	e02f      	b.n	8003bd0 <HAL_UART_Receive_IT+0x94>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d018      	beq.n	8003bbe <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	e853 3f00 	ldrex	r3, [r3]
 8003b98:	613b      	str	r3, [r7, #16]
   return(result);
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	623b      	str	r3, [r7, #32]
 8003bac:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bae:	69f9      	ldr	r1, [r7, #28]
 8003bb0:	6a3a      	ldr	r2, [r7, #32]
 8003bb2:	e841 2300 	strex	r3, r2, [r1]
 8003bb6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1e6      	bne.n	8003b8c <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003bbe:	88fb      	ldrh	r3, [r7, #6]
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	68b9      	ldr	r1, [r7, #8]
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f000 fdef 	bl	80047a8 <UART_Start_Receive_IT>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	e000      	b.n	8003bd0 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003bce:	2302      	movs	r3, #2
  }
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3728      	adds	r7, #40	; 0x28
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b0ba      	sub	sp, #232	; 0xe8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003bfe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003c02:	f640 030f 	movw	r3, #2063	; 0x80f
 8003c06:	4013      	ands	r3, r2
 8003c08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003c0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d115      	bne.n	8003c40 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c18:	f003 0320 	and.w	r3, r3, #32
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00f      	beq.n	8003c40 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c24:	f003 0320 	and.w	r3, r3, #32
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d009      	beq.n	8003c40 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 82a4 	beq.w	800417e <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	4798      	blx	r3
      }
      return;
 8003c3e:	e29e      	b.n	800417e <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003c40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 8117 	beq.w	8003e78 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003c4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d106      	bne.n	8003c64 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003c56:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003c5a:	4b85      	ldr	r3, [pc, #532]	; (8003e70 <HAL_UART_IRQHandler+0x298>)
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 810a 	beq.w	8003e78 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d011      	beq.n	8003c94 <HAL_UART_IRQHandler+0xbc>
 8003c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00b      	beq.n	8003c94 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2201      	movs	r2, #1
 8003c82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c8a:	f043 0201 	orr.w	r2, r3, #1
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d011      	beq.n	8003cc4 <HAL_UART_IRQHandler+0xec>
 8003ca0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00b      	beq.n	8003cc4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cba:	f043 0204 	orr.w	r2, r3, #4
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cc8:	f003 0304 	and.w	r3, r3, #4
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d011      	beq.n	8003cf4 <HAL_UART_IRQHandler+0x11c>
 8003cd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00b      	beq.n	8003cf4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2204      	movs	r2, #4
 8003ce2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cea:	f043 0202 	orr.w	r2, r3, #2
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cf8:	f003 0308 	and.w	r3, r3, #8
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d017      	beq.n	8003d30 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d04:	f003 0320 	and.w	r3, r3, #32
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d105      	bne.n	8003d18 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003d0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d10:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00b      	beq.n	8003d30 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2208      	movs	r2, #8
 8003d1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d26:	f043 0208 	orr.w	r2, r3, #8
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d012      	beq.n	8003d62 <HAL_UART_IRQHandler+0x18a>
 8003d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00c      	beq.n	8003d62 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d58:	f043 0220 	orr.w	r2, r3, #32
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 820a 	beq.w	8004182 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d72:	f003 0320 	and.w	r3, r3, #32
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00d      	beq.n	8003d96 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d7e:	f003 0320 	and.w	r3, r3, #32
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d007      	beq.n	8003d96 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003daa:	2b40      	cmp	r3, #64	; 0x40
 8003dac:	d005      	beq.n	8003dba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003dae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003db2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d04f      	beq.n	8003e5a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 fda0 	bl	8004900 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dca:	2b40      	cmp	r3, #64	; 0x40
 8003dcc:	d141      	bne.n	8003e52 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	3308      	adds	r3, #8
 8003dd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ddc:	e853 3f00 	ldrex	r3, [r3]
 8003de0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003de4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003de8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	3308      	adds	r3, #8
 8003df6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003dfa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003dfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003e0a:	e841 2300 	strex	r3, r2, [r1]
 8003e0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1d9      	bne.n	8003dce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d013      	beq.n	8003e4a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e26:	4a13      	ldr	r2, [pc, #76]	; (8003e74 <HAL_UART_IRQHandler+0x29c>)
 8003e28:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7fd fb68 	bl	8001504 <HAL_DMA_Abort_IT>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d017      	beq.n	8003e6a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003e44:	4610      	mov	r0, r2
 8003e46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e48:	e00f      	b.n	8003e6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f9ae 	bl	80041ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e50:	e00b      	b.n	8003e6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f9aa 	bl	80041ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e58:	e007      	b.n	8003e6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f9a6 	bl	80041ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003e68:	e18b      	b.n	8004182 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e6a:	bf00      	nop
    return;
 8003e6c:	e189      	b.n	8004182 <HAL_UART_IRQHandler+0x5aa>
 8003e6e:	bf00      	nop
 8003e70:	04000120 	.word	0x04000120
 8003e74:	080049c7 	.word	0x080049c7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	f040 8143 	bne.w	8004108 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e86:	f003 0310 	and.w	r3, r3, #16
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f000 813c 	beq.w	8004108 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e94:	f003 0310 	and.w	r3, r3, #16
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 8135 	beq.w	8004108 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2210      	movs	r2, #16
 8003ea4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb0:	2b40      	cmp	r3, #64	; 0x40
 8003eb2:	f040 80b1 	bne.w	8004018 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ec2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f000 815d 	beq.w	8004186 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003ed2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	f080 8155 	bcs.w	8004186 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ee2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	2b20      	cmp	r3, #32
 8003eee:	f000 8085 	beq.w	8003ffc <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003efe:	e853 3f00 	ldrex	r3, [r3]
 8003f02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003f06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	461a      	mov	r2, r3
 8003f18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003f1c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003f20:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f24:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f28:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f2c:	e841 2300 	strex	r3, r2, [r1]
 8003f30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003f34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1da      	bne.n	8003ef2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	3308      	adds	r3, #8
 8003f42:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f46:	e853 3f00 	ldrex	r3, [r3]
 8003f4a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f4e:	f023 0301 	bic.w	r3, r3, #1
 8003f52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	3308      	adds	r3, #8
 8003f5c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f60:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003f64:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f66:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003f68:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f6c:	e841 2300 	strex	r3, r2, [r1]
 8003f70:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003f72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1e1      	bne.n	8003f3c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	3308      	adds	r3, #8
 8003f7e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f82:	e853 3f00 	ldrex	r3, [r3]
 8003f86:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003f88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	3308      	adds	r3, #8
 8003f98:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f9c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f9e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003fa2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003fa4:	e841 2300 	strex	r3, r2, [r1]
 8003fa8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003faa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1e3      	bne.n	8003f78 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fc4:	e853 3f00 	ldrex	r3, [r3]
 8003fc8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003fca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fcc:	f023 0310 	bic.w	r3, r3, #16
 8003fd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fde:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fe0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003fe4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fe6:	e841 2300 	strex	r3, r2, [r1]
 8003fea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003fec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1e4      	bne.n	8003fbc <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7fd fa4b 	bl	8001492 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004008:	b29b      	uxth	r3, r3
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	b29b      	uxth	r3, r3
 800400e:	4619      	mov	r1, r3
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f8d5 	bl	80041c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004016:	e0b6      	b.n	8004186 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004024:	b29b      	uxth	r3, r3
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004032:	b29b      	uxth	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 80a8 	beq.w	800418a <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 800403a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800403e:	2b00      	cmp	r3, #0
 8004040:	f000 80a3 	beq.w	800418a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800404c:	e853 3f00 	ldrex	r3, [r3]
 8004050:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004054:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004058:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	461a      	mov	r2, r3
 8004062:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004066:	647b      	str	r3, [r7, #68]	; 0x44
 8004068:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800406c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800406e:	e841 2300 	strex	r3, r2, [r1]
 8004072:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1e4      	bne.n	8004044 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	3308      	adds	r3, #8
 8004080:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004084:	e853 3f00 	ldrex	r3, [r3]
 8004088:	623b      	str	r3, [r7, #32]
   return(result);
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	f023 0301 	bic.w	r3, r3, #1
 8004090:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	3308      	adds	r3, #8
 800409a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800409e:	633a      	str	r2, [r7, #48]	; 0x30
 80040a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040a6:	e841 2300 	strex	r3, r2, [r1]
 80040aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1e3      	bne.n	800407a <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2220      	movs	r2, #32
 80040b6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	e853 3f00 	ldrex	r3, [r3]
 80040d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f023 0310 	bic.w	r3, r3, #16
 80040d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	461a      	mov	r2, r3
 80040e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80040e6:	61fb      	str	r3, [r7, #28]
 80040e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ea:	69b9      	ldr	r1, [r7, #24]
 80040ec:	69fa      	ldr	r2, [r7, #28]
 80040ee:	e841 2300 	strex	r3, r2, [r1]
 80040f2:	617b      	str	r3, [r7, #20]
   return(result);
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1e4      	bne.n	80040c4 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040fe:	4619      	mov	r1, r3
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 f85d 	bl	80041c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004106:	e040      	b.n	800418a <HAL_UART_IRQHandler+0x5b2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800410c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00e      	beq.n	8004132 <HAL_UART_IRQHandler+0x55a>
 8004114:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004118:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d008      	beq.n	8004132 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004128:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 fde7 	bl	8004cfe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004130:	e02e      	b.n	8004190 <HAL_UART_IRQHandler+0x5b8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00e      	beq.n	800415c <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800413e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004146:	2b00      	cmp	r3, #0
 8004148:	d008      	beq.n	800415c <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800414e:	2b00      	cmp	r3, #0
 8004150:	d01d      	beq.n	800418e <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	4798      	blx	r3
    }
    return;
 800415a:	e018      	b.n	800418e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800415c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004164:	2b00      	cmp	r3, #0
 8004166:	d013      	beq.n	8004190 <HAL_UART_IRQHandler+0x5b8>
 8004168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800416c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00d      	beq.n	8004190 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 fc3c 	bl	80049f2 <UART_EndTransmit_IT>
    return;
 800417a:	bf00      	nop
 800417c:	e008      	b.n	8004190 <HAL_UART_IRQHandler+0x5b8>
      return;
 800417e:	bf00      	nop
 8004180:	e006      	b.n	8004190 <HAL_UART_IRQHandler+0x5b8>
    return;
 8004182:	bf00      	nop
 8004184:	e004      	b.n	8004190 <HAL_UART_IRQHandler+0x5b8>
      return;
 8004186:	bf00      	nop
 8004188:	e002      	b.n	8004190 <HAL_UART_IRQHandler+0x5b8>
      return;
 800418a:	bf00      	nop
 800418c:	e000      	b.n	8004190 <HAL_UART_IRQHandler+0x5b8>
    return;
 800418e:	bf00      	nop
  }

}
 8004190:	37e8      	adds	r7, #232	; 0xe8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop

08004198 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	460b      	mov	r3, r1
 80041ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b088      	sub	sp, #32
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041e0:	2300      	movs	r3, #0
 80041e2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	431a      	orrs	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	431a      	orrs	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	4b8b      	ldr	r3, [pc, #556]	; (8004430 <UART_SetConfig+0x258>)
 8004204:	4013      	ands	r3, r2
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6812      	ldr	r2, [r2, #0]
 800420a:	6979      	ldr	r1, [r7, #20]
 800420c:	430b      	orrs	r3, r1
 800420e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	4313      	orrs	r3, r2
 8004234:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	430a      	orrs	r2, r1
 8004248:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a79      	ldr	r2, [pc, #484]	; (8004434 <UART_SetConfig+0x25c>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d121      	bne.n	8004298 <UART_SetConfig+0xc0>
 8004254:	4b78      	ldr	r3, [pc, #480]	; (8004438 <UART_SetConfig+0x260>)
 8004256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004258:	f003 0303 	and.w	r3, r3, #3
 800425c:	2b03      	cmp	r3, #3
 800425e:	d817      	bhi.n	8004290 <UART_SetConfig+0xb8>
 8004260:	a201      	add	r2, pc, #4	; (adr r2, 8004268 <UART_SetConfig+0x90>)
 8004262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004266:	bf00      	nop
 8004268:	08004279 	.word	0x08004279
 800426c:	08004285 	.word	0x08004285
 8004270:	0800428b 	.word	0x0800428b
 8004274:	0800427f 	.word	0x0800427f
 8004278:	2300      	movs	r3, #0
 800427a:	77fb      	strb	r3, [r7, #31]
 800427c:	e01e      	b.n	80042bc <UART_SetConfig+0xe4>
 800427e:	2302      	movs	r3, #2
 8004280:	77fb      	strb	r3, [r7, #31]
 8004282:	e01b      	b.n	80042bc <UART_SetConfig+0xe4>
 8004284:	2304      	movs	r3, #4
 8004286:	77fb      	strb	r3, [r7, #31]
 8004288:	e018      	b.n	80042bc <UART_SetConfig+0xe4>
 800428a:	2308      	movs	r3, #8
 800428c:	77fb      	strb	r3, [r7, #31]
 800428e:	e015      	b.n	80042bc <UART_SetConfig+0xe4>
 8004290:	2310      	movs	r3, #16
 8004292:	77fb      	strb	r3, [r7, #31]
 8004294:	bf00      	nop
 8004296:	e011      	b.n	80042bc <UART_SetConfig+0xe4>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a67      	ldr	r2, [pc, #412]	; (800443c <UART_SetConfig+0x264>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d102      	bne.n	80042a8 <UART_SetConfig+0xd0>
 80042a2:	2300      	movs	r3, #0
 80042a4:	77fb      	strb	r3, [r7, #31]
 80042a6:	e009      	b.n	80042bc <UART_SetConfig+0xe4>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a64      	ldr	r2, [pc, #400]	; (8004440 <UART_SetConfig+0x268>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d102      	bne.n	80042b8 <UART_SetConfig+0xe0>
 80042b2:	2300      	movs	r3, #0
 80042b4:	77fb      	strb	r3, [r7, #31]
 80042b6:	e001      	b.n	80042bc <UART_SetConfig+0xe4>
 80042b8:	2310      	movs	r3, #16
 80042ba:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042c4:	d15c      	bne.n	8004380 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 80042c6:	7ffb      	ldrb	r3, [r7, #31]
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	d828      	bhi.n	800431e <UART_SetConfig+0x146>
 80042cc:	a201      	add	r2, pc, #4	; (adr r2, 80042d4 <UART_SetConfig+0xfc>)
 80042ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d2:	bf00      	nop
 80042d4:	080042f9 	.word	0x080042f9
 80042d8:	08004301 	.word	0x08004301
 80042dc:	08004309 	.word	0x08004309
 80042e0:	0800431f 	.word	0x0800431f
 80042e4:	0800430f 	.word	0x0800430f
 80042e8:	0800431f 	.word	0x0800431f
 80042ec:	0800431f 	.word	0x0800431f
 80042f0:	0800431f 	.word	0x0800431f
 80042f4:	08004317 	.word	0x08004317
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042f8:	f7fe fbe2 	bl	8002ac0 <HAL_RCC_GetPCLK1Freq>
 80042fc:	61b8      	str	r0, [r7, #24]
        break;
 80042fe:	e013      	b.n	8004328 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004300:	f7fe fc00 	bl	8002b04 <HAL_RCC_GetPCLK2Freq>
 8004304:	61b8      	str	r0, [r7, #24]
        break;
 8004306:	e00f      	b.n	8004328 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004308:	4b4e      	ldr	r3, [pc, #312]	; (8004444 <UART_SetConfig+0x26c>)
 800430a:	61bb      	str	r3, [r7, #24]
        break;
 800430c:	e00c      	b.n	8004328 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800430e:	f7fe fb5f 	bl	80029d0 <HAL_RCC_GetSysClockFreq>
 8004312:	61b8      	str	r0, [r7, #24]
        break;
 8004314:	e008      	b.n	8004328 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004316:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800431a:	61bb      	str	r3, [r7, #24]
        break;
 800431c:	e004      	b.n	8004328 <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 800431e:	2300      	movs	r3, #0
 8004320:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	77bb      	strb	r3, [r7, #30]
        break;
 8004326:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d074      	beq.n	8004418 <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	005a      	lsls	r2, r3, #1
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	085b      	lsrs	r3, r3, #1
 8004338:	441a      	add	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004342:	b29b      	uxth	r3, r3
 8004344:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	2b0f      	cmp	r3, #15
 800434a:	d916      	bls.n	800437a <UART_SetConfig+0x1a2>
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004352:	d212      	bcs.n	800437a <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	b29b      	uxth	r3, r3
 8004358:	f023 030f 	bic.w	r3, r3, #15
 800435c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	085b      	lsrs	r3, r3, #1
 8004362:	b29b      	uxth	r3, r3
 8004364:	f003 0307 	and.w	r3, r3, #7
 8004368:	b29a      	uxth	r2, r3
 800436a:	89fb      	ldrh	r3, [r7, #14]
 800436c:	4313      	orrs	r3, r2
 800436e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	89fa      	ldrh	r2, [r7, #14]
 8004376:	60da      	str	r2, [r3, #12]
 8004378:	e04e      	b.n	8004418 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	77bb      	strb	r3, [r7, #30]
 800437e:	e04b      	b.n	8004418 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004380:	7ffb      	ldrb	r3, [r7, #31]
 8004382:	2b08      	cmp	r3, #8
 8004384:	d827      	bhi.n	80043d6 <UART_SetConfig+0x1fe>
 8004386:	a201      	add	r2, pc, #4	; (adr r2, 800438c <UART_SetConfig+0x1b4>)
 8004388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438c:	080043b1 	.word	0x080043b1
 8004390:	080043b9 	.word	0x080043b9
 8004394:	080043c1 	.word	0x080043c1
 8004398:	080043d7 	.word	0x080043d7
 800439c:	080043c7 	.word	0x080043c7
 80043a0:	080043d7 	.word	0x080043d7
 80043a4:	080043d7 	.word	0x080043d7
 80043a8:	080043d7 	.word	0x080043d7
 80043ac:	080043cf 	.word	0x080043cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043b0:	f7fe fb86 	bl	8002ac0 <HAL_RCC_GetPCLK1Freq>
 80043b4:	61b8      	str	r0, [r7, #24]
        break;
 80043b6:	e013      	b.n	80043e0 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043b8:	f7fe fba4 	bl	8002b04 <HAL_RCC_GetPCLK2Freq>
 80043bc:	61b8      	str	r0, [r7, #24]
        break;
 80043be:	e00f      	b.n	80043e0 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043c0:	4b20      	ldr	r3, [pc, #128]	; (8004444 <UART_SetConfig+0x26c>)
 80043c2:	61bb      	str	r3, [r7, #24]
        break;
 80043c4:	e00c      	b.n	80043e0 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043c6:	f7fe fb03 	bl	80029d0 <HAL_RCC_GetSysClockFreq>
 80043ca:	61b8      	str	r0, [r7, #24]
        break;
 80043cc:	e008      	b.n	80043e0 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043d2:	61bb      	str	r3, [r7, #24]
        break;
 80043d4:	e004      	b.n	80043e0 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 80043d6:	2300      	movs	r3, #0
 80043d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	77bb      	strb	r3, [r7, #30]
        break;
 80043de:	bf00      	nop
    }

    if (pclk != 0U)
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d018      	beq.n	8004418 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	085a      	lsrs	r2, r3, #1
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	441a      	add	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	2b0f      	cmp	r3, #15
 8004400:	d908      	bls.n	8004414 <UART_SetConfig+0x23c>
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004408:	d204      	bcs.n	8004414 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	60da      	str	r2, [r3, #12]
 8004412:	e001      	b.n	8004418 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004424:	7fbb      	ldrb	r3, [r7, #30]
}
 8004426:	4618      	mov	r0, r3
 8004428:	3720      	adds	r7, #32
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	efff69f3 	.word	0xefff69f3
 8004434:	40013800 	.word	0x40013800
 8004438:	40021000 	.word	0x40021000
 800443c:	40004400 	.word	0x40004400
 8004440:	40004800 	.word	0x40004800
 8004444:	007a1200 	.word	0x007a1200

08004448 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00a      	beq.n	8004472 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	f003 0304 	and.w	r3, r3, #4
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00a      	beq.n	80044b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	f003 0308 	and.w	r3, r3, #8
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00a      	beq.n	80044d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044dc:	f003 0310 	and.w	r3, r3, #16
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00a      	beq.n	80044fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	f003 0320 	and.w	r3, r3, #32
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00a      	beq.n	800451c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	430a      	orrs	r2, r1
 800451a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004524:	2b00      	cmp	r3, #0
 8004526:	d01a      	beq.n	800455e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004546:	d10a      	bne.n	800455e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	430a      	orrs	r2, r1
 800455c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00a      	beq.n	8004580 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	430a      	orrs	r2, r1
 800457e:	605a      	str	r2, [r3, #4]
  }
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af02      	add	r7, sp, #8
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800459c:	f7fc fe3a 	bl	8001214 <HAL_GetTick>
 80045a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0308 	and.w	r3, r3, #8
 80045ac:	2b08      	cmp	r3, #8
 80045ae:	d10e      	bne.n	80045ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 f82d 	bl	800461e <UART_WaitOnFlagUntilTimeout>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d001      	beq.n	80045ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e023      	b.n	8004616 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0304 	and.w	r3, r3, #4
 80045d8:	2b04      	cmp	r3, #4
 80045da:	d10e      	bne.n	80045fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f817 	bl	800461e <UART_WaitOnFlagUntilTimeout>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e00d      	b.n	8004616 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2220      	movs	r2, #32
 80045fe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2220      	movs	r2, #32
 8004604:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b09c      	sub	sp, #112	; 0x70
 8004622:	af00      	add	r7, sp, #0
 8004624:	60f8      	str	r0, [r7, #12]
 8004626:	60b9      	str	r1, [r7, #8]
 8004628:	603b      	str	r3, [r7, #0]
 800462a:	4613      	mov	r3, r2
 800462c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800462e:	e0a5      	b.n	800477c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004630:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004636:	f000 80a1 	beq.w	800477c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800463a:	f7fc fdeb 	bl	8001214 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004646:	429a      	cmp	r2, r3
 8004648:	d302      	bcc.n	8004650 <UART_WaitOnFlagUntilTimeout+0x32>
 800464a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800464c:	2b00      	cmp	r3, #0
 800464e:	d13e      	bne.n	80046ce <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004656:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004658:	e853 3f00 	ldrex	r3, [r3]
 800465c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800465e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004660:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004664:	667b      	str	r3, [r7, #100]	; 0x64
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	461a      	mov	r2, r3
 800466c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800466e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004670:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004672:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004674:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004676:	e841 2300 	strex	r3, r2, [r1]
 800467a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800467c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1e6      	bne.n	8004650 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	3308      	adds	r3, #8
 8004688:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800468c:	e853 3f00 	ldrex	r3, [r3]
 8004690:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004694:	f023 0301 	bic.w	r3, r3, #1
 8004698:	663b      	str	r3, [r7, #96]	; 0x60
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	3308      	adds	r3, #8
 80046a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80046a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80046a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80046a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046aa:	e841 2300 	strex	r3, r2, [r1]
 80046ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80046b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1e5      	bne.n	8004682 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2220      	movs	r2, #32
 80046ba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2220      	movs	r2, #32
 80046c0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e067      	b.n	800479e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d04f      	beq.n	800477c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046ea:	d147      	bne.n	800477c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fe:	e853 3f00 	ldrex	r3, [r3]
 8004702:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800470a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	461a      	mov	r2, r3
 8004712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004714:	637b      	str	r3, [r7, #52]	; 0x34
 8004716:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004718:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800471a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800471c:	e841 2300 	strex	r3, r2, [r1]
 8004720:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1e6      	bne.n	80046f6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	3308      	adds	r3, #8
 800472e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	e853 3f00 	ldrex	r3, [r3]
 8004736:	613b      	str	r3, [r7, #16]
   return(result);
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	f023 0301 	bic.w	r3, r3, #1
 800473e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	3308      	adds	r3, #8
 8004746:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004748:	623a      	str	r2, [r7, #32]
 800474a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474c:	69f9      	ldr	r1, [r7, #28]
 800474e:	6a3a      	ldr	r2, [r7, #32]
 8004750:	e841 2300 	strex	r3, r2, [r1]
 8004754:	61bb      	str	r3, [r7, #24]
   return(result);
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1e5      	bne.n	8004728 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2220      	movs	r2, #32
 8004760:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2220      	movs	r2, #32
 8004766:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2220      	movs	r2, #32
 800476c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e010      	b.n	800479e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	69da      	ldr	r2, [r3, #28]
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	4013      	ands	r3, r2
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	429a      	cmp	r2, r3
 800478a:	bf0c      	ite	eq
 800478c:	2301      	moveq	r3, #1
 800478e:	2300      	movne	r3, #0
 8004790:	b2db      	uxtb	r3, r3
 8004792:	461a      	mov	r2, r3
 8004794:	79fb      	ldrb	r3, [r7, #7]
 8004796:	429a      	cmp	r2, r3
 8004798:	f43f af4a 	beq.w	8004630 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3770      	adds	r7, #112	; 0x70
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
	...

080047a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b091      	sub	sp, #68	; 0x44
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	4613      	mov	r3, r2
 80047b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	88fa      	ldrh	r2, [r7, #6]
 80047c0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	88fa      	ldrh	r2, [r7, #6]
 80047c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047da:	d10e      	bne.n	80047fa <UART_Start_Receive_IT+0x52>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d105      	bne.n	80047f0 <UART_Start_Receive_IT+0x48>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80047ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047ee:	e02d      	b.n	800484c <UART_Start_Receive_IT+0xa4>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	22ff      	movs	r2, #255	; 0xff
 80047f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047f8:	e028      	b.n	800484c <UART_Start_Receive_IT+0xa4>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10d      	bne.n	800481e <UART_Start_Receive_IT+0x76>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d104      	bne.n	8004814 <UART_Start_Receive_IT+0x6c>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	22ff      	movs	r2, #255	; 0xff
 800480e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004812:	e01b      	b.n	800484c <UART_Start_Receive_IT+0xa4>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	227f      	movs	r2, #127	; 0x7f
 8004818:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800481c:	e016      	b.n	800484c <UART_Start_Receive_IT+0xa4>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004826:	d10d      	bne.n	8004844 <UART_Start_Receive_IT+0x9c>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d104      	bne.n	800483a <UART_Start_Receive_IT+0x92>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	227f      	movs	r2, #127	; 0x7f
 8004834:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004838:	e008      	b.n	800484c <UART_Start_Receive_IT+0xa4>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	223f      	movs	r2, #63	; 0x3f
 800483e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004842:	e003      	b.n	800484c <UART_Start_Receive_IT+0xa4>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2222      	movs	r2, #34	; 0x22
 8004858:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	3308      	adds	r3, #8
 8004860:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004864:	e853 3f00 	ldrex	r3, [r3]
 8004868:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486c:	f043 0301 	orr.w	r3, r3, #1
 8004870:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	3308      	adds	r3, #8
 8004878:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800487a:	637a      	str	r2, [r7, #52]	; 0x34
 800487c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004880:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004882:	e841 2300 	strex	r3, r2, [r1]
 8004886:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1e5      	bne.n	800485a <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004896:	d107      	bne.n	80048a8 <UART_Start_Receive_IT+0x100>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d103      	bne.n	80048a8 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4a15      	ldr	r2, [pc, #84]	; (80048f8 <UART_Start_Receive_IT+0x150>)
 80048a4:	665a      	str	r2, [r3, #100]	; 0x64
 80048a6:	e002      	b.n	80048ae <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4a14      	ldr	r2, [pc, #80]	; (80048fc <UART_Start_Receive_IT+0x154>)
 80048ac:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	e853 3f00 	ldrex	r3, [r3]
 80048c2:	613b      	str	r3, [r7, #16]
   return(result);
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80048ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	461a      	mov	r2, r3
 80048d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d4:	623b      	str	r3, [r7, #32]
 80048d6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d8:	69f9      	ldr	r1, [r7, #28]
 80048da:	6a3a      	ldr	r2, [r7, #32]
 80048dc:	e841 2300 	strex	r3, r2, [r1]
 80048e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1e6      	bne.n	80048b6 <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3744      	adds	r7, #68	; 0x44
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	08004ba3 	.word	0x08004ba3
 80048fc:	08004a47 	.word	0x08004a47

08004900 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004900:	b480      	push	{r7}
 8004902:	b095      	sub	sp, #84	; 0x54
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004910:	e853 3f00 	ldrex	r3, [r3]
 8004914:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004918:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800491c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	461a      	mov	r2, r3
 8004924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004926:	643b      	str	r3, [r7, #64]	; 0x40
 8004928:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800492c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800492e:	e841 2300 	strex	r3, r2, [r1]
 8004932:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1e6      	bne.n	8004908 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	3308      	adds	r3, #8
 8004940:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004942:	6a3b      	ldr	r3, [r7, #32]
 8004944:	e853 3f00 	ldrex	r3, [r3]
 8004948:	61fb      	str	r3, [r7, #28]
   return(result);
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	f023 0301 	bic.w	r3, r3, #1
 8004950:	64bb      	str	r3, [r7, #72]	; 0x48
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	3308      	adds	r3, #8
 8004958:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800495a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800495c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004962:	e841 2300 	strex	r3, r2, [r1]
 8004966:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1e5      	bne.n	800493a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004972:	2b01      	cmp	r3, #1
 8004974:	d118      	bne.n	80049a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	e853 3f00 	ldrex	r3, [r3]
 8004982:	60bb      	str	r3, [r7, #8]
   return(result);
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	f023 0310 	bic.w	r3, r3, #16
 800498a:	647b      	str	r3, [r7, #68]	; 0x44
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	461a      	mov	r2, r3
 8004992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004994:	61bb      	str	r3, [r7, #24]
 8004996:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004998:	6979      	ldr	r1, [r7, #20]
 800499a:	69ba      	ldr	r2, [r7, #24]
 800499c:	e841 2300 	strex	r3, r2, [r1]
 80049a0:	613b      	str	r3, [r7, #16]
   return(result);
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1e6      	bne.n	8004976 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2220      	movs	r2, #32
 80049ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80049ba:	bf00      	nop
 80049bc:	3754      	adds	r7, #84	; 0x54
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b084      	sub	sp, #16
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f7ff fbe1 	bl	80041ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049ea:	bf00      	nop
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b088      	sub	sp, #32
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	e853 3f00 	ldrex	r3, [r3]
 8004a06:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a0e:	61fb      	str	r3, [r7, #28]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	461a      	mov	r2, r3
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	61bb      	str	r3, [r7, #24]
 8004a1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1c:	6979      	ldr	r1, [r7, #20]
 8004a1e:	69ba      	ldr	r2, [r7, #24]
 8004a20:	e841 2300 	strex	r3, r2, [r1]
 8004a24:	613b      	str	r3, [r7, #16]
   return(result);
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1e6      	bne.n	80049fa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2220      	movs	r2, #32
 8004a30:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f7ff fbad 	bl	8004198 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a3e:	bf00      	nop
 8004a40:	3720      	adds	r7, #32
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b096      	sub	sp, #88	; 0x58
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004a54:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a5c:	2b22      	cmp	r3, #34	; 0x22
 8004a5e:	f040 8094 	bne.w	8004b8a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004a68:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004a6c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004a70:	b2d9      	uxtb	r1, r3
 8004a72:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004a76:	b2da      	uxtb	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a7c:	400a      	ands	r2, r1
 8004a7e:	b2d2      	uxtb	r2, r2
 8004a80:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a86:	1c5a      	adds	r2, r3, #1
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	3b01      	subs	r3, #1
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d177      	bne.n	8004b9a <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab2:	e853 3f00 	ldrex	r3, [r3]
 8004ab6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004abe:	653b      	str	r3, [r7, #80]	; 0x50
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ac8:	647b      	str	r3, [r7, #68]	; 0x44
 8004aca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004acc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ace:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ad0:	e841 2300 	strex	r3, r2, [r1]
 8004ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1e6      	bne.n	8004aaa <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	3308      	adds	r3, #8
 8004ae2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	e853 3f00 	ldrex	r3, [r3]
 8004aea:	623b      	str	r3, [r7, #32]
   return(result);
 8004aec:	6a3b      	ldr	r3, [r7, #32]
 8004aee:	f023 0301 	bic.w	r3, r3, #1
 8004af2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	3308      	adds	r3, #8
 8004afa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004afc:	633a      	str	r2, [r7, #48]	; 0x30
 8004afe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b04:	e841 2300 	strex	r3, r2, [r1]
 8004b08:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1e5      	bne.n	8004adc <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2220      	movs	r2, #32
 8004b14:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d12e      	bne.n	8004b82 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	e853 3f00 	ldrex	r3, [r3]
 8004b36:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f023 0310 	bic.w	r3, r3, #16
 8004b3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	461a      	mov	r2, r3
 8004b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b48:	61fb      	str	r3, [r7, #28]
 8004b4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4c:	69b9      	ldr	r1, [r7, #24]
 8004b4e:	69fa      	ldr	r2, [r7, #28]
 8004b50:	e841 2300 	strex	r3, r2, [r1]
 8004b54:	617b      	str	r3, [r7, #20]
   return(result);
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1e6      	bne.n	8004b2a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	f003 0310 	and.w	r3, r3, #16
 8004b66:	2b10      	cmp	r3, #16
 8004b68:	d103      	bne.n	8004b72 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2210      	movs	r2, #16
 8004b70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004b78:	4619      	mov	r1, r3
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f7ff fb20 	bl	80041c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004b80:	e00b      	b.n	8004b9a <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7fc f88a 	bl	8000c9c <HAL_UART_RxCpltCallback>
}
 8004b88:	e007      	b.n	8004b9a <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	699a      	ldr	r2, [r3, #24]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f042 0208 	orr.w	r2, r2, #8
 8004b98:	619a      	str	r2, [r3, #24]
}
 8004b9a:	bf00      	nop
 8004b9c:	3758      	adds	r7, #88	; 0x58
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b096      	sub	sp, #88	; 0x58
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004bb0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bb8:	2b22      	cmp	r3, #34	; 0x22
 8004bba:	f040 8094 	bne.w	8004ce6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004bc4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bcc:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004bce:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004bd2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bdc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be2:	1c9a      	adds	r2, r3, #2
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d177      	bne.n	8004cf6 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c0e:	e853 3f00 	ldrex	r3, [r3]
 8004c12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	461a      	mov	r2, r3
 8004c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c24:	643b      	str	r3, [r7, #64]	; 0x40
 8004c26:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c2c:	e841 2300 	strex	r3, r2, [r1]
 8004c30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1e6      	bne.n	8004c06 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	3308      	adds	r3, #8
 8004c3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c40:	6a3b      	ldr	r3, [r7, #32]
 8004c42:	e853 3f00 	ldrex	r3, [r3]
 8004c46:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	f023 0301 	bic.w	r3, r3, #1
 8004c4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	3308      	adds	r3, #8
 8004c56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c60:	e841 2300 	strex	r3, r2, [r1]
 8004c64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1e5      	bne.n	8004c38 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2220      	movs	r2, #32
 8004c70:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d12e      	bne.n	8004cde <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	e853 3f00 	ldrex	r3, [r3]
 8004c92:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	f023 0310 	bic.w	r3, r3, #16
 8004c9a:	647b      	str	r3, [r7, #68]	; 0x44
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ca4:	61bb      	str	r3, [r7, #24]
 8004ca6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca8:	6979      	ldr	r1, [r7, #20]
 8004caa:	69ba      	ldr	r2, [r7, #24]
 8004cac:	e841 2300 	strex	r3, r2, [r1]
 8004cb0:	613b      	str	r3, [r7, #16]
   return(result);
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1e6      	bne.n	8004c86 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	f003 0310 	and.w	r3, r3, #16
 8004cc2:	2b10      	cmp	r3, #16
 8004cc4:	d103      	bne.n	8004cce <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2210      	movs	r2, #16
 8004ccc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f7ff fa72 	bl	80041c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004cdc:	e00b      	b.n	8004cf6 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7fb ffdc 	bl	8000c9c <HAL_UART_RxCpltCallback>
}
 8004ce4:	e007      	b.n	8004cf6 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	699a      	ldr	r2, [r3, #24]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f042 0208 	orr.w	r2, r2, #8
 8004cf4:	619a      	str	r2, [r3, #24]
}
 8004cf6:	bf00      	nop
 8004cf8:	3758      	adds	r7, #88	; 0x58
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b083      	sub	sp, #12
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004d06:	bf00      	nop
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <Control_Init>:
 */

#include "control.h"

void Control_Init()
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	af00      	add	r7, sp, #0
	SP4T_SelectInput(0);
 8004d16:	2000      	movs	r0, #0
 8004d18:	f000 f808 	bl	8004d2c <SP4T_SelectInput>
	DPDT_SelectInput(0);
 8004d1c:	2000      	movs	r0, #0
 8004d1e:	f000 f855 	bl	8004dcc <DPDT_SelectInput>
	SetVarAtt();
 8004d22:	f000 f873 	bl	8004e0c <SetVarAtt>
}
 8004d26:	bf00      	nop
 8004d28:	bd80      	pop	{r7, pc}
	...

08004d2c <SP4T_SelectInput>:

void SP4T_SelectInput(uint8_t input)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	4603      	mov	r3, r0
 8004d34:	71fb      	strb	r3, [r7, #7]
	if(input<4)
 8004d36:	79fb      	ldrb	r3, [r7, #7]
 8004d38:	2b03      	cmp	r3, #3
 8004d3a:	d841      	bhi.n	8004dc0 <SP4T_SelectInput+0x94>
	{
		switch (input){
 8004d3c:	79fb      	ldrb	r3, [r7, #7]
 8004d3e:	2b03      	cmp	r3, #3
 8004d40:	d83e      	bhi.n	8004dc0 <SP4T_SelectInput+0x94>
 8004d42:	a201      	add	r2, pc, #4	; (adr r2, 8004d48 <SP4T_SelectInput+0x1c>)
 8004d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d48:	08004d59 	.word	0x08004d59
 8004d4c:	08004d73 	.word	0x08004d73
 8004d50:	08004d8d 	.word	0x08004d8d
 8004d54:	08004da7 	.word	0x08004da7
			case 0:		//P1 through
				HAL_GPIO_WritePin(RF_IN_CTRL_1_GPIO_Port, RF_IN_CTRL_1_Pin, GPIO_PIN_RESET);
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d62:	f7fc fd7f 	bl	8001864 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RF_IN_CTRL_2_GPIO_Port, RF_IN_CTRL_2_Pin, GPIO_PIN_SET);
 8004d66:	2201      	movs	r2, #1
 8004d68:	2140      	movs	r1, #64	; 0x40
 8004d6a:	4817      	ldr	r0, [pc, #92]	; (8004dc8 <SP4T_SelectInput+0x9c>)
 8004d6c:	f7fc fd7a 	bl	8001864 <HAL_GPIO_WritePin>
				break;
 8004d70:	e026      	b.n	8004dc0 <SP4T_SelectInput+0x94>
			case 1:		//P1 reflection
				HAL_GPIO_WritePin(RF_IN_CTRL_1_GPIO_Port, RF_IN_CTRL_1_Pin, GPIO_PIN_RESET);
 8004d72:	2200      	movs	r2, #0
 8004d74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d7c:	f7fc fd72 	bl	8001864 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RF_IN_CTRL_2_GPIO_Port, RF_IN_CTRL_2_Pin, GPIO_PIN_RESET);
 8004d80:	2200      	movs	r2, #0
 8004d82:	2140      	movs	r1, #64	; 0x40
 8004d84:	4810      	ldr	r0, [pc, #64]	; (8004dc8 <SP4T_SelectInput+0x9c>)
 8004d86:	f7fc fd6d 	bl	8001864 <HAL_GPIO_WritePin>
				break;
 8004d8a:	e019      	b.n	8004dc0 <SP4T_SelectInput+0x94>
			case 2:		//P2 through
				HAL_GPIO_WritePin(RF_IN_CTRL_1_GPIO_Port, RF_IN_CTRL_1_Pin, GPIO_PIN_SET);
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d96:	f7fc fd65 	bl	8001864 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RF_IN_CTRL_2_GPIO_Port, RF_IN_CTRL_2_Pin, GPIO_PIN_SET);
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	2140      	movs	r1, #64	; 0x40
 8004d9e:	480a      	ldr	r0, [pc, #40]	; (8004dc8 <SP4T_SelectInput+0x9c>)
 8004da0:	f7fc fd60 	bl	8001864 <HAL_GPIO_WritePin>
				break;
 8004da4:	e00c      	b.n	8004dc0 <SP4T_SelectInput+0x94>
			case 3: 	//P2 reflection
				HAL_GPIO_WritePin(RF_IN_CTRL_1_GPIO_Port, RF_IN_CTRL_1_Pin, GPIO_PIN_SET);
 8004da6:	2201      	movs	r2, #1
 8004da8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004dac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004db0:	f7fc fd58 	bl	8001864 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RF_IN_CTRL_2_GPIO_Port, RF_IN_CTRL_2_Pin, GPIO_PIN_RESET);
 8004db4:	2200      	movs	r2, #0
 8004db6:	2140      	movs	r1, #64	; 0x40
 8004db8:	4803      	ldr	r0, [pc, #12]	; (8004dc8 <SP4T_SelectInput+0x9c>)
 8004dba:	f7fc fd53 	bl	8001864 <HAL_GPIO_WritePin>
				break;
 8004dbe:	bf00      	nop
		}
	}
}
 8004dc0:	bf00      	nop
 8004dc2:	3708      	adds	r7, #8
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	48000400 	.word	0x48000400

08004dcc <DPDT_SelectInput>:

void DPDT_SelectInput(uint8_t input)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	71fb      	strb	r3, [r7, #7]
	if(input<2)
 8004dd6:	79fb      	ldrb	r3, [r7, #7]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d810      	bhi.n	8004dfe <DPDT_SelectInput+0x32>
	{
		switch (input) {
 8004ddc:	79fb      	ldrb	r3, [r7, #7]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d106      	bne.n	8004df0 <DPDT_SelectInput+0x24>
			case 0:
				HAL_GPIO_WritePin(RF_OUT_CTRL_GPIO_Port, RF_OUT_CTRL_Pin, GPIO_PIN_SET); // TX to PORT 1
 8004de2:	2201      	movs	r2, #1
 8004de4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004de8:	4807      	ldr	r0, [pc, #28]	; (8004e08 <DPDT_SelectInput+0x3c>)
 8004dea:	f7fc fd3b 	bl	8001864 <HAL_GPIO_WritePin>
				break;
 8004dee:	e007      	b.n	8004e00 <DPDT_SelectInput+0x34>
			default:
				HAL_GPIO_WritePin(RF_OUT_CTRL_GPIO_Port, RF_OUT_CTRL_Pin, GPIO_PIN_RESET);
 8004df0:	2200      	movs	r2, #0
 8004df2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004df6:	4804      	ldr	r0, [pc, #16]	; (8004e08 <DPDT_SelectInput+0x3c>)
 8004df8:	f7fc fd34 	bl	8001864 <HAL_GPIO_WritePin>
				break;
 8004dfc:	e000      	b.n	8004e00 <DPDT_SelectInput+0x34>
		}
	}
 8004dfe:	bf00      	nop
}
 8004e00:	bf00      	nop
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	48000400 	.word	0x48000400

08004e0c <SetVarAtt>:

void SetVarAtt()
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RX_ATT_GPIO_Port, RX_ATT_Pin, GPIO_PIN_RESET);
 8004e10:	2200      	movs	r2, #0
 8004e12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e1a:	f7fc fd23 	bl	8001864 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TX_ATT_GPIO_Port, TX_ATT_Pin, GPIO_PIN_RESET);
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e24:	480a      	ldr	r0, [pc, #40]	; (8004e50 <SetVarAtt+0x44>)
 8004e26:	f7fc fd1d 	bl	8001864 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8004e2a:	200a      	movs	r0, #10
 8004e2c:	f7fc f9fe 	bl	800122c <HAL_Delay>
	HAL_GPIO_WritePin(RX_ATT_GPIO_Port, RX_ATT_Pin, GPIO_PIN_SET);
 8004e30:	2201      	movs	r2, #1
 8004e32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e3a:	f7fc fd13 	bl	8001864 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TX_ATT_GPIO_Port, TX_ATT_Pin, GPIO_PIN_SET);
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e44:	4802      	ldr	r0, [pc, #8]	; (8004e50 <SetVarAtt+0x44>)
 8004e46:	f7fc fd0d 	bl	8001864 <HAL_GPIO_WritePin>
}
 8004e4a:	bf00      	nop
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	48000400 	.word	0x48000400

08004e54 <Si446x_Init>:
 *      Author: balaz
 */
#include "si446x.h"

void Si446x_Init(si446x_t* radio, GPIO_TypeDef* NSEL_Port, uint16_t NSEL_Pin, GPIO_TypeDef* SDN_Port, uint16_t SDN_Pin, SPI_HandleTypeDef* hspi, uint32_t xtal_freq, modtype modulation)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	603b      	str	r3, [r7, #0]
 8004e60:	4613      	mov	r3, r2
 8004e62:	80fb      	strh	r3, [r7, #6]
	radio->NSEL_Pin = NSEL_Pin;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	88fa      	ldrh	r2, [r7, #6]
 8004e68:	809a      	strh	r2, [r3, #4]
	radio->NSEL_Port = NSEL_Port;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	601a      	str	r2, [r3, #0]
	radio->SDN_Pin = SDN_Pin;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	8b3a      	ldrh	r2, [r7, #24]
 8004e74:	819a      	strh	r2, [r3, #12]
	radio->SDN_Port = SDN_Port;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	683a      	ldr	r2, [r7, #0]
 8004e7a:	609a      	str	r2, [r3, #8]
	radio->hspi = hspi;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	69fa      	ldr	r2, [r7, #28]
 8004e80:	611a      	str	r2, [r3, #16]
	radio->xtal_freq = xtal_freq;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6a3a      	ldr	r2, [r7, #32]
 8004e86:	615a      	str	r2, [r3, #20]
	radio->channel = 0;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	761a      	strb	r2, [r3, #24]
	radio->modulation = modulation;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004e94:	765a      	strb	r2, [r3, #25]
	radio->band = RADIO_BAND_900;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	769a      	strb	r2, [r3, #26]
	radio->outdiv = 4;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2204      	movs	r2, #4
 8004ea0:	76da      	strb	r2, [r3, #27]

	HAL_GPIO_WritePin(radio->SDN_Port, radio->SDN_Pin, GPIO_PIN_SET); 		//SDN UP
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6898      	ldr	r0, [r3, #8]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	899b      	ldrh	r3, [r3, #12]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	4619      	mov	r1, r3
 8004eae:	f7fc fcd9 	bl	8001864 <HAL_GPIO_WritePin>
	HAL_Delay(1);															// wait >300us
 8004eb2:	2001      	movs	r0, #1
 8004eb4:	f7fc f9ba 	bl	800122c <HAL_Delay>
	HAL_GPIO_WritePin(radio->SDN_Port, radio->SDN_Pin, GPIO_PIN_RESET); 	//SDN UP
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6898      	ldr	r0, [r3, #8]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	899b      	ldrh	r3, [r3, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	f7fc fcce 	bl	8001864 <HAL_GPIO_WritePin>

	HAL_Delay(6); //POR
 8004ec8:	2006      	movs	r0, #6
 8004eca:	f7fc f9af 	bl	800122c <HAL_Delay>

	Si446x_PowerUp(radio);
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f000 f906 	bl	80050e0 <Si446x_PowerUp>

	Si446x_ClearAllIT(radio);
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f000 f8df 	bl	8005098 <Si446x_ClearAllIT>

	Si446x_WaitForCTS(radio);
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f000 f87f 	bl	8004fde <Si446x_WaitForCTS>

	Si446x_SetModulationType(radio);
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 f932 	bl	800514a <Si446x_SetModulationType>
	Si446x_SetPowerLevel(radio, 50);
 8004ee6:	2132      	movs	r1, #50	; 0x32
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 fc6f 	bl	80057cc <Si446x_SetPowerLevel>
//	Si446x_SetRSSIComp(radio, 35);
	Si446x_SetRSSILatch(radio);
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f000 fd5e 	bl	80059b0 <Si446x_SetRSSILatch>
	Si446x_SetXOTune(radio);
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f000 fd81 	bl	80059fc <Si446x_SetXOTune>
}
 8004efa:	bf00      	nop
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <Si446x_SPI_Select>:

void Si446x_SPI_Select(const si446x_t* radio)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b082      	sub	sp, #8
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(radio->NSEL_Port, radio->NSEL_Pin, GPIO_PIN_RESET);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6818      	ldr	r0, [r3, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	889b      	ldrh	r3, [r3, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	4619      	mov	r1, r3
 8004f16:	f7fc fca5 	bl	8001864 <HAL_GPIO_WritePin>
}
 8004f1a:	bf00      	nop
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <Si446x_SPI_Deselect>:

void Si446x_SPI_Deselect(const si446x_t* radio)
{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b082      	sub	sp, #8
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(radio->NSEL_Port, radio->NSEL_Pin, GPIO_PIN_SET);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6818      	ldr	r0, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	889b      	ldrh	r3, [r3, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	4619      	mov	r1, r3
 8004f36:	f7fc fc95 	bl	8001864 <HAL_GPIO_WritePin>
}
 8004f3a:	bf00      	nop
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <Si446x_SPI_TransmitData>:

void Si446x_SPI_TransmitData(const si446x_t* radio, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b084      	sub	sp, #16
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	60f8      	str	r0, [r7, #12]
 8004f4a:	60b9      	str	r1, [r7, #8]
 8004f4c:	603b      	str	r3, [r7, #0]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Transmit(radio->hspi, pData, Size, Timeout);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6918      	ldr	r0, [r3, #16]
 8004f56:	88fa      	ldrh	r2, [r7, #6]
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	68b9      	ldr	r1, [r7, #8]
 8004f5c:	f7fd fe9f 	bl	8002c9e <HAL_SPI_Transmit>
}
 8004f60:	bf00      	nop
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <Si446x_SPI_ReceiveData>:

void Si446x_SPI_ReceiveData(const si446x_t* radio, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	603b      	str	r3, [r7, #0]
 8004f74:	4613      	mov	r3, r2
 8004f76:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Receive(radio->hspi, pData, Size, Timeout);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6918      	ldr	r0, [r3, #16]
 8004f7c:	88fa      	ldrh	r2, [r7, #6]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68b9      	ldr	r1, [r7, #8]
 8004f82:	f7fd fffa 	bl	8002f7a <HAL_SPI_Receive>
}
 8004f86:	bf00      	nop
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <Si446x_PollCTS>:
{
	HAL_SPI_TransmitReceive(radio->hspi, pTxData, pRxData, Size, Timeout);
}

uint8_t Si446x_PollCTS(const si446x_t* radio)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b084      	sub	sp, #16
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
	uint8_t command[] = {READ_CMD_BUFF};
 8004f96:	2344      	movs	r3, #68	; 0x44
 8004f98:	733b      	strb	r3, [r7, #12]
	uint8_t buffer = 0;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	72fb      	strb	r3, [r7, #11]
	Si446x_SPI_Select(radio);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7ff ffaf 	bl	8004f02 <Si446x_SPI_Select>
//	Si446x_SPI_TransmitReceiveData(radio, command, &buffer, 2, RADIO_SPI_MAX_DELAY);
	Si446x_SPI_TransmitData(radio, command, 1, RADIO_SPI_MAX_DELAY);
 8004fa4:	f107 010c 	add.w	r1, r7, #12
 8004fa8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004fac:	2201      	movs	r2, #1
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7ff ffc7 	bl	8004f42 <Si446x_SPI_TransmitData>
	Si446x_SPI_ReceiveData(radio, &buffer, 1, RADIO_SPI_MAX_DELAY);
 8004fb4:	f107 010b 	add.w	r1, r7, #11
 8004fb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f7ff ffd2 	bl	8004f68 <Si446x_SPI_ReceiveData>
	Si446x_SPI_Deselect(radio);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7ff ffac 	bl	8004f22 <Si446x_SPI_Deselect>
	if(buffer == 0xFF)
 8004fca:	7afb      	ldrb	r3, [r7, #11]
 8004fcc:	2bff      	cmp	r3, #255	; 0xff
 8004fce:	d101      	bne.n	8004fd4 <Si446x_PollCTS+0x46>
	{
		return 1; //azaz CTS
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e000      	b.n	8004fd6 <Si446x_PollCTS+0x48>
	}
	else
	{

		return 0;
 8004fd4:	2300      	movs	r3, #0
	}

}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <Si446x_WaitForCTS>:

uint8_t Si446x_WaitForCTS(const si446x_t* radio)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b084      	sub	sp, #16
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
	while(!Si446x_PollCTS(radio))
 8004fe6:	e009      	b.n	8004ffc <Si446x_WaitForCTS+0x1e>
	{
		for (int i = 0; i < 7200; i++)
 8004fe8:	2300      	movs	r3, #0
 8004fea:	60fb      	str	r3, [r7, #12]
 8004fec:	e002      	b.n	8004ff4 <Si446x_WaitForCTS+0x16>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8004ffa:	dbf8      	blt.n	8004fee <Si446x_WaitForCTS+0x10>
	while(!Si446x_PollCTS(radio))
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f7ff ffc6 	bl	8004f8e <Si446x_PollCTS>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d0ef      	beq.n	8004fe8 <Si446x_WaitForCTS+0xa>
		{

		}
	}
	return 1;
 8005008:	2301      	movs	r3, #1
}
 800500a:	4618      	mov	r0, r3
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <Si446x_ReadCommandBuffer>:

void Si446x_ReadCommandBuffer(const si446x_t* radio, uint8_t* stream_buffer, uint8_t stream_len)
{
 8005012:	b580      	push	{r7, lr}
 8005014:	b086      	sub	sp, #24
 8005016:	af00      	add	r7, sp, #0
 8005018:	60f8      	str	r0, [r7, #12]
 800501a:	60b9      	str	r1, [r7, #8]
 800501c:	4613      	mov	r3, r2
 800501e:	71fb      	strb	r3, [r7, #7]
	uint8_t command = READ_CMD_BUFF;
 8005020:	2344      	movs	r3, #68	; 0x44
 8005022:	74fb      	strb	r3, [r7, #19]
	uint8_t buffer = 0;
 8005024:	2300      	movs	r3, #0
 8005026:	74bb      	strb	r3, [r7, #18]

	for(int i=0; i<stream_len; i++)
 8005028:	2300      	movs	r3, #0
 800502a:	617b      	str	r3, [r7, #20]
 800502c:	e007      	b.n	800503e <Si446x_ReadCommandBuffer+0x2c>
	{
		stream_buffer[i] = 0;
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	4413      	add	r3, r2
 8005034:	2200      	movs	r2, #0
 8005036:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<stream_len; i++)
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	3301      	adds	r3, #1
 800503c:	617b      	str	r3, [r7, #20]
 800503e:	79fb      	ldrb	r3, [r7, #7]
 8005040:	697a      	ldr	r2, [r7, #20]
 8005042:	429a      	cmp	r2, r3
 8005044:	dbf3      	blt.n	800502e <Si446x_ReadCommandBuffer+0x1c>
	}

	while(buffer != 0xFF)
 8005046:	e015      	b.n	8005074 <Si446x_ReadCommandBuffer+0x62>
	{
		Si446x_SPI_Deselect(radio);
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f7ff ff6a 	bl	8004f22 <Si446x_SPI_Deselect>
		Si446x_SPI_Select(radio);
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f7ff ff57 	bl	8004f02 <Si446x_SPI_Select>
		Si446x_SPI_TransmitData(radio, &command, 1, RADIO_SPI_MAX_DELAY);
 8005054:	f107 0113 	add.w	r1, r7, #19
 8005058:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800505c:	2201      	movs	r2, #1
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f7ff ff6f 	bl	8004f42 <Si446x_SPI_TransmitData>
		Si446x_SPI_ReceiveData(radio, &buffer, 1, RADIO_SPI_MAX_DELAY);
 8005064:	f107 0112 	add.w	r1, r7, #18
 8005068:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800506c:	2201      	movs	r2, #1
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f7ff ff7a 	bl	8004f68 <Si446x_SPI_ReceiveData>
	while(buffer != 0xFF)
 8005074:	7cbb      	ldrb	r3, [r7, #18]
 8005076:	2bff      	cmp	r3, #255	; 0xff
 8005078:	d1e6      	bne.n	8005048 <Si446x_ReadCommandBuffer+0x36>
	}

	Si446x_SPI_ReceiveData(radio, stream_buffer, stream_len, RADIO_SPI_MAX_DELAY);
 800507a:	79fb      	ldrb	r3, [r7, #7]
 800507c:	b29a      	uxth	r2, r3
 800507e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005082:	68b9      	ldr	r1, [r7, #8]
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f7ff ff6f 	bl	8004f68 <Si446x_SPI_ReceiveData>
	Si446x_SPI_Deselect(radio);
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f7ff ff49 	bl	8004f22 <Si446x_SPI_Deselect>
}
 8005090:	bf00      	nop
 8005092:	3718      	adds	r7, #24
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <Si446x_ClearAllIT>:
		Si446x_SPI_Deselect(radio);
	}
}

void Si446x_ClearAllIT(const si446x_t* radio)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
	uint8_t command[] = {	GET_INT_STATUS,
 80050a0:	2320      	movs	r3, #32
 80050a2:	733b      	strb	r3, [r7, #12]
 80050a4:	2300      	movs	r3, #0
 80050a6:	737b      	strb	r3, [r7, #13]
 80050a8:	2300      	movs	r3, #0
 80050aa:	73bb      	strb	r3, [r7, #14]
 80050ac:	2300      	movs	r3, #0
 80050ae:	73fb      	strb	r3, [r7, #15]
							0x00,
							0x00,
							0x00
	};

	if(Si446x_WaitForCTS(radio))
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f7ff ff94 	bl	8004fde <Si446x_WaitForCTS>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00d      	beq.n	80050d8 <Si446x_ClearAllIT+0x40>
	{
		Si446x_SPI_Select(radio);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f7ff ff20 	bl	8004f02 <Si446x_SPI_Select>
		Si446x_SPI_TransmitData(radio, command, 4, RADIO_SPI_MAX_DELAY);
 80050c2:	f107 010c 	add.w	r1, r7, #12
 80050c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050ca:	2204      	movs	r2, #4
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f7ff ff38 	bl	8004f42 <Si446x_SPI_TransmitData>
		Si446x_SPI_Deselect(radio);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f7ff ff25 	bl	8004f22 <Si446x_SPI_Deselect>
	}
}
 80050d8:	bf00      	nop
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <Si446x_PowerUp>:

	Si446x_ReadCommandBuffer(radio, stream, 2);
}

void Si446x_PowerUp(const si446x_t* radio)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]

	uint8_t command[] = {POWER_UP_CMD, BOOT_OPTIONS, XTAL_OPTIONS,
 80050e8:	2302      	movs	r3, #2
 80050ea:	723b      	strb	r3, [r7, #8]
 80050ec:	2301      	movs	r3, #1
 80050ee:	727b      	strb	r3, [r7, #9]
 80050f0:	2300      	movs	r3, #0
 80050f2:	72bb      	strb	r3, [r7, #10]
			(radio->xtal_freq & 0xff000000)>>24,
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	695b      	ldr	r3, [r3, #20]
 80050f8:	0e1b      	lsrs	r3, r3, #24
	uint8_t command[] = {POWER_UP_CMD, BOOT_OPTIONS, XTAL_OPTIONS,
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	72fb      	strb	r3, [r7, #11]
			(radio->xtal_freq & 0x00ff0000)>>16,
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	0c1b      	lsrs	r3, r3, #16
	uint8_t command[] = {POWER_UP_CMD, BOOT_OPTIONS, XTAL_OPTIONS,
 8005104:	b2db      	uxtb	r3, r3
 8005106:	733b      	strb	r3, [r7, #12]
			(radio->xtal_freq & 0x0000ff00)>>8,
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	695b      	ldr	r3, [r3, #20]
 800510c:	0a1b      	lsrs	r3, r3, #8
	uint8_t command[] = {POWER_UP_CMD, BOOT_OPTIONS, XTAL_OPTIONS,
 800510e:	b2db      	uxtb	r3, r3
 8005110:	737b      	strb	r3, [r7, #13]
			(radio->xtal_freq & 0x000000ff)};
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	695b      	ldr	r3, [r3, #20]
	uint8_t command[] = {POWER_UP_CMD, BOOT_OPTIONS, XTAL_OPTIONS,
 8005116:	b2db      	uxtb	r3, r3
 8005118:	73bb      	strb	r3, [r7, #14]

	if(Si446x_WaitForCTS(radio))
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f7ff ff5f 	bl	8004fde <Si446x_WaitForCTS>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00d      	beq.n	8005142 <Si446x_PowerUp+0x62>
	{
		Si446x_SPI_Select(radio);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7ff feeb 	bl	8004f02 <Si446x_SPI_Select>
		Si446x_SPI_TransmitData(radio, command, 7, RADIO_SPI_MAX_DELAY);
 800512c:	f107 0108 	add.w	r1, r7, #8
 8005130:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005134:	2207      	movs	r2, #7
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7ff ff03 	bl	8004f42 <Si446x_SPI_TransmitData>
		Si446x_SPI_Deselect(radio);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f7ff fef0 	bl	8004f22 <Si446x_SPI_Deselect>
	}
}
 8005142:	bf00      	nop
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <Si446x_SetModulationType>:

void Si446x_SetModulationType(const si446x_t* radio)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b084      	sub	sp, #16
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
	uint8_t command[] = {	SET_PROPERTY_CMD,
 8005152:	2311      	movs	r3, #17
 8005154:	723b      	strb	r3, [r7, #8]
 8005156:	2320      	movs	r3, #32
 8005158:	727b      	strb	r3, [r7, #9]
 800515a:	2301      	movs	r3, #1
 800515c:	72bb      	strb	r3, [r7, #10]
 800515e:	2300      	movs	r3, #0
 8005160:	72fb      	strb	r3, [r7, #11]
							MODEM_MOD_TYPE_GROUP,
							1,
							MODEM_MOD_TYPE_INDEX,
							radio->modulation,
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	7e5b      	ldrb	r3, [r3, #25]
	uint8_t command[] = {	SET_PROPERTY_CMD,
 8005166:	733b      	strb	r3, [r7, #12]
					  	 };

	if(Si446x_WaitForCTS(radio))
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f7ff ff38 	bl	8004fde <Si446x_WaitForCTS>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00d      	beq.n	8005190 <Si446x_SetModulationType+0x46>
	{
		Si446x_SPI_Select(radio);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f7ff fec4 	bl	8004f02 <Si446x_SPI_Select>
		Si446x_SPI_TransmitData(radio, command, 5, RADIO_SPI_MAX_DELAY);
 800517a:	f107 0108 	add.w	r1, r7, #8
 800517e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005182:	2205      	movs	r2, #5
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f7ff fedc 	bl	8004f42 <Si446x_SPI_TransmitData>
		Si446x_SPI_Deselect(radio);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7ff fec9 	bl	8004f22 <Si446x_SPI_Deselect>
	}
}
 8005190:	bf00      	nop
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <Si446x_GetModulationType>:

modtype Si446x_GetModulationType(const si446x_t* radio)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b088      	sub	sp, #32
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]

	uint8_t stream[16] = {0xA5};
 80051a0:	f107 0310 	add.w	r3, r7, #16
 80051a4:	2200      	movs	r2, #0
 80051a6:	601a      	str	r2, [r3, #0]
 80051a8:	605a      	str	r2, [r3, #4]
 80051aa:	609a      	str	r2, [r3, #8]
 80051ac:	60da      	str	r2, [r3, #12]
 80051ae:	23a5      	movs	r3, #165	; 0xa5
 80051b0:	743b      	strb	r3, [r7, #16]

	memset(stream,0xa5,16);
 80051b2:	f107 0310 	add.w	r3, r7, #16
 80051b6:	2210      	movs	r2, #16
 80051b8:	21a5      	movs	r1, #165	; 0xa5
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 fd44 	bl	8005c48 <memset>

	uint8_t command[] = {	GET_PROPERTY_CMD,
 80051c0:	4b22      	ldr	r3, [pc, #136]	; (800524c <Si446x_GetModulationType+0xb4>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	60fb      	str	r3, [r7, #12]
							1,
							MODEM_MOD_TYPE_INDEX
					  	};


	if(Si446x_WaitForCTS(radio))
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f7ff ff09 	bl	8004fde <Si446x_WaitForCTS>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00d      	beq.n	80051ee <Si446x_GetModulationType+0x56>
	{
		Si446x_SPI_Select(radio);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f7ff fe95 	bl	8004f02 <Si446x_SPI_Select>
		Si446x_SPI_TransmitData(radio, command, 4, RADIO_SPI_MAX_DELAY);
 80051d8:	f107 010c 	add.w	r1, r7, #12
 80051dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051e0:	2204      	movs	r2, #4
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f7ff fead 	bl	8004f42 <Si446x_SPI_TransmitData>
		Si446x_SPI_Deselect(radio);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f7ff fe9a 	bl	8004f22 <Si446x_SPI_Deselect>
 	}

	Si446x_ReadCommandBuffer(radio, stream, 16);
 80051ee:	f107 0310 	add.w	r3, r7, #16
 80051f2:	2210      	movs	r2, #16
 80051f4:	4619      	mov	r1, r3
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f7ff ff0b 	bl	8005012 <Si446x_ReadCommandBuffer>

	Si446x_SPI_Deselect(radio);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f7ff fe90 	bl	8004f22 <Si446x_SPI_Deselect>

	switch (stream[0]) {
 8005202:	7c3b      	ldrb	r3, [r7, #16]
 8005204:	2b05      	cmp	r3, #5
 8005206:	d81b      	bhi.n	8005240 <Si446x_GetModulationType+0xa8>
 8005208:	a201      	add	r2, pc, #4	; (adr r2, 8005210 <Si446x_GetModulationType+0x78>)
 800520a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520e:	bf00      	nop
 8005210:	08005229 	.word	0x08005229
 8005214:	0800522d 	.word	0x0800522d
 8005218:	08005231 	.word	0x08005231
 800521c:	08005235 	.word	0x08005235
 8005220:	08005239 	.word	0x08005239
 8005224:	0800523d 	.word	0x0800523d
		case 0:
			return CW;
 8005228:	2300      	movs	r3, #0
 800522a:	e00a      	b.n	8005242 <Si446x_GetModulationType+0xaa>
		case 1:
			return OOK;
 800522c:	2301      	movs	r3, #1
 800522e:	e008      	b.n	8005242 <Si446x_GetModulationType+0xaa>
		case 2:
			return _2FSK;
 8005230:	2302      	movs	r3, #2
 8005232:	e006      	b.n	8005242 <Si446x_GetModulationType+0xaa>
		case 3:
			return _2GFSK;
 8005234:	2303      	movs	r3, #3
 8005236:	e004      	b.n	8005242 <Si446x_GetModulationType+0xaa>
		case 4:
			return _4FSK;
 8005238:	2304      	movs	r3, #4
 800523a:	e002      	b.n	8005242 <Si446x_GetModulationType+0xaa>
		case 5:
			return _4GFSK;
 800523c:	2305      	movs	r3, #5
 800523e:	e000      	b.n	8005242 <Si446x_GetModulationType+0xaa>
		default:
			return _2FSK;
 8005240:	2302      	movs	r3, #2
	}
}
 8005242:	4618      	mov	r0, r3
 8005244:	3720      	adds	r7, #32
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	08005c70 	.word	0x08005c70

08005250 <Si446x_SetFrequency>:

void Si446x_SetFrequency(si446x_t* radio, uint32_t freq)
{
 8005250:	b5b0      	push	{r4, r5, r7, lr}
 8005252:	b08a      	sub	sp, #40	; 0x28
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
	//3600/div
	// value:	 0		1 		2		3	 	4	 	5	 	6	 	7
	//	div		 4		6 		8 		12 		16 		24		24		24
	// freq		 900	600		450		300		225		150		150		150

	uint8_t INTE = 0;
 800525a:	2300      	movs	r3, #0
 800525c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t FRAC = 0;
 8005260:	2300      	movs	r3, #0
 8005262:	623b      	str	r3, [r7, #32]

	band current_band = Si446x_SetBand(radio, freq);
 8005264:	6839      	ldr	r1, [r7, #0]
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f936 	bl	80054d8 <Si446x_SetBand>
 800526c:	4603      	mov	r3, r0
 800526e:	77fb      	strb	r3, [r7, #31]
	current_band = Si446x_GetBand(radio);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 fa61 	bl	8005738 <Si446x_GetBand>
 8005276:	4603      	mov	r3, r0
 8005278:	77fb      	strb	r3, [r7, #31]
	uint32_t right_element = NPRESC*radio->xtal_freq/radio->outdiv;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	005b      	lsls	r3, r3, #1
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	7ed2      	ldrb	r2, [r2, #27]
 8005284:	fbb3 f3f2 	udiv	r3, r3, r2
 8005288:	61bb      	str	r3, [r7, #24]



	//INTE = 56; //((freq/(radio->xtal_freq/1000000))*(radio->outdiv/NPRESC)-1) & 0x7F;
	INTE = (freq/right_element-1) & 0x7F;
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005292:	b2db      	uxtb	r3, r3
 8005294:	3b01      	subs	r3, #1
 8005296:	b2db      	uxtb	r3, r3
 8005298:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800529c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	//FRAC = 978671; //((freq/(radio->xtal_freq/1000000)*(radio->outdiv/NPRESC)-INTE)*pow(2,19)) & 0x0FFFFF;
	FRAC = (((double)freq/(double)right_element)-(double)INTE)*pow(2,19)+1;
 80052a0:	6838      	ldr	r0, [r7, #0]
 80052a2:	f7fb f8d3 	bl	800044c <__aeabi_ui2d>
 80052a6:	4604      	mov	r4, r0
 80052a8:	460d      	mov	r5, r1
 80052aa:	69b8      	ldr	r0, [r7, #24]
 80052ac:	f7fb f8ce 	bl	800044c <__aeabi_ui2d>
 80052b0:	4602      	mov	r2, r0
 80052b2:	460b      	mov	r3, r1
 80052b4:	4620      	mov	r0, r4
 80052b6:	4629      	mov	r1, r5
 80052b8:	f7fb fa6c 	bl	8000794 <__aeabi_ddiv>
 80052bc:	4603      	mov	r3, r0
 80052be:	460c      	mov	r4, r1
 80052c0:	4625      	mov	r5, r4
 80052c2:	461c      	mov	r4, r3
 80052c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7fb f8bf 	bl	800044c <__aeabi_ui2d>
 80052ce:	4602      	mov	r2, r0
 80052d0:	460b      	mov	r3, r1
 80052d2:	4620      	mov	r0, r4
 80052d4:	4629      	mov	r1, r5
 80052d6:	f7fa ff7b 	bl	80001d0 <__aeabi_dsub>
 80052da:	4603      	mov	r3, r0
 80052dc:	460c      	mov	r4, r1
 80052de:	4618      	mov	r0, r3
 80052e0:	4621      	mov	r1, r4
 80052e2:	f04f 0200 	mov.w	r2, #0
 80052e6:	4b35      	ldr	r3, [pc, #212]	; (80053bc <Si446x_SetFrequency+0x16c>)
 80052e8:	f7fb f92a 	bl	8000540 <__aeabi_dmul>
 80052ec:	4603      	mov	r3, r0
 80052ee:	460c      	mov	r4, r1
 80052f0:	4618      	mov	r0, r3
 80052f2:	4621      	mov	r1, r4
 80052f4:	f04f 0200 	mov.w	r2, #0
 80052f8:	4b31      	ldr	r3, [pc, #196]	; (80053c0 <Si446x_SetFrequency+0x170>)
 80052fa:	f7fa ff6b 	bl	80001d4 <__adddf3>
 80052fe:	4603      	mov	r3, r0
 8005300:	460c      	mov	r4, r1
 8005302:	4618      	mov	r0, r3
 8005304:	4621      	mov	r1, r4
 8005306:	f7fb fb2d 	bl	8000964 <__aeabi_d2uiz>
 800530a:	4603      	mov	r3, r0
 800530c:	623b      	str	r3, [r7, #32]

	uint8_t command_inte[] = {	SET_PROPERTY_CMD,
 800530e:	2311      	movs	r3, #17
 8005310:	743b      	strb	r3, [r7, #16]
 8005312:	2340      	movs	r3, #64	; 0x40
 8005314:	747b      	strb	r3, [r7, #17]
 8005316:	2301      	movs	r3, #1
 8005318:	74bb      	strb	r3, [r7, #18]
 800531a:	2300      	movs	r3, #0
 800531c:	74fb      	strb	r3, [r7, #19]
 800531e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005322:	753b      	strb	r3, [r7, #20]
								1,
								FREQ_CONTROL_INTE_INDEX,
								INTE
	};

	uint8_t command_frac[] = {	SET_PROPERTY_CMD,
 8005324:	2311      	movs	r3, #17
 8005326:	723b      	strb	r3, [r7, #8]
 8005328:	2340      	movs	r3, #64	; 0x40
 800532a:	727b      	strb	r3, [r7, #9]
 800532c:	2303      	movs	r3, #3
 800532e:	72bb      	strb	r3, [r7, #10]
 8005330:	2301      	movs	r3, #1
 8005332:	72fb      	strb	r3, [r7, #11]
								FREQ_CONTROL_FRAC_GROUP,
								3,
								FREQ_CONTROL_FRAC_INDEX,
								(FRAC & 0x0F0000) >> 16,
 8005334:	6a3b      	ldr	r3, [r7, #32]
 8005336:	0c1b      	lsrs	r3, r3, #16
 8005338:	b2db      	uxtb	r3, r3
 800533a:	f003 030f 	and.w	r3, r3, #15
 800533e:	b2db      	uxtb	r3, r3
	uint8_t command_frac[] = {	SET_PROPERTY_CMD,
 8005340:	733b      	strb	r3, [r7, #12]
								(FRAC & 0x00FF00) >> 8,
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	0a1b      	lsrs	r3, r3, #8
	uint8_t command_frac[] = {	SET_PROPERTY_CMD,
 8005346:	b2db      	uxtb	r3, r3
 8005348:	737b      	strb	r3, [r7, #13]
 800534a:	6a3b      	ldr	r3, [r7, #32]
 800534c:	b2db      	uxtb	r3, r3
 800534e:	73bb      	strb	r3, [r7, #14]
								(FRAC & 0x0000FF),
								};

	if(current_band != NO_BAND)
 8005350:	7ffb      	ldrb	r3, [r7, #31]
 8005352:	2b06      	cmp	r3, #6
 8005354:	d02d      	beq.n	80053b2 <Si446x_SetFrequency+0x162>
	{
		Si446x_SPI_Select(radio);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f7ff fdd3 	bl	8004f02 <Si446x_SPI_Select>

		if(Si446x_WaitForCTS(radio))
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f7ff fe3e 	bl	8004fde <Si446x_WaitForCTS>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00d      	beq.n	8005384 <Si446x_SetFrequency+0x134>
		{
			Si446x_SPI_Select(radio);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7ff fdca 	bl	8004f02 <Si446x_SPI_Select>
			Si446x_SPI_TransmitData(radio, command_inte, sizeof(command_inte), RADIO_SPI_MAX_DELAY);
 800536e:	f107 0110 	add.w	r1, r7, #16
 8005372:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005376:	2205      	movs	r2, #5
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f7ff fde2 	bl	8004f42 <Si446x_SPI_TransmitData>
			Si446x_SPI_Deselect(radio);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7ff fdcf 	bl	8004f22 <Si446x_SPI_Deselect>
		}

		if(Si446x_WaitForCTS(radio))
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f7ff fe2a 	bl	8004fde <Si446x_WaitForCTS>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00d      	beq.n	80053ac <Si446x_SetFrequency+0x15c>
		{
			Si446x_SPI_Select(radio);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f7ff fdb6 	bl	8004f02 <Si446x_SPI_Select>
			Si446x_SPI_TransmitData(radio, command_frac, sizeof(command_frac), RADIO_SPI_MAX_DELAY);
 8005396:	f107 0108 	add.w	r1, r7, #8
 800539a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800539e:	2207      	movs	r2, #7
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f7ff fdce 	bl	8004f42 <Si446x_SPI_TransmitData>
			Si446x_SPI_Deselect(radio);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f7ff fdbb 	bl	8004f22 <Si446x_SPI_Deselect>
		}

		Si446x_SPI_Deselect(radio);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f7ff fdb8 	bl	8004f22 <Si446x_SPI_Deselect>
	}

}
 80053b2:	bf00      	nop
 80053b4:	3728      	adds	r7, #40	; 0x28
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bdb0      	pop	{r4, r5, r7, pc}
 80053ba:	bf00      	nop
 80053bc:	41200000 	.word	0x41200000
 80053c0:	3ff00000 	.word	0x3ff00000

080053c4 <Si446x_GetFrequency>:

uint32_t Si446x_GetFrequency(const si446x_t* radio)
{
 80053c4:	b5b0      	push	{r4, r5, r7, lr}
 80053c6:	b088      	sub	sp, #32
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
	uint8_t buffer[4] = {0};
 80053cc:	2300      	movs	r3, #0
 80053ce:	617b      	str	r3, [r7, #20]

	uint8_t INTE = 0;
 80053d0:	2300      	movs	r3, #0
 80053d2:	77fb      	strb	r3, [r7, #31]
	uint32_t FRAC = 0;
 80053d4:	2300      	movs	r3, #0
 80053d6:	61bb      	str	r3, [r7, #24]

	uint8_t command_inte[] = {	GET_PROPERTY_CMD,
 80053d8:	4b3c      	ldr	r3, [pc, #240]	; (80054cc <Si446x_GetFrequency+0x108>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	613b      	str	r3, [r7, #16]
								FREQ_CONTROL_INTE_GROUP,
								1,
								FREQ_CONTROL_INTE_INDEX
							 };

	uint8_t command_frac[] = {	GET_PROPERTY_CMD,
 80053de:	4b3c      	ldr	r3, [pc, #240]	; (80054d0 <Si446x_GetFrequency+0x10c>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	60fb      	str	r3, [r7, #12]
								FREQ_CONTROL_FRAC_INDEX
								};



	if(Si446x_WaitForCTS(radio))
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f7ff fdfa 	bl	8004fde <Si446x_WaitForCTS>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00d      	beq.n	800540c <Si446x_GetFrequency+0x48>
	{
		Si446x_SPI_Select(radio);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f7ff fd86 	bl	8004f02 <Si446x_SPI_Select>
		Si446x_SPI_TransmitData(radio, command_inte, sizeof(command_inte), RADIO_SPI_MAX_DELAY);
 80053f6:	f107 0110 	add.w	r1, r7, #16
 80053fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80053fe:	2204      	movs	r2, #4
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f7ff fd9e 	bl	8004f42 <Si446x_SPI_TransmitData>
		Si446x_SPI_Deselect(radio);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7ff fd8b 	bl	8004f22 <Si446x_SPI_Deselect>
	}

	Si446x_ReadCommandBuffer(radio, buffer, 1);
 800540c:	f107 0314 	add.w	r3, r7, #20
 8005410:	2201      	movs	r2, #1
 8005412:	4619      	mov	r1, r3
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7ff fdfc 	bl	8005012 <Si446x_ReadCommandBuffer>

	INTE = buffer[0];
 800541a:	7d3b      	ldrb	r3, [r7, #20]
 800541c:	77fb      	strb	r3, [r7, #31]


	if(Si446x_WaitForCTS(radio))
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f7ff fddd 	bl	8004fde <Si446x_WaitForCTS>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00d      	beq.n	8005446 <Si446x_GetFrequency+0x82>
	{
		Si446x_SPI_Select(radio);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f7ff fd69 	bl	8004f02 <Si446x_SPI_Select>
		Si446x_SPI_TransmitData(radio, command_frac, sizeof(command_frac), RADIO_SPI_MAX_DELAY);
 8005430:	f107 010c 	add.w	r1, r7, #12
 8005434:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005438:	2204      	movs	r2, #4
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7ff fd81 	bl	8004f42 <Si446x_SPI_TransmitData>
		Si446x_SPI_Deselect(radio);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f7ff fd6e 	bl	8004f22 <Si446x_SPI_Deselect>
	}

	Si446x_ReadCommandBuffer(radio, buffer, 4);
 8005446:	f107 0314 	add.w	r3, r7, #20
 800544a:	2204      	movs	r2, #4
 800544c:	4619      	mov	r1, r3
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7ff fddf 	bl	8005012 <Si446x_ReadCommandBuffer>

	FRAC = buffer[2] + (buffer[1] << 8) + (buffer[0] << 16);
 8005454:	7dbb      	ldrb	r3, [r7, #22]
 8005456:	461a      	mov	r2, r3
 8005458:	7d7b      	ldrb	r3, [r7, #21]
 800545a:	021b      	lsls	r3, r3, #8
 800545c:	441a      	add	r2, r3
 800545e:	7d3b      	ldrb	r3, [r7, #20]
 8005460:	041b      	lsls	r3, r3, #16
 8005462:	4413      	add	r3, r2
 8005464:	61bb      	str	r3, [r7, #24]

	return (INTE+((double)FRAC/pow(2,19)))*(NPRESC*radio->xtal_freq/radio->outdiv);
 8005466:	7ffb      	ldrb	r3, [r7, #31]
 8005468:	4618      	mov	r0, r3
 800546a:	f7fa ffff 	bl	800046c <__aeabi_i2d>
 800546e:	4604      	mov	r4, r0
 8005470:	460d      	mov	r5, r1
 8005472:	69b8      	ldr	r0, [r7, #24]
 8005474:	f7fa ffea 	bl	800044c <__aeabi_ui2d>
 8005478:	f04f 0200 	mov.w	r2, #0
 800547c:	4b15      	ldr	r3, [pc, #84]	; (80054d4 <Si446x_GetFrequency+0x110>)
 800547e:	f7fb f989 	bl	8000794 <__aeabi_ddiv>
 8005482:	4602      	mov	r2, r0
 8005484:	460b      	mov	r3, r1
 8005486:	4620      	mov	r0, r4
 8005488:	4629      	mov	r1, r5
 800548a:	f7fa fea3 	bl	80001d4 <__adddf3>
 800548e:	4603      	mov	r3, r0
 8005490:	460c      	mov	r4, r1
 8005492:	4625      	mov	r5, r4
 8005494:	461c      	mov	r4, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	005b      	lsls	r3, r3, #1
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	7ed2      	ldrb	r2, [r2, #27]
 80054a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7fa ffd1 	bl	800044c <__aeabi_ui2d>
 80054aa:	4602      	mov	r2, r0
 80054ac:	460b      	mov	r3, r1
 80054ae:	4620      	mov	r0, r4
 80054b0:	4629      	mov	r1, r5
 80054b2:	f7fb f845 	bl	8000540 <__aeabi_dmul>
 80054b6:	4603      	mov	r3, r0
 80054b8:	460c      	mov	r4, r1
 80054ba:	4618      	mov	r0, r3
 80054bc:	4621      	mov	r1, r4
 80054be:	f7fb fa51 	bl	8000964 <__aeabi_d2uiz>
 80054c2:	4603      	mov	r3, r0

}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3720      	adds	r7, #32
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bdb0      	pop	{r4, r5, r7, pc}
 80054cc:	08005c74 	.word	0x08005c74
 80054d0:	08005c78 	.word	0x08005c78
 80054d4:	41200000 	.word	0x41200000

080054d8 <Si446x_SetBand>:

band Si446x_SetBand(si446x_t* radio, uint32_t freq)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b08e      	sub	sp, #56	; 0x38
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
	if(freq >= 119000000 && freq <= 159000000)
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	4a85      	ldr	r2, [pc, #532]	; (80056fc <Si446x_SetBand+0x224>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d927      	bls.n	800553a <Si446x_SetBand+0x62>
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	4a84      	ldr	r2, [pc, #528]	; (8005700 <Si446x_SetBand+0x228>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d823      	bhi.n	800553a <Si446x_SetBand+0x62>
	{
		uint8_t command[] = {	SET_PROPERTY_CMD,
 80054f2:	4a84      	ldr	r2, [pc, #528]	; (8005704 <Si446x_SetBand+0x22c>)
 80054f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80054f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80054fc:	6018      	str	r0, [r3, #0]
 80054fe:	3304      	adds	r3, #4
 8005500:	7019      	strb	r1, [r3, #0]
								MODEM_CLKGEN_BAND_GROUP,
								1,
								MODEM_CLKGEN_BAND_GROUP_INDEX,
								((HIGH_PERFORMANCE_MODE << 3) | RADIO_BAND_150)};

		radio->band = RADIO_BAND_150;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2205      	movs	r2, #5
 8005506:	769a      	strb	r2, [r3, #26]
		radio->outdiv = 24;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2218      	movs	r2, #24
 800550c:	76da      	strb	r2, [r3, #27]

		if(Si446x_WaitForCTS(radio))
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7ff fd65 	bl	8004fde <Si446x_WaitForCTS>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00d      	beq.n	8005536 <Si446x_SetBand+0x5e>
		{
			Si446x_SPI_Select(radio);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f7ff fcf1 	bl	8004f02 <Si446x_SPI_Select>
			Si446x_SPI_TransmitData(radio, command, 5, RADIO_SPI_MAX_DELAY);
 8005520:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8005524:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005528:	2205      	movs	r2, #5
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f7ff fd09 	bl	8004f42 <Si446x_SPI_TransmitData>
			Si446x_SPI_Deselect(radio);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f7ff fcf6 	bl	8004f22 <Si446x_SPI_Deselect>
		}

		return RADIO_BAND_150;
 8005536:	2305      	movs	r3, #5
 8005538:	e0dc      	b.n	80056f4 <Si446x_SetBand+0x21c>
	}
	if(freq >= 177000000 && freq <= 239000000)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	4a72      	ldr	r2, [pc, #456]	; (8005708 <Si446x_SetBand+0x230>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d927      	bls.n	8005592 <Si446x_SetBand+0xba>
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	4a71      	ldr	r2, [pc, #452]	; (800570c <Si446x_SetBand+0x234>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d823      	bhi.n	8005592 <Si446x_SetBand+0xba>
	{
		uint8_t command[] = {	SET_PROPERTY_CMD,
 800554a:	4a71      	ldr	r2, [pc, #452]	; (8005710 <Si446x_SetBand+0x238>)
 800554c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005550:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005554:	6018      	str	r0, [r3, #0]
 8005556:	3304      	adds	r3, #4
 8005558:	7019      	strb	r1, [r3, #0]
								MODEM_CLKGEN_BAND_GROUP,
								1,
								MODEM_CLKGEN_BAND_GROUP_INDEX,
								((HIGH_PERFORMANCE_MODE << 3) | RADIO_BAND_225)};

		radio->band = RADIO_BAND_225;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2204      	movs	r2, #4
 800555e:	769a      	strb	r2, [r3, #26]
		radio->outdiv = 16;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2210      	movs	r2, #16
 8005564:	76da      	strb	r2, [r3, #27]

		if(Si446x_WaitForCTS(radio))
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7ff fd39 	bl	8004fde <Si446x_WaitForCTS>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00d      	beq.n	800558e <Si446x_SetBand+0xb6>
		{
			Si446x_SPI_Select(radio);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7ff fcc5 	bl	8004f02 <Si446x_SPI_Select>
			Si446x_SPI_TransmitData(radio, command, 5, RADIO_SPI_MAX_DELAY);
 8005578:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800557c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005580:	2205      	movs	r2, #5
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f7ff fcdd 	bl	8004f42 <Si446x_SPI_TransmitData>
			Si446x_SPI_Deselect(radio);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f7ff fcca 	bl	8004f22 <Si446x_SPI_Deselect>
		}

		return RADIO_BAND_225;
 800558e:	2304      	movs	r3, #4
 8005590:	e0b0      	b.n	80056f4 <Si446x_SetBand+0x21c>
	}
	if(freq > 239000000 && freq <= 319000000)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	4a5d      	ldr	r2, [pc, #372]	; (800570c <Si446x_SetBand+0x234>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d927      	bls.n	80055ea <Si446x_SetBand+0x112>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	4a5d      	ldr	r2, [pc, #372]	; (8005714 <Si446x_SetBand+0x23c>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d823      	bhi.n	80055ea <Si446x_SetBand+0x112>
	{
		uint8_t command[] = {	SET_PROPERTY_CMD,
 80055a2:	4a5d      	ldr	r2, [pc, #372]	; (8005718 <Si446x_SetBand+0x240>)
 80055a4:	f107 0320 	add.w	r3, r7, #32
 80055a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80055ac:	6018      	str	r0, [r3, #0]
 80055ae:	3304      	adds	r3, #4
 80055b0:	7019      	strb	r1, [r3, #0]
								MODEM_CLKGEN_BAND_GROUP,
								1,
								MODEM_CLKGEN_BAND_GROUP_INDEX,
								((HIGH_PERFORMANCE_MODE << 3) | RADIO_BAND_300)};

		radio->band = RADIO_BAND_300;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2203      	movs	r2, #3
 80055b6:	769a      	strb	r2, [r3, #26]
		radio->outdiv = 12;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	220c      	movs	r2, #12
 80055bc:	76da      	strb	r2, [r3, #27]

		if(Si446x_WaitForCTS(radio))
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f7ff fd0d 	bl	8004fde <Si446x_WaitForCTS>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00d      	beq.n	80055e6 <Si446x_SetBand+0x10e>
		{
			Si446x_SPI_Select(radio);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7ff fc99 	bl	8004f02 <Si446x_SPI_Select>
			Si446x_SPI_TransmitData(radio, command, 5, RADIO_SPI_MAX_DELAY);
 80055d0:	f107 0120 	add.w	r1, r7, #32
 80055d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80055d8:	2205      	movs	r2, #5
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f7ff fcb1 	bl	8004f42 <Si446x_SPI_TransmitData>
			Si446x_SPI_Deselect(radio);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f7ff fc9e 	bl	8004f22 <Si446x_SPI_Deselect>
		}

		return RADIO_BAND_300;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e084      	b.n	80056f4 <Si446x_SetBand+0x21c>
	}
	if(freq >= 353000000 && freq <= 479000000)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	4a4b      	ldr	r2, [pc, #300]	; (800571c <Si446x_SetBand+0x244>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d927      	bls.n	8005642 <Si446x_SetBand+0x16a>
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	4a4a      	ldr	r2, [pc, #296]	; (8005720 <Si446x_SetBand+0x248>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d823      	bhi.n	8005642 <Si446x_SetBand+0x16a>
	{
		uint8_t command[] = {	SET_PROPERTY_CMD,
 80055fa:	4a4a      	ldr	r2, [pc, #296]	; (8005724 <Si446x_SetBand+0x24c>)
 80055fc:	f107 0318 	add.w	r3, r7, #24
 8005600:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005604:	6018      	str	r0, [r3, #0]
 8005606:	3304      	adds	r3, #4
 8005608:	7019      	strb	r1, [r3, #0]
								MODEM_CLKGEN_BAND_GROUP,
								1,
								MODEM_CLKGEN_BAND_GROUP_INDEX,
								((HIGH_PERFORMANCE_MODE << 3) | RADIO_BAND_450)};

		radio->band = RADIO_BAND_450;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2202      	movs	r2, #2
 800560e:	769a      	strb	r2, [r3, #26]
		radio->outdiv = 8;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2208      	movs	r2, #8
 8005614:	76da      	strb	r2, [r3, #27]

		if(Si446x_WaitForCTS(radio))
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7ff fce1 	bl	8004fde <Si446x_WaitForCTS>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00d      	beq.n	800563e <Si446x_SetBand+0x166>
		{
			Si446x_SPI_Select(radio);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7ff fc6d 	bl	8004f02 <Si446x_SPI_Select>
			Si446x_SPI_TransmitData(radio, command, 5, RADIO_SPI_MAX_DELAY);
 8005628:	f107 0118 	add.w	r1, r7, #24
 800562c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005630:	2205      	movs	r2, #5
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f7ff fc85 	bl	8004f42 <Si446x_SPI_TransmitData>
			Si446x_SPI_Deselect(radio);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f7ff fc72 	bl	8004f22 <Si446x_SPI_Deselect>
		}

		return RADIO_BAND_450;
 800563e:	2302      	movs	r3, #2
 8005640:	e058      	b.n	80056f4 <Si446x_SetBand+0x21c>
	}
	if(freq > 479000000 && freq < 705000000)
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	4a36      	ldr	r2, [pc, #216]	; (8005720 <Si446x_SetBand+0x248>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d927      	bls.n	800569a <Si446x_SetBand+0x1c2>
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	4a36      	ldr	r2, [pc, #216]	; (8005728 <Si446x_SetBand+0x250>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d823      	bhi.n	800569a <Si446x_SetBand+0x1c2>
	{

		uint8_t command[] = {	SET_PROPERTY_CMD,
 8005652:	4a36      	ldr	r2, [pc, #216]	; (800572c <Si446x_SetBand+0x254>)
 8005654:	f107 0310 	add.w	r3, r7, #16
 8005658:	e892 0003 	ldmia.w	r2, {r0, r1}
 800565c:	6018      	str	r0, [r3, #0]
 800565e:	3304      	adds	r3, #4
 8005660:	7019      	strb	r1, [r3, #0]
								MODEM_CLKGEN_BAND_GROUP_INDEX,
								((HIGH_PERFORMANCE_MODE << 3) | RADIO_BAND_600)};

		/* Not working, ERRATA */

		radio->band = NO_BAND;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2206      	movs	r2, #6
 8005666:	769a      	strb	r2, [r3, #26]
		radio->outdiv = 6;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2206      	movs	r2, #6
 800566c:	76da      	strb	r2, [r3, #27]


		if(Si446x_WaitForCTS(radio))
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7ff fcb5 	bl	8004fde <Si446x_WaitForCTS>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00d      	beq.n	8005696 <Si446x_SetBand+0x1be>
		{
			Si446x_SPI_Select(radio);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f7ff fc41 	bl	8004f02 <Si446x_SPI_Select>
			Si446x_SPI_TransmitData(radio, command, 5, RADIO_SPI_MAX_DELAY);
 8005680:	f107 0110 	add.w	r1, r7, #16
 8005684:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005688:	2205      	movs	r2, #5
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7ff fc59 	bl	8004f42 <Si446x_SPI_TransmitData>
			Si446x_SPI_Deselect(radio);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f7ff fc46 	bl	8004f22 <Si446x_SPI_Deselect>
		}


		return NO_BAND;
 8005696:	2306      	movs	r3, #6
 8005698:	e02c      	b.n	80056f4 <Si446x_SetBand+0x21c>
	}
	if(freq >= 705000000 && freq <= 960000000)
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	4a22      	ldr	r2, [pc, #136]	; (8005728 <Si446x_SetBand+0x250>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d927      	bls.n	80056f2 <Si446x_SetBand+0x21a>
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	4a22      	ldr	r2, [pc, #136]	; (8005730 <Si446x_SetBand+0x258>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d823      	bhi.n	80056f2 <Si446x_SetBand+0x21a>
	{
		uint8_t command[] = {	SET_PROPERTY_CMD,
 80056aa:	4a22      	ldr	r2, [pc, #136]	; (8005734 <Si446x_SetBand+0x25c>)
 80056ac:	f107 0308 	add.w	r3, r7, #8
 80056b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80056b4:	6018      	str	r0, [r3, #0]
 80056b6:	3304      	adds	r3, #4
 80056b8:	7019      	strb	r1, [r3, #0]
								MODEM_CLKGEN_BAND_GROUP,
								1,
								MODEM_CLKGEN_BAND_GROUP_INDEX,
								((HIGH_PERFORMANCE_MODE << 3) | RADIO_BAND_900)};

		radio->band = RADIO_BAND_900;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	769a      	strb	r2, [r3, #26]
		radio->outdiv = 4;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2204      	movs	r2, #4
 80056c4:	76da      	strb	r2, [r3, #27]

		if(Si446x_WaitForCTS(radio))
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f7ff fc89 	bl	8004fde <Si446x_WaitForCTS>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00d      	beq.n	80056ee <Si446x_SetBand+0x216>
		{
			Si446x_SPI_Select(radio);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7ff fc15 	bl	8004f02 <Si446x_SPI_Select>
			Si446x_SPI_TransmitData(radio, command, 5, RADIO_SPI_MAX_DELAY);
 80056d8:	f107 0108 	add.w	r1, r7, #8
 80056dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056e0:	2205      	movs	r2, #5
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7ff fc2d 	bl	8004f42 <Si446x_SPI_TransmitData>
			Si446x_SPI_Deselect(radio);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7ff fc1a 	bl	8004f22 <Si446x_SPI_Deselect>
		}

		return RADIO_BAND_900;
 80056ee:	2300      	movs	r3, #0
 80056f0:	e000      	b.n	80056f4 <Si446x_SetBand+0x21c>
	}
	return NO_BAND;
 80056f2:	2306      	movs	r3, #6
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3738      	adds	r7, #56	; 0x38
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	0717cbbf 	.word	0x0717cbbf
 8005700:	097a25c0 	.word	0x097a25c0
 8005704:	08005c7c 	.word	0x08005c7c
 8005708:	0a8cce3f 	.word	0x0a8cce3f
 800570c:	0e3ed9c0 	.word	0x0e3ed9c0
 8005710:	08005c84 	.word	0x08005c84
 8005714:	13038dc0 	.word	0x13038dc0
 8005718:	08005c8c 	.word	0x08005c8c
 800571c:	150a5a3f 	.word	0x150a5a3f
 8005720:	1c8cf5c0 	.word	0x1c8cf5c0
 8005724:	08005c94 	.word	0x08005c94
 8005728:	2a05723f 	.word	0x2a05723f
 800572c:	08005c9c 	.word	0x08005c9c
 8005730:	39387000 	.word	0x39387000
 8005734:	08005ca4 	.word	0x08005ca4

08005738 <Si446x_GetBand>:

band Si446x_GetBand(const si446x_t* radio)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
	uint8_t buffer[2];

	uint8_t command[] = {	GET_PROPERTY_CMD,
 8005740:	4b21      	ldr	r3, [pc, #132]	; (80057c8 <Si446x_GetBand+0x90>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	60bb      	str	r3, [r7, #8]
							MODEM_CLKGEN_BAND_GROUP,
							1,
							MODEM_CLKGEN_BAND_GROUP_INDEX,
						};

	if(Si446x_WaitForCTS(radio))
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7ff fc49 	bl	8004fde <Si446x_WaitForCTS>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00d      	beq.n	800576e <Si446x_GetBand+0x36>
	{
		Si446x_SPI_Select(radio);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f7ff fbd5 	bl	8004f02 <Si446x_SPI_Select>
		Si446x_SPI_TransmitData(radio, command, 4, RADIO_SPI_MAX_DELAY);
 8005758:	f107 0108 	add.w	r1, r7, #8
 800575c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005760:	2204      	movs	r2, #4
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f7ff fbed 	bl	8004f42 <Si446x_SPI_TransmitData>
		Si446x_SPI_Deselect(radio);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f7ff fbda 	bl	8004f22 <Si446x_SPI_Deselect>
	}

	Si446x_ReadCommandBuffer(radio, buffer, 2);
 800576e:	f107 030c 	add.w	r3, r7, #12
 8005772:	2202      	movs	r2, #2
 8005774:	4619      	mov	r1, r3
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7ff fc4b 	bl	8005012 <Si446x_ReadCommandBuffer>

	switch (buffer[0] & 0x07) {
 800577c:	7b3b      	ldrb	r3, [r7, #12]
 800577e:	f003 0307 	and.w	r3, r3, #7
 8005782:	2b05      	cmp	r3, #5
 8005784:	d81a      	bhi.n	80057bc <Si446x_GetBand+0x84>
 8005786:	a201      	add	r2, pc, #4	; (adr r2, 800578c <Si446x_GetBand+0x54>)
 8005788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800578c:	080057a5 	.word	0x080057a5
 8005790:	080057a9 	.word	0x080057a9
 8005794:	080057ad 	.word	0x080057ad
 8005798:	080057b1 	.word	0x080057b1
 800579c:	080057b5 	.word	0x080057b5
 80057a0:	080057b9 	.word	0x080057b9
		case 0:
			return RADIO_BAND_900;
 80057a4:	2300      	movs	r3, #0
 80057a6:	e00a      	b.n	80057be <Si446x_GetBand+0x86>
		case 1:
			return NO_BAND;
 80057a8:	2306      	movs	r3, #6
 80057aa:	e008      	b.n	80057be <Si446x_GetBand+0x86>
		case 2:
			return RADIO_BAND_450;
 80057ac:	2302      	movs	r3, #2
 80057ae:	e006      	b.n	80057be <Si446x_GetBand+0x86>
		case 3:
			return RADIO_BAND_300;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e004      	b.n	80057be <Si446x_GetBand+0x86>
		case 4:
			return RADIO_BAND_225;
 80057b4:	2304      	movs	r3, #4
 80057b6:	e002      	b.n	80057be <Si446x_GetBand+0x86>
		case 5:
			return RADIO_BAND_150;
 80057b8:	2305      	movs	r3, #5
 80057ba:	e000      	b.n	80057be <Si446x_GetBand+0x86>
		default:
			return NO_BAND;
 80057bc:	2306      	movs	r3, #6
	}
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	08005cac 	.word	0x08005cac

080057cc <Si446x_SetPowerLevel>:

void Si446x_SetPowerLevel(const si446x_t* radio, uint8_t pwr_lvl)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	460b      	mov	r3, r1
 80057d6:	70fb      	strb	r3, [r7, #3]
	uint8_t command[] = {	SET_PROPERTY_CMD,
 80057d8:	2311      	movs	r3, #17
 80057da:	723b      	strb	r3, [r7, #8]
 80057dc:	2322      	movs	r3, #34	; 0x22
 80057de:	727b      	strb	r3, [r7, #9]
 80057e0:	2301      	movs	r3, #1
 80057e2:	72bb      	strb	r3, [r7, #10]
 80057e4:	2301      	movs	r3, #1
 80057e6:	72fb      	strb	r3, [r7, #11]
 80057e8:	78fb      	ldrb	r3, [r7, #3]
 80057ea:	733b      	strb	r3, [r7, #12]
							1,
							PA_PWR_LVL_INDEX,
							pwr_lvl
					  	 };

	if(Si446x_WaitForCTS(radio))
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f7ff fbf6 	bl	8004fde <Si446x_WaitForCTS>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00d      	beq.n	8005814 <Si446x_SetPowerLevel+0x48>
	{
		Si446x_SPI_Select(radio);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f7ff fb82 	bl	8004f02 <Si446x_SPI_Select>
		Si446x_SPI_TransmitData(radio, command, 5, RADIO_SPI_MAX_DELAY);
 80057fe:	f107 0108 	add.w	r1, r7, #8
 8005802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005806:	2205      	movs	r2, #5
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f7ff fb9a 	bl	8004f42 <Si446x_SPI_TransmitData>
		Si446x_SPI_Deselect(radio);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f7ff fb87 	bl	8004f22 <Si446x_SPI_Deselect>
	}
}
 8005814:	bf00      	nop
 8005816:	3710      	adds	r7, #16
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <Si446x_GetPowerLevel>:

uint8_t Si446x_GetPowerLevel(const si446x_t* radio)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
	uint8_t stream = 0xA5;
 8005824:	23a5      	movs	r3, #165	; 0xa5
 8005826:	73fb      	strb	r3, [r7, #15]

	uint8_t command[] = {	GET_PROPERTY_CMD,
 8005828:	4b12      	ldr	r3, [pc, #72]	; (8005874 <Si446x_GetPowerLevel+0x58>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	60bb      	str	r3, [r7, #8]
							1,
							PA_PWR_LVL_INDEX
					  	};


	if(Si446x_WaitForCTS(radio))
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7ff fbd5 	bl	8004fde <Si446x_WaitForCTS>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00d      	beq.n	8005856 <Si446x_GetPowerLevel+0x3a>
	{
		Si446x_SPI_Select(radio);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7ff fb61 	bl	8004f02 <Si446x_SPI_Select>
		Si446x_SPI_TransmitData(radio, command, 4, RADIO_SPI_MAX_DELAY);
 8005840:	f107 0108 	add.w	r1, r7, #8
 8005844:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005848:	2204      	movs	r2, #4
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f7ff fb79 	bl	8004f42 <Si446x_SPI_TransmitData>
		Si446x_SPI_Deselect(radio);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f7ff fb66 	bl	8004f22 <Si446x_SPI_Deselect>
 	}

	Si446x_ReadCommandBuffer(radio, &stream, 1);
 8005856:	f107 030f 	add.w	r3, r7, #15
 800585a:	2201      	movs	r2, #1
 800585c:	4619      	mov	r1, r3
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f7ff fbd7 	bl	8005012 <Si446x_ReadCommandBuffer>

	Si446x_SPI_Deselect(radio);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f7ff fb5c 	bl	8004f22 <Si446x_SPI_Deselect>

	return stream;
 800586a:	7bfb      	ldrb	r3, [r7, #15]
}
 800586c:	4618      	mov	r0, r3
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	08005cb0 	.word	0x08005cb0

08005878 <Si446x_WriteTXFIFO>:

void Si446x_WriteTXFIFO(const si446x_t* radio)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b090      	sub	sp, #64	; 0x40
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
//							0xFF,
//							0xFF
//	};

	uint8_t command[TXLEN+1];
	command[0] = WRITE_TX_FIFO_CMD;
 8005880:	2366      	movs	r3, #102	; 0x66
 8005882:	723b      	strb	r3, [r7, #8]
	memset(&command[1],0xFF,TXLEN);
 8005884:	f107 0308 	add.w	r3, r7, #8
 8005888:	3301      	adds	r3, #1
 800588a:	2235      	movs	r2, #53	; 0x35
 800588c:	21ff      	movs	r1, #255	; 0xff
 800588e:	4618      	mov	r0, r3
 8005890:	f000 f9da 	bl	8005c48 <memset>

	Si446x_SPI_Select(radio);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f7ff fb34 	bl	8004f02 <Si446x_SPI_Select>
	Si446x_SPI_TransmitData(radio, command, TXLEN+1, RADIO_SPI_MAX_DELAY);
 800589a:	f107 0108 	add.w	r1, r7, #8
 800589e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80058a2:	2236      	movs	r2, #54	; 0x36
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f7ff fb4c 	bl	8004f42 <Si446x_SPI_TransmitData>
	Si446x_SPI_Deselect(radio);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7ff fb39 	bl	8004f22 <Si446x_SPI_Deselect>
}
 80058b0:	bf00      	nop
 80058b2:	3740      	adds	r7, #64	; 0x40
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <Si446x_StartTX>:

void Si446x_StartTX(const si446x_t* radio)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
	uint8_t command[] = {	START_TX_CMD,
 80058c0:	2331      	movs	r3, #49	; 0x31
 80058c2:	723b      	strb	r3, [r7, #8]
							radio->channel,
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	7e1b      	ldrb	r3, [r3, #24]
	uint8_t command[] = {	START_TX_CMD,
 80058c8:	727b      	strb	r3, [r7, #9]
 80058ca:	2330      	movs	r3, #48	; 0x30
 80058cc:	72bb      	strb	r3, [r7, #10]
 80058ce:	2300      	movs	r3, #0
 80058d0:	72fb      	strb	r3, [r7, #11]
 80058d2:	2335      	movs	r3, #53	; 0x35
 80058d4:	733b      	strb	r3, [r7, #12]
							(TXCOMPLETE_STATE << 4 ) | (RETRANSMIT << 2) | (START),
							(TXLEN & 0xF00) >> 8,
							(TXLEN & 0x0FF)
	};

	if(Si446x_WaitForCTS(radio))
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f7ff fb81 	bl	8004fde <Si446x_WaitForCTS>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00d      	beq.n	80058fe <Si446x_StartTX+0x46>
	{
		Si446x_SPI_Select(radio);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f7ff fb0d 	bl	8004f02 <Si446x_SPI_Select>
		Si446x_SPI_TransmitData(radio, command, sizeof(command), RADIO_SPI_MAX_DELAY);
 80058e8:	f107 0108 	add.w	r1, r7, #8
 80058ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80058f0:	2205      	movs	r2, #5
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f7ff fb25 	bl	8004f42 <Si446x_SPI_TransmitData>
		Si446x_SPI_Deselect(radio);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f7ff fb12 	bl	8004f22 <Si446x_SPI_Deselect>
	}

}
 80058fe:	bf00      	nop
 8005900:	3710      	adds	r7, #16
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <Si446x_StartRX>:

void Si446x_StartRX(const si446x_t* radio)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b084      	sub	sp, #16
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
	uint8_t command[] = {	START_RX_CMD,
 800590e:	2332      	movs	r3, #50	; 0x32
 8005910:	723b      	strb	r3, [r7, #8]
							radio->channel,
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	7e1b      	ldrb	r3, [r3, #24]
	uint8_t command[] = {	START_RX_CMD,
 8005916:	727b      	strb	r3, [r7, #9]
 8005918:	2300      	movs	r3, #0
 800591a:	72bb      	strb	r3, [r7, #10]
 800591c:	2300      	movs	r3, #0
 800591e:	72fb      	strb	r3, [r7, #11]
 8005920:	2320      	movs	r3, #32
 8005922:	733b      	strb	r3, [r7, #12]
 8005924:	2308      	movs	r3, #8
 8005926:	737b      	strb	r3, [r7, #13]
 8005928:	2303      	movs	r3, #3
 800592a:	73bb      	strb	r3, [r7, #14]
 800592c:	2303      	movs	r3, #3
 800592e:	73fb      	strb	r3, [r7, #15]
							RX_NEXT_STATE1,
							RX_NEXT_STATE2,
							RX_NEXT_STATE3
	};

	if(Si446x_WaitForCTS(radio))
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f7ff fb54 	bl	8004fde <Si446x_WaitForCTS>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00d      	beq.n	8005958 <Si446x_StartRX+0x52>
	{
		Si446x_SPI_Select(radio);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f7ff fae0 	bl	8004f02 <Si446x_SPI_Select>
		Si446x_SPI_TransmitData(radio, command, 8, RADIO_SPI_MAX_DELAY);
 8005942:	f107 0108 	add.w	r1, r7, #8
 8005946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800594a:	2208      	movs	r2, #8
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f7ff faf8 	bl	8004f42 <Si446x_SPI_TransmitData>
		Si446x_SPI_Deselect(radio);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7ff fae5 	bl	8004f22 <Si446x_SPI_Deselect>
	}

}
 8005958:	bf00      	nop
 800595a:	3710      	adds	r7, #16
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <Si446x_GetRSSI>:

uint8_t Si446x_GetRSSI(si446x_t* radio)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b086      	sub	sp, #24
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
	uint8_t command[] = {	GET_MODEM_STATUS,
 8005968:	2322      	movs	r3, #34	; 0x22
 800596a:	753b      	strb	r3, [r7, #20]
 800596c:	2300      	movs	r3, #0
 800596e:	757b      	strb	r3, [r7, #21]
							MODEM_CLR_PEND
	};

	uint8_t buffer[8];

	if(Si446x_WaitForCTS(radio))
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f7ff fb34 	bl	8004fde <Si446x_WaitForCTS>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00d      	beq.n	8005998 <Si446x_GetRSSI+0x38>
	{
		Si446x_SPI_Select(radio);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f7ff fac0 	bl	8004f02 <Si446x_SPI_Select>
		Si446x_SPI_TransmitData(radio, command, 2, RADIO_SPI_MAX_DELAY);
 8005982:	f107 0114 	add.w	r1, r7, #20
 8005986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800598a:	2202      	movs	r2, #2
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f7ff fad8 	bl	8004f42 <Si446x_SPI_TransmitData>
		Si446x_SPI_Deselect(radio);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f7ff fac5 	bl	8004f22 <Si446x_SPI_Deselect>
	}

	Si446x_ReadCommandBuffer(radio, buffer, 8);
 8005998:	f107 030c 	add.w	r3, r7, #12
 800599c:	2208      	movs	r2, #8
 800599e:	4619      	mov	r1, r3
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f7ff fb36 	bl	8005012 <Si446x_ReadCommandBuffer>
	//read ANT1_RSSI
	//read ANT2_RSSI
	//read AFC_FREQ_OFFSET [15:0]


	return buffer[2];
 80059a6:	7bbb      	ldrb	r3, [r7, #14]

}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3718      	adds	r7, #24
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <Si446x_SetRSSILatch>:
	}

}

void Si446x_SetRSSILatch(const si446x_t* radio)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
	uint8_t command[] = {	SET_PROPERTY_CMD,
 80059b8:	4a0f      	ldr	r2, [pc, #60]	; (80059f8 <Si446x_SetRSSILatch+0x48>)
 80059ba:	f107 0308 	add.w	r3, r7, #8
 80059be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80059c2:	6018      	str	r0, [r3, #0]
 80059c4:	3304      	adds	r3, #4
 80059c6:	7019      	strb	r1, [r3, #0]
							1,
							MODEM_RSSI_CONTROL_INDEX,
							(CHECK_THRESH_AT_LATCH << 5) | (RSSI_AVERAGE << 3) | (LATCH)
	};

	if(Si446x_WaitForCTS(radio))
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f7ff fb08 	bl	8004fde <Si446x_WaitForCTS>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00d      	beq.n	80059f0 <Si446x_SetRSSILatch+0x40>
	{
		Si446x_SPI_Select(radio);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f7ff fa94 	bl	8004f02 <Si446x_SPI_Select>
		Si446x_SPI_TransmitData(radio, command, 5, RADIO_SPI_MAX_DELAY);
 80059da:	f107 0108 	add.w	r1, r7, #8
 80059de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80059e2:	2205      	movs	r2, #5
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f7ff faac 	bl	8004f42 <Si446x_SPI_TransmitData>
		Si446x_SPI_Deselect(radio);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f7ff fa99 	bl	8004f22 <Si446x_SPI_Deselect>
	}
}
 80059f0:	bf00      	nop
 80059f2:	3710      	adds	r7, #16
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	08005cb4 	.word	0x08005cb4

080059fc <Si446x_SetXOTune>:

void Si446x_SetXOTune(const si446x_t* radio)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
	uint8_t command[] = {	SET_PROPERTY_CMD,
 8005a04:	4a0f      	ldr	r2, [pc, #60]	; (8005a44 <Si446x_SetXOTune+0x48>)
 8005a06:	f107 0308 	add.w	r3, r7, #8
 8005a0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005a0e:	6018      	str	r0, [r3, #0]
 8005a10:	3304      	adds	r3, #4
 8005a12:	7019      	strb	r1, [r3, #0]
							1,
							GLOBAL_XO_TUNE_INDEX,
							TUNE_VALUE
	};

	if(Si446x_WaitForCTS(radio))
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f7ff fae2 	bl	8004fde <Si446x_WaitForCTS>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00d      	beq.n	8005a3c <Si446x_SetXOTune+0x40>
	{
		Si446x_SPI_Select(radio);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f7ff fa6e 	bl	8004f02 <Si446x_SPI_Select>
		Si446x_SPI_TransmitData(radio, command, 5, RADIO_SPI_MAX_DELAY);
 8005a26:	f107 0108 	add.w	r1, r7, #8
 8005a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005a2e:	2205      	movs	r2, #5
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f7ff fa86 	bl	8004f42 <Si446x_SPI_TransmitData>
		Si446x_SPI_Deselect(radio);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f7ff fa73 	bl	8004f22 <Si446x_SPI_Deselect>
	}
}
 8005a3c:	bf00      	nop
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	08005cbc 	.word	0x08005cbc

08005a48 <StateMachine_Init>:
extern uint32_t resolution;
extern si446x_t transmitter;
extern si446x_t receiver;

void StateMachine_Init(statemachine_t* sm, state_t state, UART_HandleTypeDef* huart)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	460b      	mov	r3, r1
 8005a52:	607a      	str	r2, [r7, #4]
 8005a54:	72fb      	strb	r3, [r7, #11]
	sm->state = state;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	7afa      	ldrb	r2, [r7, #11]
 8005a5a:	701a      	strb	r2, [r3, #0]
	sm->huart = huart;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	605a      	str	r2, [r3, #4]
}
 8005a62:	bf00      	nop
 8005a64:	3714      	adds	r7, #20
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <WaitingForCommand>:

void WaitingForCommand(statemachine_t* sm)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b083      	sub	sp, #12
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]

}
 8005a76:	bf00      	nop
 8005a78:	370c      	adds	r7, #12
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <GettingStartFrequency>:

void GettingStartFrequency(statemachine_t* sm)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b083      	sub	sp, #12
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]

}
 8005a8a:	bf00      	nop
 8005a8c:	370c      	adds	r7, #12
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <GettingStopFrequency>:

void GettingStopFrequency(statemachine_t* sm)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b083      	sub	sp, #12
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]

}
 8005a9e:	bf00      	nop
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
	...

08005aac <StartMeasurement>:
{

}

void StartMeasurement(statemachine_t* sm)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
	/* mondjuk led villanás */
	HAL_GPIO_WritePin(TestLED_GPIO_Port, TestLED_Pin, GPIO_PIN_SET);
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005aba:	4809      	ldr	r0, [pc, #36]	; (8005ae0 <StartMeasurement+0x34>)
 8005abc:	f7fb fed2 	bl	8001864 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8005ac0:	2064      	movs	r0, #100	; 0x64
 8005ac2:	f7fb fbb3 	bl	800122c <HAL_Delay>
	HAL_GPIO_WritePin(TestLED_GPIO_Port, TestLED_Pin, GPIO_PIN_RESET);
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005acc:	4804      	ldr	r0, [pc, #16]	; (8005ae0 <StartMeasurement+0x34>)
 8005ace:	f7fb fec9 	bl	8001864 <HAL_GPIO_WritePin>
	sm->state = State_Measuring;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2205      	movs	r2, #5
 8005ad6:	701a      	strb	r2, [r3, #0]
}
 8005ad8:	bf00      	nop
 8005ada:	3708      	adds	r7, #8
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	48000800 	.word	0x48000800

08005ae4 <Measuring>:

void Measuring(statemachine_t* sm)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b086      	sub	sp, #24
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
	uint8_t switchPosition = 0;
 8005aec:	2300      	movs	r3, #0
 8005aee:	73fb      	strb	r3, [r7, #15]
	uint8_t RSSI=0;
 8005af0:	2300      	movs	r3, #0
 8005af2:	73bb      	strb	r3, [r7, #14]

	  for (uint32_t i = startFreq; i < stopFreq; i+=resolution)
 8005af4:	4b3c      	ldr	r3, [pc, #240]	; (8005be8 <Measuring+0x104>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	60bb      	str	r3, [r7, #8]
 8005afa:	e063      	b.n	8005bc4 <Measuring+0xe0>
	  {
		  HAL_GPIO_TogglePin(TestLED_GPIO_Port, TestLED_Pin);
 8005afc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005b00:	483a      	ldr	r0, [pc, #232]	; (8005bec <Measuring+0x108>)
 8005b02:	f7fb fec7 	bl	8001894 <HAL_GPIO_TogglePin>
		  Si446x_SetFrequency(&transmitter, i);
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	4619      	mov	r1, r3
 8005b0a:	4839      	ldr	r0, [pc, #228]	; (8005bf0 <Measuring+0x10c>)
 8005b0c:	f7ff fba0 	bl	8005250 <Si446x_SetFrequency>
		  Si446x_SetFrequency(&receiver, i);
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	4619      	mov	r1, r3
 8005b14:	4837      	ldr	r0, [pc, #220]	; (8005bf4 <Measuring+0x110>)
 8005b16:	f7ff fb9b 	bl	8005250 <Si446x_SetFrequency>
		  if(Si446x_GetBand(&transmitter) != NO_BAND)
 8005b1a:	4835      	ldr	r0, [pc, #212]	; (8005bf0 <Measuring+0x10c>)
 8005b1c:	f7ff fe0c 	bl	8005738 <Si446x_GetBand>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b06      	cmp	r3, #6
 8005b24:	d049      	beq.n	8005bba <Measuring+0xd6>
		  {
			  HAL_UART_Transmit(sm->huart, &i, 4, 1000);				//Freq
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6858      	ldr	r0, [r3, #4]
 8005b2a:	f107 0108 	add.w	r1, r7, #8
 8005b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b32:	2204      	movs	r2, #4
 8005b34:	f7fd ff6e 	bl	8003a14 <HAL_UART_Transmit>
			  for(int j = 0; j < 2; j++) //dpdt
 8005b38:	2300      	movs	r3, #0
 8005b3a:	617b      	str	r3, [r7, #20]
 8005b3c:	e03a      	b.n	8005bb4 <Measuring+0xd0>
			  {
				  for (int k = 0; k < 4; k++)	//sp4t
 8005b3e:	2300      	movs	r3, #0
 8005b40:	613b      	str	r3, [r7, #16]
 8005b42:	e031      	b.n	8005ba8 <Measuring+0xc4>
				  {
					  switchPosition = (k << 1) | j;
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	005b      	lsls	r3, r3, #1
 8005b48:	b25a      	sxtb	r2, r3
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	b25b      	sxtb	r3, r3
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	b25b      	sxtb	r3, r3
 8005b52:	73fb      	strb	r3, [r7, #15]
					  SP4T_SelectInput(k);
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f7ff f8e7 	bl	8004d2c <SP4T_SelectInput>
					  DPDT_SelectInput(j);
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7ff f932 	bl	8004dcc <DPDT_SelectInput>
					  HAL_Delay(1);
 8005b68:	2001      	movs	r0, #1
 8005b6a:	f7fb fb5f 	bl	800122c <HAL_Delay>
					  Si446x_WriteTXFIFO(&transmitter);
 8005b6e:	4820      	ldr	r0, [pc, #128]	; (8005bf0 <Measuring+0x10c>)
 8005b70:	f7ff fe82 	bl	8005878 <Si446x_WriteTXFIFO>
					  HAL_Delay(1);
 8005b74:	2001      	movs	r0, #1
 8005b76:	f7fb fb59 	bl	800122c <HAL_Delay>
					  Si446x_StartTX(&transmitter);
 8005b7a:	481d      	ldr	r0, [pc, #116]	; (8005bf0 <Measuring+0x10c>)
 8005b7c:	f7ff fe9c 	bl	80058b8 <Si446x_StartTX>
					  Si446x_StartRX(&receiver);
 8005b80:	481c      	ldr	r0, [pc, #112]	; (8005bf4 <Measuring+0x110>)
 8005b82:	f7ff fec0 	bl	8005906 <Si446x_StartRX>
					  RSSI = Si446x_GetRSSI(&receiver);
 8005b86:	481b      	ldr	r0, [pc, #108]	; (8005bf4 <Measuring+0x110>)
 8005b88:	f7ff feea 	bl	8005960 <Si446x_GetRSSI>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	73bb      	strb	r3, [r7, #14]
	 //				  HAL_UART_Transmit(sm->huart, &switchPosition, 1, 1000);	//switch
					  HAL_UART_Transmit(sm->huart, &RSSI, 1, 1000);				//RSSI
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6858      	ldr	r0, [r3, #4]
 8005b94:	f107 010e 	add.w	r1, r7, #14
 8005b98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f7fd ff39 	bl	8003a14 <HAL_UART_Transmit>
				  for (int k = 0; k < 4; k++)	//sp4t
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	613b      	str	r3, [r7, #16]
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	2b03      	cmp	r3, #3
 8005bac:	ddca      	ble.n	8005b44 <Measuring+0x60>
			  for(int j = 0; j < 2; j++) //dpdt
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	617b      	str	r3, [r7, #20]
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	ddc1      	ble.n	8005b3e <Measuring+0x5a>
	  for (uint32_t i = startFreq; i < stopFreq; i+=resolution)
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	4b0e      	ldr	r3, [pc, #56]	; (8005bf8 <Measuring+0x114>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	60bb      	str	r3, [r7, #8]
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	4b0d      	ldr	r3, [pc, #52]	; (8005bfc <Measuring+0x118>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d396      	bcc.n	8005afc <Measuring+0x18>
				  }
			  }
		  }
	  }
	  HAL_GPIO_WritePin(TestLED_GPIO_Port, TestLED_Pin, GPIO_PIN_RESET);
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005bd4:	4805      	ldr	r0, [pc, #20]	; (8005bec <Measuring+0x108>)
 8005bd6:	f7fb fe45 	bl	8001864 <HAL_GPIO_WritePin>
	  sm->state = State_WaitingForCommand;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	701a      	strb	r2, [r3, #0]
}
 8005be0:	bf00      	nop
 8005be2:	3718      	adds	r7, #24
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	20000000 	.word	0x20000000
 8005bec:	48000800 	.word	0x48000800
 8005bf0:	2000005c 	.word	0x2000005c
 8005bf4:	20000038 	.word	0x20000038
 8005bf8:	20000008 	.word	0x20000008
 8005bfc:	20000004 	.word	0x20000004

08005c00 <__libc_init_array>:
 8005c00:	b570      	push	{r4, r5, r6, lr}
 8005c02:	4e0d      	ldr	r6, [pc, #52]	; (8005c38 <__libc_init_array+0x38>)
 8005c04:	4c0d      	ldr	r4, [pc, #52]	; (8005c3c <__libc_init_array+0x3c>)
 8005c06:	1ba4      	subs	r4, r4, r6
 8005c08:	10a4      	asrs	r4, r4, #2
 8005c0a:	2500      	movs	r5, #0
 8005c0c:	42a5      	cmp	r5, r4
 8005c0e:	d109      	bne.n	8005c24 <__libc_init_array+0x24>
 8005c10:	4e0b      	ldr	r6, [pc, #44]	; (8005c40 <__libc_init_array+0x40>)
 8005c12:	4c0c      	ldr	r4, [pc, #48]	; (8005c44 <__libc_init_array+0x44>)
 8005c14:	f000 f820 	bl	8005c58 <_init>
 8005c18:	1ba4      	subs	r4, r4, r6
 8005c1a:	10a4      	asrs	r4, r4, #2
 8005c1c:	2500      	movs	r5, #0
 8005c1e:	42a5      	cmp	r5, r4
 8005c20:	d105      	bne.n	8005c2e <__libc_init_array+0x2e>
 8005c22:	bd70      	pop	{r4, r5, r6, pc}
 8005c24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c28:	4798      	blx	r3
 8005c2a:	3501      	adds	r5, #1
 8005c2c:	e7ee      	b.n	8005c0c <__libc_init_array+0xc>
 8005c2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c32:	4798      	blx	r3
 8005c34:	3501      	adds	r5, #1
 8005c36:	e7f2      	b.n	8005c1e <__libc_init_array+0x1e>
 8005c38:	08005cfc 	.word	0x08005cfc
 8005c3c:	08005cfc 	.word	0x08005cfc
 8005c40:	08005cfc 	.word	0x08005cfc
 8005c44:	08005d00 	.word	0x08005d00

08005c48 <memset>:
 8005c48:	4402      	add	r2, r0
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d100      	bne.n	8005c52 <memset+0xa>
 8005c50:	4770      	bx	lr
 8005c52:	f803 1b01 	strb.w	r1, [r3], #1
 8005c56:	e7f9      	b.n	8005c4c <memset+0x4>

08005c58 <_init>:
 8005c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c5a:	bf00      	nop
 8005c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c5e:	bc08      	pop	{r3}
 8005c60:	469e      	mov	lr, r3
 8005c62:	4770      	bx	lr

08005c64 <_fini>:
 8005c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c66:	bf00      	nop
 8005c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c6a:	bc08      	pop	{r3}
 8005c6c:	469e      	mov	lr, r3
 8005c6e:	4770      	bx	lr
